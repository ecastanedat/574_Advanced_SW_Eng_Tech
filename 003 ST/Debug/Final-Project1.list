
Final-Project1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008790  080002d0  080002d0  000102d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e0  08008a60  08008a60  00018a60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08008b40  08008b40  00018b40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08008b48  08008b48  00018b48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08008b4c  08008b4c  00018b4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000078  24000000  08008b50  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  24000078  08008bc8  00020078  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  240000d8  08008c28  000200d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004c08  24000138  08008c88  00020138  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24004d40  08008c88  00024d40  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020138  2**0
                  CONTENTS, READONLY
 12 .debug_info   000259db  00000000  00000000  00020166  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000041e1  00000000  00000000  00045b41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a48  00000000  00000000  00049d28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000018b0  00000000  00000000  0004b770  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00036860  00000000  00000000  0004d020  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00020b04  00000000  00000000  00083880  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0015caa1  00000000  00000000  000a4384  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00200e25  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000071d4  00000000  00000000  00200e78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000138 	.word	0x24000138
 80002ec:	00000000 	.word	0x00000000
 80002f0:	08008a48 	.word	0x08008a48

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	2400013c 	.word	0x2400013c
 800030c:	08008a48 	.word	0x08008a48

08000310 <__aeabi_uldivmod>:
 8000310:	b953      	cbnz	r3, 8000328 <__aeabi_uldivmod+0x18>
 8000312:	b94a      	cbnz	r2, 8000328 <__aeabi_uldivmod+0x18>
 8000314:	2900      	cmp	r1, #0
 8000316:	bf08      	it	eq
 8000318:	2800      	cmpeq	r0, #0
 800031a:	bf1c      	itt	ne
 800031c:	f04f 31ff 	movne.w	r1, #4294967295
 8000320:	f04f 30ff 	movne.w	r0, #4294967295
 8000324:	f000 b974 	b.w	8000610 <__aeabi_idiv0>
 8000328:	f1ad 0c08 	sub.w	ip, sp, #8
 800032c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000330:	f000 f806 	bl	8000340 <__udivmoddi4>
 8000334:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800033c:	b004      	add	sp, #16
 800033e:	4770      	bx	lr

08000340 <__udivmoddi4>:
 8000340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000344:	9d08      	ldr	r5, [sp, #32]
 8000346:	4604      	mov	r4, r0
 8000348:	468e      	mov	lr, r1
 800034a:	2b00      	cmp	r3, #0
 800034c:	d14d      	bne.n	80003ea <__udivmoddi4+0xaa>
 800034e:	428a      	cmp	r2, r1
 8000350:	4694      	mov	ip, r2
 8000352:	d969      	bls.n	8000428 <__udivmoddi4+0xe8>
 8000354:	fab2 f282 	clz	r2, r2
 8000358:	b152      	cbz	r2, 8000370 <__udivmoddi4+0x30>
 800035a:	fa01 f302 	lsl.w	r3, r1, r2
 800035e:	f1c2 0120 	rsb	r1, r2, #32
 8000362:	fa20 f101 	lsr.w	r1, r0, r1
 8000366:	fa0c fc02 	lsl.w	ip, ip, r2
 800036a:	ea41 0e03 	orr.w	lr, r1, r3
 800036e:	4094      	lsls	r4, r2
 8000370:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000374:	0c21      	lsrs	r1, r4, #16
 8000376:	fbbe f6f8 	udiv	r6, lr, r8
 800037a:	fa1f f78c 	uxth.w	r7, ip
 800037e:	fb08 e316 	mls	r3, r8, r6, lr
 8000382:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000386:	fb06 f107 	mul.w	r1, r6, r7
 800038a:	4299      	cmp	r1, r3
 800038c:	d90a      	bls.n	80003a4 <__udivmoddi4+0x64>
 800038e:	eb1c 0303 	adds.w	r3, ip, r3
 8000392:	f106 30ff 	add.w	r0, r6, #4294967295
 8000396:	f080 811f 	bcs.w	80005d8 <__udivmoddi4+0x298>
 800039a:	4299      	cmp	r1, r3
 800039c:	f240 811c 	bls.w	80005d8 <__udivmoddi4+0x298>
 80003a0:	3e02      	subs	r6, #2
 80003a2:	4463      	add	r3, ip
 80003a4:	1a5b      	subs	r3, r3, r1
 80003a6:	b2a4      	uxth	r4, r4
 80003a8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003ac:	fb08 3310 	mls	r3, r8, r0, r3
 80003b0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003b4:	fb00 f707 	mul.w	r7, r0, r7
 80003b8:	42a7      	cmp	r7, r4
 80003ba:	d90a      	bls.n	80003d2 <__udivmoddi4+0x92>
 80003bc:	eb1c 0404 	adds.w	r4, ip, r4
 80003c0:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c4:	f080 810a 	bcs.w	80005dc <__udivmoddi4+0x29c>
 80003c8:	42a7      	cmp	r7, r4
 80003ca:	f240 8107 	bls.w	80005dc <__udivmoddi4+0x29c>
 80003ce:	4464      	add	r4, ip
 80003d0:	3802      	subs	r0, #2
 80003d2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003d6:	1be4      	subs	r4, r4, r7
 80003d8:	2600      	movs	r6, #0
 80003da:	b11d      	cbz	r5, 80003e4 <__udivmoddi4+0xa4>
 80003dc:	40d4      	lsrs	r4, r2
 80003de:	2300      	movs	r3, #0
 80003e0:	e9c5 4300 	strd	r4, r3, [r5]
 80003e4:	4631      	mov	r1, r6
 80003e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d909      	bls.n	8000402 <__udivmoddi4+0xc2>
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	f000 80ef 	beq.w	80005d2 <__udivmoddi4+0x292>
 80003f4:	2600      	movs	r6, #0
 80003f6:	e9c5 0100 	strd	r0, r1, [r5]
 80003fa:	4630      	mov	r0, r6
 80003fc:	4631      	mov	r1, r6
 80003fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000402:	fab3 f683 	clz	r6, r3
 8000406:	2e00      	cmp	r6, #0
 8000408:	d14a      	bne.n	80004a0 <__udivmoddi4+0x160>
 800040a:	428b      	cmp	r3, r1
 800040c:	d302      	bcc.n	8000414 <__udivmoddi4+0xd4>
 800040e:	4282      	cmp	r2, r0
 8000410:	f200 80f9 	bhi.w	8000606 <__udivmoddi4+0x2c6>
 8000414:	1a84      	subs	r4, r0, r2
 8000416:	eb61 0303 	sbc.w	r3, r1, r3
 800041a:	2001      	movs	r0, #1
 800041c:	469e      	mov	lr, r3
 800041e:	2d00      	cmp	r5, #0
 8000420:	d0e0      	beq.n	80003e4 <__udivmoddi4+0xa4>
 8000422:	e9c5 4e00 	strd	r4, lr, [r5]
 8000426:	e7dd      	b.n	80003e4 <__udivmoddi4+0xa4>
 8000428:	b902      	cbnz	r2, 800042c <__udivmoddi4+0xec>
 800042a:	deff      	udf	#255	; 0xff
 800042c:	fab2 f282 	clz	r2, r2
 8000430:	2a00      	cmp	r2, #0
 8000432:	f040 8092 	bne.w	800055a <__udivmoddi4+0x21a>
 8000436:	eba1 010c 	sub.w	r1, r1, ip
 800043a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800043e:	fa1f fe8c 	uxth.w	lr, ip
 8000442:	2601      	movs	r6, #1
 8000444:	0c20      	lsrs	r0, r4, #16
 8000446:	fbb1 f3f7 	udiv	r3, r1, r7
 800044a:	fb07 1113 	mls	r1, r7, r3, r1
 800044e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000452:	fb0e f003 	mul.w	r0, lr, r3
 8000456:	4288      	cmp	r0, r1
 8000458:	d908      	bls.n	800046c <__udivmoddi4+0x12c>
 800045a:	eb1c 0101 	adds.w	r1, ip, r1
 800045e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000462:	d202      	bcs.n	800046a <__udivmoddi4+0x12a>
 8000464:	4288      	cmp	r0, r1
 8000466:	f200 80cb 	bhi.w	8000600 <__udivmoddi4+0x2c0>
 800046a:	4643      	mov	r3, r8
 800046c:	1a09      	subs	r1, r1, r0
 800046e:	b2a4      	uxth	r4, r4
 8000470:	fbb1 f0f7 	udiv	r0, r1, r7
 8000474:	fb07 1110 	mls	r1, r7, r0, r1
 8000478:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800047c:	fb0e fe00 	mul.w	lr, lr, r0
 8000480:	45a6      	cmp	lr, r4
 8000482:	d908      	bls.n	8000496 <__udivmoddi4+0x156>
 8000484:	eb1c 0404 	adds.w	r4, ip, r4
 8000488:	f100 31ff 	add.w	r1, r0, #4294967295
 800048c:	d202      	bcs.n	8000494 <__udivmoddi4+0x154>
 800048e:	45a6      	cmp	lr, r4
 8000490:	f200 80bb 	bhi.w	800060a <__udivmoddi4+0x2ca>
 8000494:	4608      	mov	r0, r1
 8000496:	eba4 040e 	sub.w	r4, r4, lr
 800049a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800049e:	e79c      	b.n	80003da <__udivmoddi4+0x9a>
 80004a0:	f1c6 0720 	rsb	r7, r6, #32
 80004a4:	40b3      	lsls	r3, r6
 80004a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80004aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80004ae:	fa20 f407 	lsr.w	r4, r0, r7
 80004b2:	fa01 f306 	lsl.w	r3, r1, r6
 80004b6:	431c      	orrs	r4, r3
 80004b8:	40f9      	lsrs	r1, r7
 80004ba:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004be:	fa00 f306 	lsl.w	r3, r0, r6
 80004c2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004c6:	0c20      	lsrs	r0, r4, #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fb09 1118 	mls	r1, r9, r8, r1
 80004d0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004d4:	fb08 f00e 	mul.w	r0, r8, lr
 80004d8:	4288      	cmp	r0, r1
 80004da:	fa02 f206 	lsl.w	r2, r2, r6
 80004de:	d90b      	bls.n	80004f8 <__udivmoddi4+0x1b8>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004e8:	f080 8088 	bcs.w	80005fc <__udivmoddi4+0x2bc>
 80004ec:	4288      	cmp	r0, r1
 80004ee:	f240 8085 	bls.w	80005fc <__udivmoddi4+0x2bc>
 80004f2:	f1a8 0802 	sub.w	r8, r8, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1a09      	subs	r1, r1, r0
 80004fa:	b2a4      	uxth	r4, r4
 80004fc:	fbb1 f0f9 	udiv	r0, r1, r9
 8000500:	fb09 1110 	mls	r1, r9, r0, r1
 8000504:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000508:	fb00 fe0e 	mul.w	lr, r0, lr
 800050c:	458e      	cmp	lr, r1
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x1e2>
 8000510:	eb1c 0101 	adds.w	r1, ip, r1
 8000514:	f100 34ff 	add.w	r4, r0, #4294967295
 8000518:	d26c      	bcs.n	80005f4 <__udivmoddi4+0x2b4>
 800051a:	458e      	cmp	lr, r1
 800051c:	d96a      	bls.n	80005f4 <__udivmoddi4+0x2b4>
 800051e:	3802      	subs	r0, #2
 8000520:	4461      	add	r1, ip
 8000522:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000526:	fba0 9402 	umull	r9, r4, r0, r2
 800052a:	eba1 010e 	sub.w	r1, r1, lr
 800052e:	42a1      	cmp	r1, r4
 8000530:	46c8      	mov	r8, r9
 8000532:	46a6      	mov	lr, r4
 8000534:	d356      	bcc.n	80005e4 <__udivmoddi4+0x2a4>
 8000536:	d053      	beq.n	80005e0 <__udivmoddi4+0x2a0>
 8000538:	b15d      	cbz	r5, 8000552 <__udivmoddi4+0x212>
 800053a:	ebb3 0208 	subs.w	r2, r3, r8
 800053e:	eb61 010e 	sbc.w	r1, r1, lr
 8000542:	fa01 f707 	lsl.w	r7, r1, r7
 8000546:	fa22 f306 	lsr.w	r3, r2, r6
 800054a:	40f1      	lsrs	r1, r6
 800054c:	431f      	orrs	r7, r3
 800054e:	e9c5 7100 	strd	r7, r1, [r5]
 8000552:	2600      	movs	r6, #0
 8000554:	4631      	mov	r1, r6
 8000556:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800055a:	f1c2 0320 	rsb	r3, r2, #32
 800055e:	40d8      	lsrs	r0, r3
 8000560:	fa0c fc02 	lsl.w	ip, ip, r2
 8000564:	fa21 f303 	lsr.w	r3, r1, r3
 8000568:	4091      	lsls	r1, r2
 800056a:	4301      	orrs	r1, r0
 800056c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000570:	fa1f fe8c 	uxth.w	lr, ip
 8000574:	fbb3 f0f7 	udiv	r0, r3, r7
 8000578:	fb07 3610 	mls	r6, r7, r0, r3
 800057c:	0c0b      	lsrs	r3, r1, #16
 800057e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000582:	fb00 f60e 	mul.w	r6, r0, lr
 8000586:	429e      	cmp	r6, r3
 8000588:	fa04 f402 	lsl.w	r4, r4, r2
 800058c:	d908      	bls.n	80005a0 <__udivmoddi4+0x260>
 800058e:	eb1c 0303 	adds.w	r3, ip, r3
 8000592:	f100 38ff 	add.w	r8, r0, #4294967295
 8000596:	d22f      	bcs.n	80005f8 <__udivmoddi4+0x2b8>
 8000598:	429e      	cmp	r6, r3
 800059a:	d92d      	bls.n	80005f8 <__udivmoddi4+0x2b8>
 800059c:	3802      	subs	r0, #2
 800059e:	4463      	add	r3, ip
 80005a0:	1b9b      	subs	r3, r3, r6
 80005a2:	b289      	uxth	r1, r1
 80005a4:	fbb3 f6f7 	udiv	r6, r3, r7
 80005a8:	fb07 3316 	mls	r3, r7, r6, r3
 80005ac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005b0:	fb06 f30e 	mul.w	r3, r6, lr
 80005b4:	428b      	cmp	r3, r1
 80005b6:	d908      	bls.n	80005ca <__udivmoddi4+0x28a>
 80005b8:	eb1c 0101 	adds.w	r1, ip, r1
 80005bc:	f106 38ff 	add.w	r8, r6, #4294967295
 80005c0:	d216      	bcs.n	80005f0 <__udivmoddi4+0x2b0>
 80005c2:	428b      	cmp	r3, r1
 80005c4:	d914      	bls.n	80005f0 <__udivmoddi4+0x2b0>
 80005c6:	3e02      	subs	r6, #2
 80005c8:	4461      	add	r1, ip
 80005ca:	1ac9      	subs	r1, r1, r3
 80005cc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005d0:	e738      	b.n	8000444 <__udivmoddi4+0x104>
 80005d2:	462e      	mov	r6, r5
 80005d4:	4628      	mov	r0, r5
 80005d6:	e705      	b.n	80003e4 <__udivmoddi4+0xa4>
 80005d8:	4606      	mov	r6, r0
 80005da:	e6e3      	b.n	80003a4 <__udivmoddi4+0x64>
 80005dc:	4618      	mov	r0, r3
 80005de:	e6f8      	b.n	80003d2 <__udivmoddi4+0x92>
 80005e0:	454b      	cmp	r3, r9
 80005e2:	d2a9      	bcs.n	8000538 <__udivmoddi4+0x1f8>
 80005e4:	ebb9 0802 	subs.w	r8, r9, r2
 80005e8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005ec:	3801      	subs	r0, #1
 80005ee:	e7a3      	b.n	8000538 <__udivmoddi4+0x1f8>
 80005f0:	4646      	mov	r6, r8
 80005f2:	e7ea      	b.n	80005ca <__udivmoddi4+0x28a>
 80005f4:	4620      	mov	r0, r4
 80005f6:	e794      	b.n	8000522 <__udivmoddi4+0x1e2>
 80005f8:	4640      	mov	r0, r8
 80005fa:	e7d1      	b.n	80005a0 <__udivmoddi4+0x260>
 80005fc:	46d0      	mov	r8, sl
 80005fe:	e77b      	b.n	80004f8 <__udivmoddi4+0x1b8>
 8000600:	3b02      	subs	r3, #2
 8000602:	4461      	add	r1, ip
 8000604:	e732      	b.n	800046c <__udivmoddi4+0x12c>
 8000606:	4630      	mov	r0, r6
 8000608:	e709      	b.n	800041e <__udivmoddi4+0xde>
 800060a:	4464      	add	r4, ip
 800060c:	3802      	subs	r0, #2
 800060e:	e742      	b.n	8000496 <__udivmoddi4+0x156>

08000610 <__aeabi_idiv0>:
 8000610:	4770      	bx	lr
 8000612:	bf00      	nop

08000614 <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000618:	4b1e      	ldr	r3, [pc, #120]	; (8000694 <MX_ETH_Init+0x80>)
 800061a:	4a1f      	ldr	r2, [pc, #124]	; (8000698 <MX_ETH_Init+0x84>)
 800061c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800061e:	4b1f      	ldr	r3, [pc, #124]	; (800069c <MX_ETH_Init+0x88>)
 8000620:	2200      	movs	r2, #0
 8000622:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000624:	4b1d      	ldr	r3, [pc, #116]	; (800069c <MX_ETH_Init+0x88>)
 8000626:	2280      	movs	r2, #128	; 0x80
 8000628:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800062a:	4b1c      	ldr	r3, [pc, #112]	; (800069c <MX_ETH_Init+0x88>)
 800062c:	22e1      	movs	r2, #225	; 0xe1
 800062e:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000630:	4b1a      	ldr	r3, [pc, #104]	; (800069c <MX_ETH_Init+0x88>)
 8000632:	2200      	movs	r2, #0
 8000634:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000636:	4b19      	ldr	r3, [pc, #100]	; (800069c <MX_ETH_Init+0x88>)
 8000638:	2200      	movs	r2, #0
 800063a:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 800063c:	4b17      	ldr	r3, [pc, #92]	; (800069c <MX_ETH_Init+0x88>)
 800063e:	2200      	movs	r2, #0
 8000640:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000642:	4b14      	ldr	r3, [pc, #80]	; (8000694 <MX_ETH_Init+0x80>)
 8000644:	4a15      	ldr	r2, [pc, #84]	; (800069c <MX_ETH_Init+0x88>)
 8000646:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000648:	4b12      	ldr	r3, [pc, #72]	; (8000694 <MX_ETH_Init+0x80>)
 800064a:	2201      	movs	r2, #1
 800064c:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800064e:	4b11      	ldr	r3, [pc, #68]	; (8000694 <MX_ETH_Init+0x80>)
 8000650:	4a13      	ldr	r2, [pc, #76]	; (80006a0 <MX_ETH_Init+0x8c>)
 8000652:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000654:	4b0f      	ldr	r3, [pc, #60]	; (8000694 <MX_ETH_Init+0x80>)
 8000656:	4a13      	ldr	r2, [pc, #76]	; (80006a4 <MX_ETH_Init+0x90>)
 8000658:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 800065a:	4b0e      	ldr	r3, [pc, #56]	; (8000694 <MX_ETH_Init+0x80>)
 800065c:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000660:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000662:	480c      	ldr	r0, [pc, #48]	; (8000694 <MX_ETH_Init+0x80>)
 8000664:	f000 fdf6 	bl	8001254 <HAL_ETH_Init>
 8000668:	4603      	mov	r3, r0
 800066a:	2b00      	cmp	r3, #0
 800066c:	d001      	beq.n	8000672 <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 800066e:	f000 fa9f 	bl	8000bb0 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000672:	2238      	movs	r2, #56	; 0x38
 8000674:	2100      	movs	r1, #0
 8000676:	480c      	ldr	r0, [pc, #48]	; (80006a8 <MX_ETH_Init+0x94>)
 8000678:	f008 f91c 	bl	80088b4 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800067c:	4b0a      	ldr	r3, [pc, #40]	; (80006a8 <MX_ETH_Init+0x94>)
 800067e:	2221      	movs	r2, #33	; 0x21
 8000680:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000682:	4b09      	ldr	r3, [pc, #36]	; (80006a8 <MX_ETH_Init+0x94>)
 8000684:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000688:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800068a:	4b07      	ldr	r3, [pc, #28]	; (80006a8 <MX_ETH_Init+0x94>)
 800068c:	2200      	movs	r2, #0
 800068e:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000690:	bf00      	nop
 8000692:	bd80      	pop	{r7, pc}
 8000694:	2400018c 	.word	0x2400018c
 8000698:	40028000 	.word	0x40028000
 800069c:	2400023c 	.word	0x2400023c
 80006a0:	240000d8 	.word	0x240000d8
 80006a4:	24000078 	.word	0x24000078
 80006a8:	24000154 	.word	0x24000154

080006ac <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b08e      	sub	sp, #56	; 0x38
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006b8:	2200      	movs	r2, #0
 80006ba:	601a      	str	r2, [r3, #0]
 80006bc:	605a      	str	r2, [r3, #4]
 80006be:	609a      	str	r2, [r3, #8]
 80006c0:	60da      	str	r2, [r3, #12]
 80006c2:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	4a59      	ldr	r2, [pc, #356]	; (8000830 <HAL_ETH_MspInit+0x184>)
 80006ca:	4293      	cmp	r3, r2
 80006cc:	f040 80ab 	bne.w	8000826 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 80006d0:	4b58      	ldr	r3, [pc, #352]	; (8000834 <HAL_ETH_MspInit+0x188>)
 80006d2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80006d6:	4a57      	ldr	r2, [pc, #348]	; (8000834 <HAL_ETH_MspInit+0x188>)
 80006d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80006dc:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80006e0:	4b54      	ldr	r3, [pc, #336]	; (8000834 <HAL_ETH_MspInit+0x188>)
 80006e2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80006e6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80006ea:	623b      	str	r3, [r7, #32]
 80006ec:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 80006ee:	4b51      	ldr	r3, [pc, #324]	; (8000834 <HAL_ETH_MspInit+0x188>)
 80006f0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80006f4:	4a4f      	ldr	r2, [pc, #316]	; (8000834 <HAL_ETH_MspInit+0x188>)
 80006f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80006fa:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80006fe:	4b4d      	ldr	r3, [pc, #308]	; (8000834 <HAL_ETH_MspInit+0x188>)
 8000700:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000704:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000708:	61fb      	str	r3, [r7, #28]
 800070a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 800070c:	4b49      	ldr	r3, [pc, #292]	; (8000834 <HAL_ETH_MspInit+0x188>)
 800070e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000712:	4a48      	ldr	r2, [pc, #288]	; (8000834 <HAL_ETH_MspInit+0x188>)
 8000714:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000718:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800071c:	4b45      	ldr	r3, [pc, #276]	; (8000834 <HAL_ETH_MspInit+0x188>)
 800071e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000722:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000726:	61bb      	str	r3, [r7, #24]
 8000728:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800072a:	4b42      	ldr	r3, [pc, #264]	; (8000834 <HAL_ETH_MspInit+0x188>)
 800072c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000730:	4a40      	ldr	r2, [pc, #256]	; (8000834 <HAL_ETH_MspInit+0x188>)
 8000732:	f043 0304 	orr.w	r3, r3, #4
 8000736:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800073a:	4b3e      	ldr	r3, [pc, #248]	; (8000834 <HAL_ETH_MspInit+0x188>)
 800073c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000740:	f003 0304 	and.w	r3, r3, #4
 8000744:	617b      	str	r3, [r7, #20]
 8000746:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000748:	4b3a      	ldr	r3, [pc, #232]	; (8000834 <HAL_ETH_MspInit+0x188>)
 800074a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800074e:	4a39      	ldr	r2, [pc, #228]	; (8000834 <HAL_ETH_MspInit+0x188>)
 8000750:	f043 0301 	orr.w	r3, r3, #1
 8000754:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000758:	4b36      	ldr	r3, [pc, #216]	; (8000834 <HAL_ETH_MspInit+0x188>)
 800075a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800075e:	f003 0301 	and.w	r3, r3, #1
 8000762:	613b      	str	r3, [r7, #16]
 8000764:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000766:	4b33      	ldr	r3, [pc, #204]	; (8000834 <HAL_ETH_MspInit+0x188>)
 8000768:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800076c:	4a31      	ldr	r2, [pc, #196]	; (8000834 <HAL_ETH_MspInit+0x188>)
 800076e:	f043 0302 	orr.w	r3, r3, #2
 8000772:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000776:	4b2f      	ldr	r3, [pc, #188]	; (8000834 <HAL_ETH_MspInit+0x188>)
 8000778:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800077c:	f003 0302 	and.w	r3, r3, #2
 8000780:	60fb      	str	r3, [r7, #12]
 8000782:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000784:	4b2b      	ldr	r3, [pc, #172]	; (8000834 <HAL_ETH_MspInit+0x188>)
 8000786:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800078a:	4a2a      	ldr	r2, [pc, #168]	; (8000834 <HAL_ETH_MspInit+0x188>)
 800078c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000790:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000794:	4b27      	ldr	r3, [pc, #156]	; (8000834 <HAL_ETH_MspInit+0x188>)
 8000796:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800079a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800079e:	60bb      	str	r3, [r7, #8]
 80007a0:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80007a2:	2332      	movs	r3, #50	; 0x32
 80007a4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007a6:	2302      	movs	r3, #2
 80007a8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007aa:	2300      	movs	r3, #0
 80007ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ae:	2300      	movs	r3, #0
 80007b0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80007b2:	230b      	movs	r3, #11
 80007b4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007ba:	4619      	mov	r1, r3
 80007bc:	481e      	ldr	r0, [pc, #120]	; (8000838 <HAL_ETH_MspInit+0x18c>)
 80007be:	f001 f96d 	bl	8001a9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80007c2:	2386      	movs	r3, #134	; 0x86
 80007c4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007c6:	2302      	movs	r3, #2
 80007c8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ca:	2300      	movs	r3, #0
 80007cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ce:	2300      	movs	r3, #0
 80007d0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80007d2:	230b      	movs	r3, #11
 80007d4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007da:	4619      	mov	r1, r3
 80007dc:	4817      	ldr	r0, [pc, #92]	; (800083c <HAL_ETH_MspInit+0x190>)
 80007de:	f001 f95d 	bl	8001a9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80007e2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007e6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007e8:	2302      	movs	r3, #2
 80007ea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ec:	2300      	movs	r3, #0
 80007ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007f0:	2300      	movs	r3, #0
 80007f2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80007f4:	230b      	movs	r3, #11
 80007f6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80007f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007fc:	4619      	mov	r1, r3
 80007fe:	4810      	ldr	r0, [pc, #64]	; (8000840 <HAL_ETH_MspInit+0x194>)
 8000800:	f001 f94c 	bl	8001a9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000804:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000808:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800080a:	2302      	movs	r3, #2
 800080c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080e:	2300      	movs	r3, #0
 8000810:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000812:	2300      	movs	r3, #0
 8000814:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000816:	230b      	movs	r3, #11
 8000818:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800081a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800081e:	4619      	mov	r1, r3
 8000820:	4808      	ldr	r0, [pc, #32]	; (8000844 <HAL_ETH_MspInit+0x198>)
 8000822:	f001 f93b 	bl	8001a9c <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8000826:	bf00      	nop
 8000828:	3738      	adds	r7, #56	; 0x38
 800082a:	46bd      	mov	sp, r7
 800082c:	bd80      	pop	{r7, pc}
 800082e:	bf00      	nop
 8000830:	40028000 	.word	0x40028000
 8000834:	58024400 	.word	0x58024400
 8000838:	58020800 	.word	0x58020800
 800083c:	58020000 	.word	0x58020000
 8000840:	58020400 	.word	0x58020400
 8000844:	58021800 	.word	0x58021800

08000848 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000848:	b580      	push	{r7, lr}
 800084a:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800084c:	4a04      	ldr	r2, [pc, #16]	; (8000860 <MX_FREERTOS_Init+0x18>)
 800084e:	2100      	movs	r1, #0
 8000850:	4804      	ldr	r0, [pc, #16]	; (8000864 <MX_FREERTOS_Init+0x1c>)
 8000852:	f005 fac7 	bl	8005de4 <osThreadNew>
 8000856:	4603      	mov	r3, r0
 8000858:	4a03      	ldr	r2, [pc, #12]	; (8000868 <MX_FREERTOS_Init+0x20>)
 800085a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 800085c:	bf00      	nop
 800085e:	bd80      	pop	{r7, pc}
 8000860:	08008a84 	.word	0x08008a84
 8000864:	0800086d 	.word	0x0800086d
 8000868:	24000244 	.word	0x24000244

0800086c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b082      	sub	sp, #8
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
	   HAL_GPIO_TogglePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin);
 8000874:	2102      	movs	r1, #2
 8000876:	4803      	ldr	r0, [pc, #12]	; (8000884 <StartDefaultTask+0x18>)
 8000878:	f001 fad1 	bl	8001e1e <HAL_GPIO_TogglePin>
       osDelay(100);
 800087c:	2064      	movs	r0, #100	; 0x64
 800087e:	f005 fb43 	bl	8005f08 <osDelay>
	   HAL_GPIO_TogglePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin);
 8000882:	e7f7      	b.n	8000874 <StartDefaultTask+0x8>
 8000884:	58021000 	.word	0x58021000

08000888 <MX_GPIO_Init>:
        * EXTI
     PA9   ------> USB_OTG_HS_VBUS
     PA10   ------> USB_OTG_HS_ID
*/
void MX_GPIO_Init(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b08c      	sub	sp, #48	; 0x30
 800088c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800088e:	f107 031c 	add.w	r3, r7, #28
 8000892:	2200      	movs	r2, #0
 8000894:	601a      	str	r2, [r3, #0]
 8000896:	605a      	str	r2, [r3, #4]
 8000898:	609a      	str	r2, [r3, #8]
 800089a:	60da      	str	r2, [r3, #12]
 800089c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800089e:	4b71      	ldr	r3, [pc, #452]	; (8000a64 <MX_GPIO_Init+0x1dc>)
 80008a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008a4:	4a6f      	ldr	r2, [pc, #444]	; (8000a64 <MX_GPIO_Init+0x1dc>)
 80008a6:	f043 0304 	orr.w	r3, r3, #4
 80008aa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008ae:	4b6d      	ldr	r3, [pc, #436]	; (8000a64 <MX_GPIO_Init+0x1dc>)
 80008b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008b4:	f003 0304 	and.w	r3, r3, #4
 80008b8:	61bb      	str	r3, [r7, #24]
 80008ba:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008bc:	4b69      	ldr	r3, [pc, #420]	; (8000a64 <MX_GPIO_Init+0x1dc>)
 80008be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008c2:	4a68      	ldr	r2, [pc, #416]	; (8000a64 <MX_GPIO_Init+0x1dc>)
 80008c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008c8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008cc:	4b65      	ldr	r3, [pc, #404]	; (8000a64 <MX_GPIO_Init+0x1dc>)
 80008ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008d6:	617b      	str	r3, [r7, #20]
 80008d8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008da:	4b62      	ldr	r3, [pc, #392]	; (8000a64 <MX_GPIO_Init+0x1dc>)
 80008dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008e0:	4a60      	ldr	r2, [pc, #384]	; (8000a64 <MX_GPIO_Init+0x1dc>)
 80008e2:	f043 0301 	orr.w	r3, r3, #1
 80008e6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008ea:	4b5e      	ldr	r3, [pc, #376]	; (8000a64 <MX_GPIO_Init+0x1dc>)
 80008ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008f0:	f003 0301 	and.w	r3, r3, #1
 80008f4:	613b      	str	r3, [r7, #16]
 80008f6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008f8:	4b5a      	ldr	r3, [pc, #360]	; (8000a64 <MX_GPIO_Init+0x1dc>)
 80008fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008fe:	4a59      	ldr	r2, [pc, #356]	; (8000a64 <MX_GPIO_Init+0x1dc>)
 8000900:	f043 0302 	orr.w	r3, r3, #2
 8000904:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000908:	4b56      	ldr	r3, [pc, #344]	; (8000a64 <MX_GPIO_Init+0x1dc>)
 800090a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800090e:	f003 0302 	and.w	r3, r3, #2
 8000912:	60fb      	str	r3, [r7, #12]
 8000914:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000916:	4b53      	ldr	r3, [pc, #332]	; (8000a64 <MX_GPIO_Init+0x1dc>)
 8000918:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800091c:	4a51      	ldr	r2, [pc, #324]	; (8000a64 <MX_GPIO_Init+0x1dc>)
 800091e:	f043 0308 	orr.w	r3, r3, #8
 8000922:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000926:	4b4f      	ldr	r3, [pc, #316]	; (8000a64 <MX_GPIO_Init+0x1dc>)
 8000928:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800092c:	f003 0308 	and.w	r3, r3, #8
 8000930:	60bb      	str	r3, [r7, #8]
 8000932:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000934:	4b4b      	ldr	r3, [pc, #300]	; (8000a64 <MX_GPIO_Init+0x1dc>)
 8000936:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800093a:	4a4a      	ldr	r2, [pc, #296]	; (8000a64 <MX_GPIO_Init+0x1dc>)
 800093c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000940:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000944:	4b47      	ldr	r3, [pc, #284]	; (8000a64 <MX_GPIO_Init+0x1dc>)
 8000946:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800094a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800094e:	607b      	str	r3, [r7, #4]
 8000950:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000952:	4b44      	ldr	r3, [pc, #272]	; (8000a64 <MX_GPIO_Init+0x1dc>)
 8000954:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000958:	4a42      	ldr	r2, [pc, #264]	; (8000a64 <MX_GPIO_Init+0x1dc>)
 800095a:	f043 0310 	orr.w	r3, r3, #16
 800095e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000962:	4b40      	ldr	r3, [pc, #256]	; (8000a64 <MX_GPIO_Init+0x1dc>)
 8000964:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000968:	f003 0310 	and.w	r3, r3, #16
 800096c:	603b      	str	r3, [r7, #0]
 800096e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 8000970:	2200      	movs	r2, #0
 8000972:	f244 0101 	movw	r1, #16385	; 0x4001
 8000976:	483c      	ldr	r0, [pc, #240]	; (8000a68 <MX_GPIO_Init+0x1e0>)
 8000978:	f001 fa38 	bl	8001dec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 800097c:	2200      	movs	r2, #0
 800097e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000982:	483a      	ldr	r0, [pc, #232]	; (8000a6c <MX_GPIO_Init+0x1e4>)
 8000984:	f001 fa32 	bl	8001dec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 8000988:	2200      	movs	r2, #0
 800098a:	2102      	movs	r1, #2
 800098c:	4838      	ldr	r0, [pc, #224]	; (8000a70 <MX_GPIO_Init+0x1e8>)
 800098e:	f001 fa2d 	bl	8001dec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000992:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000996:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000998:	2300      	movs	r3, #0
 800099a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099c:	2300      	movs	r3, #0
 800099e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80009a0:	f107 031c 	add.w	r3, r7, #28
 80009a4:	4619      	mov	r1, r3
 80009a6:	4833      	ldr	r0, [pc, #204]	; (8000a74 <MX_GPIO_Init+0x1ec>)
 80009a8:	f001 f878 	bl	8001a9c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin;
 80009ac:	f244 0301 	movw	r3, #16385	; 0x4001
 80009b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009b2:	2301      	movs	r3, #1
 80009b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b6:	2300      	movs	r3, #0
 80009b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ba:	2300      	movs	r3, #0
 80009bc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009be:	f107 031c 	add.w	r3, r7, #28
 80009c2:	4619      	mov	r1, r3
 80009c4:	4828      	ldr	r0, [pc, #160]	; (8000a68 <MX_GPIO_Init+0x1e0>)
 80009c6:	f001 f869 	bl	8001a9c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 80009ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009d0:	2301      	movs	r3, #1
 80009d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d4:	2300      	movs	r3, #0
 80009d6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d8:	2300      	movs	r3, #0
 80009da:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 80009dc:	f107 031c 	add.w	r3, r7, #28
 80009e0:	4619      	mov	r1, r3
 80009e2:	4822      	ldr	r0, [pc, #136]	; (8000a6c <MX_GPIO_Init+0x1e4>)
 80009e4:	f001 f85a 	bl	8001a9c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 80009e8:	2380      	movs	r3, #128	; 0x80
 80009ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009ec:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80009f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f2:	2300      	movs	r3, #0
 80009f4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 80009f6:	f107 031c 	add.w	r3, r7, #28
 80009fa:	4619      	mov	r1, r3
 80009fc:	481e      	ldr	r0, [pc, #120]	; (8000a78 <MX_GPIO_Init+0x1f0>)
 80009fe:	f001 f84d 	bl	8001a9c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 8000a02:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a06:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000a10:	f107 031c 	add.w	r3, r7, #28
 8000a14:	4619      	mov	r1, r3
 8000a16:	4819      	ldr	r0, [pc, #100]	; (8000a7c <MX_GPIO_Init+0x1f4>)
 8000a18:	f001 f840 	bl	8001a9c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8000a1c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a22:	2302      	movs	r3, #2
 8000a24:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a26:	2300      	movs	r3, #0
 8000a28:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8000a2e:	230a      	movs	r3, #10
 8000a30:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8000a32:	f107 031c 	add.w	r3, r7, #28
 8000a36:	4619      	mov	r1, r3
 8000a38:	4810      	ldr	r0, [pc, #64]	; (8000a7c <MX_GPIO_Init+0x1f4>)
 8000a3a:	f001 f82f 	bl	8001a9c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_YELLOW_Pin;
 8000a3e:	2302      	movs	r3, #2
 8000a40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a42:	2301      	movs	r3, #1
 8000a44:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a46:	2300      	movs	r3, #0
 8000a48:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_YELLOW_GPIO_Port, &GPIO_InitStruct);
 8000a4e:	f107 031c 	add.w	r3, r7, #28
 8000a52:	4619      	mov	r1, r3
 8000a54:	4806      	ldr	r0, [pc, #24]	; (8000a70 <MX_GPIO_Init+0x1e8>)
 8000a56:	f001 f821 	bl	8001a9c <HAL_GPIO_Init>

}
 8000a5a:	bf00      	nop
 8000a5c:	3730      	adds	r7, #48	; 0x30
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	58024400 	.word	0x58024400
 8000a68:	58020400 	.word	0x58020400
 8000a6c:	58020c00 	.word	0x58020c00
 8000a70:	58021000 	.word	0x58021000
 8000a74:	58020800 	.word	0x58020800
 8000a78:	58021800 	.word	0x58021800
 8000a7c:	58020000 	.word	0x58020000

08000a80 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a84:	f000 fa96 	bl	8000fb4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a88:	f000 f810 	bl	8000aac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a8c:	f7ff fefc 	bl	8000888 <MX_GPIO_Init>
  MX_ETH_Init();
 8000a90:	f7ff fdc0 	bl	8000614 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000a94:	f000 f9aa 	bl	8000dec <MX_USART3_UART_Init>
  MX_USB_OTG_HS_USB_Init();
 8000a98:	f000 fa5a 	bl	8000f50 <MX_USB_OTG_HS_USB_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8000a9c:	f005 f958 	bl	8005d50 <osKernelInitialize>
  MX_FREERTOS_Init();
 8000aa0:	f7ff fed2 	bl	8000848 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000aa4:	f005 f978 	bl	8005d98 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000aa8:	e7fe      	b.n	8000aa8 <main+0x28>
	...

08000aac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b09c      	sub	sp, #112	; 0x70
 8000ab0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ab2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ab6:	224c      	movs	r2, #76	; 0x4c
 8000ab8:	2100      	movs	r1, #0
 8000aba:	4618      	mov	r0, r3
 8000abc:	f007 fefa 	bl	80088b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ac0:	1d3b      	adds	r3, r7, #4
 8000ac2:	2220      	movs	r2, #32
 8000ac4:	2100      	movs	r1, #0
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	f007 fef4 	bl	80088b4 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000acc:	2002      	movs	r0, #2
 8000ace:	f001 f9c1 	bl	8001e54 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	603b      	str	r3, [r7, #0]
 8000ad6:	4b2c      	ldr	r3, [pc, #176]	; (8000b88 <SystemClock_Config+0xdc>)
 8000ad8:	699b      	ldr	r3, [r3, #24]
 8000ada:	4a2b      	ldr	r2, [pc, #172]	; (8000b88 <SystemClock_Config+0xdc>)
 8000adc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000ae0:	6193      	str	r3, [r2, #24]
 8000ae2:	4b29      	ldr	r3, [pc, #164]	; (8000b88 <SystemClock_Config+0xdc>)
 8000ae4:	699b      	ldr	r3, [r3, #24]
 8000ae6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000aea:	603b      	str	r3, [r7, #0]
 8000aec:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000aee:	bf00      	nop
 8000af0:	4b25      	ldr	r3, [pc, #148]	; (8000b88 <SystemClock_Config+0xdc>)
 8000af2:	699b      	ldr	r3, [r3, #24]
 8000af4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000af8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000afc:	d1f8      	bne.n	8000af0 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000afe:	2321      	movs	r3, #33	; 0x21
 8000b00:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000b02:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000b06:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000b08:	2301      	movs	r3, #1
 8000b0a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b0c:	2302      	movs	r3, #2
 8000b0e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b10:	2302      	movs	r3, #2
 8000b12:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000b14:	2304      	movs	r3, #4
 8000b16:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 275;
 8000b18:	f240 1313 	movw	r3, #275	; 0x113
 8000b1c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000b1e:	2301      	movs	r3, #1
 8000b20:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000b22:	2304      	movs	r3, #4
 8000b24:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000b26:	2302      	movs	r3, #2
 8000b28:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 8000b2a:	2304      	movs	r3, #4
 8000b2c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000b32:	2300      	movs	r3, #0
 8000b34:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	f001 f9c4 	bl	8001ec8 <HAL_RCC_OscConfig>
 8000b40:	4603      	mov	r3, r0
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d001      	beq.n	8000b4a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000b46:	f000 f833 	bl	8000bb0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b4a:	233f      	movs	r3, #63	; 0x3f
 8000b4c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b4e:	2303      	movs	r3, #3
 8000b50:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000b52:	2300      	movs	r3, #0
 8000b54:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000b56:	2308      	movs	r3, #8
 8000b58:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000b5a:	2340      	movs	r3, #64	; 0x40
 8000b5c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000b5e:	2340      	movs	r3, #64	; 0x40
 8000b60:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000b62:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b66:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000b68:	2340      	movs	r3, #64	; 0x40
 8000b6a:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000b6c:	1d3b      	adds	r3, r7, #4
 8000b6e:	2103      	movs	r1, #3
 8000b70:	4618      	mov	r0, r3
 8000b72:	f001 fd57 	bl	8002624 <HAL_RCC_ClockConfig>
 8000b76:	4603      	mov	r3, r0
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d001      	beq.n	8000b80 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000b7c:	f000 f818 	bl	8000bb0 <Error_Handler>
  }
}
 8000b80:	bf00      	nop
 8000b82:	3770      	adds	r7, #112	; 0x70
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bd80      	pop	{r7, pc}
 8000b88:	58024800 	.word	0x58024800

08000b8c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b082      	sub	sp, #8
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	4a04      	ldr	r2, [pc, #16]	; (8000bac <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b9a:	4293      	cmp	r3, r2
 8000b9c:	d101      	bne.n	8000ba2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000b9e:	f000 fa45 	bl	800102c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000ba2:	bf00      	nop
 8000ba4:	3708      	adds	r7, #8
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	40010000 	.word	0x40010000

08000bb0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bb4:	b672      	cpsid	i
}
 8000bb6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bb8:	e7fe      	b.n	8000bb8 <Error_Handler+0x8>
	...

08000bbc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b082      	sub	sp, #8
 8000bc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bc2:	4b0c      	ldr	r3, [pc, #48]	; (8000bf4 <HAL_MspInit+0x38>)
 8000bc4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000bc8:	4a0a      	ldr	r2, [pc, #40]	; (8000bf4 <HAL_MspInit+0x38>)
 8000bca:	f043 0302 	orr.w	r3, r3, #2
 8000bce:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000bd2:	4b08      	ldr	r3, [pc, #32]	; (8000bf4 <HAL_MspInit+0x38>)
 8000bd4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000bd8:	f003 0302 	and.w	r3, r3, #2
 8000bdc:	607b      	str	r3, [r7, #4]
 8000bde:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000be0:	2200      	movs	r2, #0
 8000be2:	210f      	movs	r1, #15
 8000be4:	f06f 0001 	mvn.w	r0, #1
 8000be8:	f000 fb0c 	bl	8001204 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bec:	bf00      	nop
 8000bee:	3708      	adds	r7, #8
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bd80      	pop	{r7, pc}
 8000bf4:	58024400 	.word	0x58024400

08000bf8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b08e      	sub	sp, #56	; 0x38
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM1 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	2b0f      	cmp	r3, #15
 8000c04:	d844      	bhi.n	8000c90 <HAL_InitTick+0x98>
  {
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0U);
 8000c06:	2200      	movs	r2, #0
 8000c08:	6879      	ldr	r1, [r7, #4]
 8000c0a:	2019      	movs	r0, #25
 8000c0c:	f000 fafa 	bl	8001204 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000c10:	2019      	movs	r0, #25
 8000c12:	f000 fb11 	bl	8001238 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8000c16:	4a24      	ldr	r2, [pc, #144]	; (8000ca8 <HAL_InitTick+0xb0>)
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000c1c:	4b23      	ldr	r3, [pc, #140]	; (8000cac <HAL_InitTick+0xb4>)
 8000c1e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000c22:	4a22      	ldr	r2, [pc, #136]	; (8000cac <HAL_InitTick+0xb4>)
 8000c24:	f043 0301 	orr.w	r3, r3, #1
 8000c28:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000c2c:	4b1f      	ldr	r3, [pc, #124]	; (8000cac <HAL_InitTick+0xb4>)
 8000c2e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000c32:	f003 0301 	and.w	r3, r3, #1
 8000c36:	60bb      	str	r3, [r7, #8]
 8000c38:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000c3a:	f107 020c 	add.w	r2, r7, #12
 8000c3e:	f107 0310 	add.w	r3, r7, #16
 8000c42:	4611      	mov	r1, r2
 8000c44:	4618      	mov	r0, r3
 8000c46:	f002 f879 	bl	8002d3c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000c4a:	f002 f861 	bl	8002d10 <HAL_RCC_GetPCLK2Freq>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	005b      	lsls	r3, r3, #1
 8000c52:	637b      	str	r3, [r7, #52]	; 0x34

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000c54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c56:	4a16      	ldr	r2, [pc, #88]	; (8000cb0 <HAL_InitTick+0xb8>)
 8000c58:	fba2 2303 	umull	r2, r3, r2, r3
 8000c5c:	0c9b      	lsrs	r3, r3, #18
 8000c5e:	3b01      	subs	r3, #1
 8000c60:	633b      	str	r3, [r7, #48]	; 0x30

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000c62:	4b14      	ldr	r3, [pc, #80]	; (8000cb4 <HAL_InitTick+0xbc>)
 8000c64:	4a14      	ldr	r2, [pc, #80]	; (8000cb8 <HAL_InitTick+0xc0>)
 8000c66:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000c68:	4b12      	ldr	r3, [pc, #72]	; (8000cb4 <HAL_InitTick+0xbc>)
 8000c6a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000c6e:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000c70:	4a10      	ldr	r2, [pc, #64]	; (8000cb4 <HAL_InitTick+0xbc>)
 8000c72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c74:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000c76:	4b0f      	ldr	r3, [pc, #60]	; (8000cb4 <HAL_InitTick+0xbc>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c7c:	4b0d      	ldr	r3, [pc, #52]	; (8000cb4 <HAL_InitTick+0xbc>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000c82:	480c      	ldr	r0, [pc, #48]	; (8000cb4 <HAL_InitTick+0xbc>)
 8000c84:	f003 fbb8 	bl	80043f8 <HAL_TIM_Base_Init>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d107      	bne.n	8000c9e <HAL_InitTick+0xa6>
 8000c8e:	e001      	b.n	8000c94 <HAL_InitTick+0x9c>
    return HAL_ERROR;
 8000c90:	2301      	movs	r3, #1
 8000c92:	e005      	b.n	8000ca0 <HAL_InitTick+0xa8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000c94:	4807      	ldr	r0, [pc, #28]	; (8000cb4 <HAL_InitTick+0xbc>)
 8000c96:	f003 fc11 	bl	80044bc <HAL_TIM_Base_Start_IT>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	e000      	b.n	8000ca0 <HAL_InitTick+0xa8>
  }

  /* Return function status */
  return HAL_ERROR;
 8000c9e:	2301      	movs	r3, #1
}
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	3738      	adds	r7, #56	; 0x38
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}
 8000ca8:	24000008 	.word	0x24000008
 8000cac:	58024400 	.word	0x58024400
 8000cb0:	431bde83 	.word	0x431bde83
 8000cb4:	24000248 	.word	0x24000248
 8000cb8:	40010000 	.word	0x40010000

08000cbc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cc0:	e7fe      	b.n	8000cc0 <NMI_Handler+0x4>

08000cc2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cc2:	b480      	push	{r7}
 8000cc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cc6:	e7fe      	b.n	8000cc6 <HardFault_Handler+0x4>

08000cc8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ccc:	e7fe      	b.n	8000ccc <MemManage_Handler+0x4>

08000cce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cce:	b480      	push	{r7}
 8000cd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cd2:	e7fe      	b.n	8000cd2 <BusFault_Handler+0x4>

08000cd4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cd8:	e7fe      	b.n	8000cd8 <UsageFault_Handler+0x4>

08000cda <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cda:	b480      	push	{r7}
 8000cdc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cde:	bf00      	nop
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce6:	4770      	bx	lr

08000ce8 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000cec:	4802      	ldr	r0, [pc, #8]	; (8000cf8 <TIM1_UP_IRQHandler+0x10>)
 8000cee:	f003 fc6b 	bl	80045c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000cf2:	bf00      	nop
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	24000248 	.word	0x24000248

08000cfc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000d00:	4b32      	ldr	r3, [pc, #200]	; (8000dcc <SystemInit+0xd0>)
 8000d02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d06:	4a31      	ldr	r2, [pc, #196]	; (8000dcc <SystemInit+0xd0>)
 8000d08:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d0c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000d10:	4b2f      	ldr	r3, [pc, #188]	; (8000dd0 <SystemInit+0xd4>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	f003 030f 	and.w	r3, r3, #15
 8000d18:	2b06      	cmp	r3, #6
 8000d1a:	d807      	bhi.n	8000d2c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000d1c:	4b2c      	ldr	r3, [pc, #176]	; (8000dd0 <SystemInit+0xd4>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	f023 030f 	bic.w	r3, r3, #15
 8000d24:	4a2a      	ldr	r2, [pc, #168]	; (8000dd0 <SystemInit+0xd4>)
 8000d26:	f043 0307 	orr.w	r3, r3, #7
 8000d2a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000d2c:	4b29      	ldr	r3, [pc, #164]	; (8000dd4 <SystemInit+0xd8>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	4a28      	ldr	r2, [pc, #160]	; (8000dd4 <SystemInit+0xd8>)
 8000d32:	f043 0301 	orr.w	r3, r3, #1
 8000d36:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000d38:	4b26      	ldr	r3, [pc, #152]	; (8000dd4 <SystemInit+0xd8>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000d3e:	4b25      	ldr	r3, [pc, #148]	; (8000dd4 <SystemInit+0xd8>)
 8000d40:	681a      	ldr	r2, [r3, #0]
 8000d42:	4924      	ldr	r1, [pc, #144]	; (8000dd4 <SystemInit+0xd8>)
 8000d44:	4b24      	ldr	r3, [pc, #144]	; (8000dd8 <SystemInit+0xdc>)
 8000d46:	4013      	ands	r3, r2
 8000d48:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000d4a:	4b21      	ldr	r3, [pc, #132]	; (8000dd0 <SystemInit+0xd4>)
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	f003 0308 	and.w	r3, r3, #8
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d007      	beq.n	8000d66 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000d56:	4b1e      	ldr	r3, [pc, #120]	; (8000dd0 <SystemInit+0xd4>)
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	f023 030f 	bic.w	r3, r3, #15
 8000d5e:	4a1c      	ldr	r2, [pc, #112]	; (8000dd0 <SystemInit+0xd4>)
 8000d60:	f043 0307 	orr.w	r3, r3, #7
 8000d64:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000d66:	4b1b      	ldr	r3, [pc, #108]	; (8000dd4 <SystemInit+0xd8>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000d6c:	4b19      	ldr	r3, [pc, #100]	; (8000dd4 <SystemInit+0xd8>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000d72:	4b18      	ldr	r3, [pc, #96]	; (8000dd4 <SystemInit+0xd8>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000d78:	4b16      	ldr	r3, [pc, #88]	; (8000dd4 <SystemInit+0xd8>)
 8000d7a:	4a18      	ldr	r2, [pc, #96]	; (8000ddc <SystemInit+0xe0>)
 8000d7c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000d7e:	4b15      	ldr	r3, [pc, #84]	; (8000dd4 <SystemInit+0xd8>)
 8000d80:	4a17      	ldr	r2, [pc, #92]	; (8000de0 <SystemInit+0xe4>)
 8000d82:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000d84:	4b13      	ldr	r3, [pc, #76]	; (8000dd4 <SystemInit+0xd8>)
 8000d86:	4a17      	ldr	r2, [pc, #92]	; (8000de4 <SystemInit+0xe8>)
 8000d88:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000d8a:	4b12      	ldr	r3, [pc, #72]	; (8000dd4 <SystemInit+0xd8>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000d90:	4b10      	ldr	r3, [pc, #64]	; (8000dd4 <SystemInit+0xd8>)
 8000d92:	4a14      	ldr	r2, [pc, #80]	; (8000de4 <SystemInit+0xe8>)
 8000d94:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000d96:	4b0f      	ldr	r3, [pc, #60]	; (8000dd4 <SystemInit+0xd8>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000d9c:	4b0d      	ldr	r3, [pc, #52]	; (8000dd4 <SystemInit+0xd8>)
 8000d9e:	4a11      	ldr	r2, [pc, #68]	; (8000de4 <SystemInit+0xe8>)
 8000da0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000da2:	4b0c      	ldr	r3, [pc, #48]	; (8000dd4 <SystemInit+0xd8>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000da8:	4b0a      	ldr	r3, [pc, #40]	; (8000dd4 <SystemInit+0xd8>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	4a09      	ldr	r2, [pc, #36]	; (8000dd4 <SystemInit+0xd8>)
 8000dae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000db2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000db4:	4b07      	ldr	r3, [pc, #28]	; (8000dd4 <SystemInit+0xd8>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000dba:	4b0b      	ldr	r3, [pc, #44]	; (8000de8 <SystemInit+0xec>)
 8000dbc:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000dc0:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000dc2:	bf00      	nop
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dca:	4770      	bx	lr
 8000dcc:	e000ed00 	.word	0xe000ed00
 8000dd0:	52002000 	.word	0x52002000
 8000dd4:	58024400 	.word	0x58024400
 8000dd8:	eaf6ed7f 	.word	0xeaf6ed7f
 8000ddc:	02020200 	.word	0x02020200
 8000de0:	01ff0000 	.word	0x01ff0000
 8000de4:	01010280 	.word	0x01010280
 8000de8:	52004000 	.word	0x52004000

08000dec <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000df0:	4b22      	ldr	r3, [pc, #136]	; (8000e7c <MX_USART3_UART_Init+0x90>)
 8000df2:	4a23      	ldr	r2, [pc, #140]	; (8000e80 <MX_USART3_UART_Init+0x94>)
 8000df4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000df6:	4b21      	ldr	r3, [pc, #132]	; (8000e7c <MX_USART3_UART_Init+0x90>)
 8000df8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000dfc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000dfe:	4b1f      	ldr	r3, [pc, #124]	; (8000e7c <MX_USART3_UART_Init+0x90>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000e04:	4b1d      	ldr	r3, [pc, #116]	; (8000e7c <MX_USART3_UART_Init+0x90>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000e0a:	4b1c      	ldr	r3, [pc, #112]	; (8000e7c <MX_USART3_UART_Init+0x90>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000e10:	4b1a      	ldr	r3, [pc, #104]	; (8000e7c <MX_USART3_UART_Init+0x90>)
 8000e12:	220c      	movs	r2, #12
 8000e14:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e16:	4b19      	ldr	r3, [pc, #100]	; (8000e7c <MX_USART3_UART_Init+0x90>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e1c:	4b17      	ldr	r3, [pc, #92]	; (8000e7c <MX_USART3_UART_Init+0x90>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e22:	4b16      	ldr	r3, [pc, #88]	; (8000e7c <MX_USART3_UART_Init+0x90>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000e28:	4b14      	ldr	r3, [pc, #80]	; (8000e7c <MX_USART3_UART_Init+0x90>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e2e:	4b13      	ldr	r3, [pc, #76]	; (8000e7c <MX_USART3_UART_Init+0x90>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000e34:	4811      	ldr	r0, [pc, #68]	; (8000e7c <MX_USART3_UART_Init+0x90>)
 8000e36:	f003 fdd3 	bl	80049e0 <HAL_UART_Init>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d001      	beq.n	8000e44 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000e40:	f7ff feb6 	bl	8000bb0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e44:	2100      	movs	r1, #0
 8000e46:	480d      	ldr	r0, [pc, #52]	; (8000e7c <MX_USART3_UART_Init+0x90>)
 8000e48:	f004 fe74 	bl	8005b34 <HAL_UARTEx_SetTxFifoThreshold>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d001      	beq.n	8000e56 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000e52:	f7ff fead 	bl	8000bb0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e56:	2100      	movs	r1, #0
 8000e58:	4808      	ldr	r0, [pc, #32]	; (8000e7c <MX_USART3_UART_Init+0x90>)
 8000e5a:	f004 fea9 	bl	8005bb0 <HAL_UARTEx_SetRxFifoThreshold>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d001      	beq.n	8000e68 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000e64:	f7ff fea4 	bl	8000bb0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000e68:	4804      	ldr	r0, [pc, #16]	; (8000e7c <MX_USART3_UART_Init+0x90>)
 8000e6a:	f004 fe2a 	bl	8005ac2 <HAL_UARTEx_DisableFifoMode>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d001      	beq.n	8000e78 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000e74:	f7ff fe9c 	bl	8000bb0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000e78:	bf00      	nop
 8000e7a:	bd80      	pop	{r7, pc}
 8000e7c:	24000294 	.word	0x24000294
 8000e80:	40004800 	.word	0x40004800

08000e84 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b0b6      	sub	sp, #216	; 0xd8
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e8c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000e90:	2200      	movs	r2, #0
 8000e92:	601a      	str	r2, [r3, #0]
 8000e94:	605a      	str	r2, [r3, #4]
 8000e96:	609a      	str	r2, [r3, #8]
 8000e98:	60da      	str	r2, [r3, #12]
 8000e9a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e9c:	f107 0310 	add.w	r3, r7, #16
 8000ea0:	22b4      	movs	r2, #180	; 0xb4
 8000ea2:	2100      	movs	r1, #0
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f007 fd05 	bl	80088b4 <memset>
  if(uartHandle->Instance==USART3)
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	4a25      	ldr	r2, [pc, #148]	; (8000f44 <HAL_UART_MspInit+0xc0>)
 8000eb0:	4293      	cmp	r3, r2
 8000eb2:	d142      	bne.n	8000f3a <HAL_UART_MspInit+0xb6>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000eb4:	2302      	movs	r3, #2
 8000eb6:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ebe:	f107 0310 	add.w	r3, r7, #16
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	f001 ff7c 	bl	8002dc0 <HAL_RCCEx_PeriphCLKConfig>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d001      	beq.n	8000ed2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000ece:	f7ff fe6f 	bl	8000bb0 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000ed2:	4b1d      	ldr	r3, [pc, #116]	; (8000f48 <HAL_UART_MspInit+0xc4>)
 8000ed4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000ed8:	4a1b      	ldr	r2, [pc, #108]	; (8000f48 <HAL_UART_MspInit+0xc4>)
 8000eda:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ede:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000ee2:	4b19      	ldr	r3, [pc, #100]	; (8000f48 <HAL_UART_MspInit+0xc4>)
 8000ee4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000ee8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000eec:	60fb      	str	r3, [r7, #12]
 8000eee:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ef0:	4b15      	ldr	r3, [pc, #84]	; (8000f48 <HAL_UART_MspInit+0xc4>)
 8000ef2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ef6:	4a14      	ldr	r2, [pc, #80]	; (8000f48 <HAL_UART_MspInit+0xc4>)
 8000ef8:	f043 0308 	orr.w	r3, r3, #8
 8000efc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f00:	4b11      	ldr	r3, [pc, #68]	; (8000f48 <HAL_UART_MspInit+0xc4>)
 8000f02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f06:	f003 0308 	and.w	r3, r3, #8
 8000f0a:	60bb      	str	r3, [r7, #8]
 8000f0c:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_VCP_RX_Pin|STLK_VCP_TX_Pin;
 8000f0e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000f12:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f16:	2302      	movs	r3, #2
 8000f18:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f22:	2300      	movs	r3, #0
 8000f24:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000f28:	2307      	movs	r3, #7
 8000f2a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f2e:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000f32:	4619      	mov	r1, r3
 8000f34:	4805      	ldr	r0, [pc, #20]	; (8000f4c <HAL_UART_MspInit+0xc8>)
 8000f36:	f000 fdb1 	bl	8001a9c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000f3a:	bf00      	nop
 8000f3c:	37d8      	adds	r7, #216	; 0xd8
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	40004800 	.word	0x40004800
 8000f48:	58024400 	.word	0x58024400
 8000f4c:	58020c00 	.word	0x58020c00

08000f50 <MX_USB_OTG_HS_USB_Init>:
/* USER CODE END 0 */

/* USB_OTG_HS init function */

void MX_USB_OTG_HS_USB_Init(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8000f54:	bf00      	nop
 8000f56:	46bd      	mov	sp, r7
 8000f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5c:	4770      	bx	lr
	...

08000f60 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000f60:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f98 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000f64:	f7ff feca 	bl	8000cfc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f68:	480c      	ldr	r0, [pc, #48]	; (8000f9c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000f6a:	490d      	ldr	r1, [pc, #52]	; (8000fa0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000f6c:	4a0d      	ldr	r2, [pc, #52]	; (8000fa4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000f6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f70:	e002      	b.n	8000f78 <LoopCopyDataInit>

08000f72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f76:	3304      	adds	r3, #4

08000f78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f7c:	d3f9      	bcc.n	8000f72 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f7e:	4a0a      	ldr	r2, [pc, #40]	; (8000fa8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000f80:	4c0a      	ldr	r4, [pc, #40]	; (8000fac <LoopFillZerobss+0x22>)
  movs r3, #0
 8000f82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f84:	e001      	b.n	8000f8a <LoopFillZerobss>

08000f86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f88:	3204      	adds	r2, #4

08000f8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f8c:	d3fb      	bcc.n	8000f86 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f8e:	f007 fc5d 	bl	800884c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f92:	f7ff fd75 	bl	8000a80 <main>
  bx  lr
 8000f96:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000f98:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8000f9c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000fa0:	24000078 	.word	0x24000078
  ldr r2, =_sidata
 8000fa4:	08008b50 	.word	0x08008b50
  ldr r2, =_sbss
 8000fa8:	24000138 	.word	0x24000138
  ldr r4, =_ebss
 8000fac:	24004d40 	.word	0x24004d40

08000fb0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000fb0:	e7fe      	b.n	8000fb0 <ADC3_IRQHandler>
	...

08000fb4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b082      	sub	sp, #8
 8000fb8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fba:	2003      	movs	r0, #3
 8000fbc:	f000 f917 	bl	80011ee <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000fc0:	f001 fce6 	bl	8002990 <HAL_RCC_GetSysClockFreq>
 8000fc4:	4602      	mov	r2, r0
 8000fc6:	4b15      	ldr	r3, [pc, #84]	; (800101c <HAL_Init+0x68>)
 8000fc8:	699b      	ldr	r3, [r3, #24]
 8000fca:	0a1b      	lsrs	r3, r3, #8
 8000fcc:	f003 030f 	and.w	r3, r3, #15
 8000fd0:	4913      	ldr	r1, [pc, #76]	; (8001020 <HAL_Init+0x6c>)
 8000fd2:	5ccb      	ldrb	r3, [r1, r3]
 8000fd4:	f003 031f 	and.w	r3, r3, #31
 8000fd8:	fa22 f303 	lsr.w	r3, r2, r3
 8000fdc:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000fde:	4b0f      	ldr	r3, [pc, #60]	; (800101c <HAL_Init+0x68>)
 8000fe0:	699b      	ldr	r3, [r3, #24]
 8000fe2:	f003 030f 	and.w	r3, r3, #15
 8000fe6:	4a0e      	ldr	r2, [pc, #56]	; (8001020 <HAL_Init+0x6c>)
 8000fe8:	5cd3      	ldrb	r3, [r2, r3]
 8000fea:	f003 031f 	and.w	r3, r3, #31
 8000fee:	687a      	ldr	r2, [r7, #4]
 8000ff0:	fa22 f303 	lsr.w	r3, r2, r3
 8000ff4:	4a0b      	ldr	r2, [pc, #44]	; (8001024 <HAL_Init+0x70>)
 8000ff6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000ff8:	4a0b      	ldr	r2, [pc, #44]	; (8001028 <HAL_Init+0x74>)
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ffe:	200f      	movs	r0, #15
 8001000:	f7ff fdfa 	bl	8000bf8 <HAL_InitTick>
 8001004:	4603      	mov	r3, r0
 8001006:	2b00      	cmp	r3, #0
 8001008:	d001      	beq.n	800100e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800100a:	2301      	movs	r3, #1
 800100c:	e002      	b.n	8001014 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800100e:	f7ff fdd5 	bl	8000bbc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001012:	2300      	movs	r3, #0
}
 8001014:	4618      	mov	r0, r3
 8001016:	3708      	adds	r7, #8
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}
 800101c:	58024400 	.word	0x58024400
 8001020:	08008aa8 	.word	0x08008aa8
 8001024:	24000004 	.word	0x24000004
 8001028:	24000000 	.word	0x24000000

0800102c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800102c:	b480      	push	{r7}
 800102e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001030:	4b06      	ldr	r3, [pc, #24]	; (800104c <HAL_IncTick+0x20>)
 8001032:	781b      	ldrb	r3, [r3, #0]
 8001034:	461a      	mov	r2, r3
 8001036:	4b06      	ldr	r3, [pc, #24]	; (8001050 <HAL_IncTick+0x24>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	4413      	add	r3, r2
 800103c:	4a04      	ldr	r2, [pc, #16]	; (8001050 <HAL_IncTick+0x24>)
 800103e:	6013      	str	r3, [r2, #0]
}
 8001040:	bf00      	nop
 8001042:	46bd      	mov	sp, r7
 8001044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001048:	4770      	bx	lr
 800104a:	bf00      	nop
 800104c:	2400000c 	.word	0x2400000c
 8001050:	24000324 	.word	0x24000324

08001054 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0
  return uwTick;
 8001058:	4b03      	ldr	r3, [pc, #12]	; (8001068 <HAL_GetTick+0x14>)
 800105a:	681b      	ldr	r3, [r3, #0]
}
 800105c:	4618      	mov	r0, r3
 800105e:	46bd      	mov	sp, r7
 8001060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001064:	4770      	bx	lr
 8001066:	bf00      	nop
 8001068:	24000324 	.word	0x24000324

0800106c <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 800106c:	b480      	push	{r7}
 800106e:	b083      	sub	sp, #12
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001074:	4b06      	ldr	r3, [pc, #24]	; (8001090 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001076:	685b      	ldr	r3, [r3, #4]
 8001078:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800107c:	4904      	ldr	r1, [pc, #16]	; (8001090 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	4313      	orrs	r3, r2
 8001082:	604b      	str	r3, [r1, #4]
}
 8001084:	bf00      	nop
 8001086:	370c      	adds	r7, #12
 8001088:	46bd      	mov	sp, r7
 800108a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108e:	4770      	bx	lr
 8001090:	58000400 	.word	0x58000400

08001094 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001094:	b480      	push	{r7}
 8001096:	b085      	sub	sp, #20
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	f003 0307 	and.w	r3, r3, #7
 80010a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010a4:	4b0b      	ldr	r3, [pc, #44]	; (80010d4 <__NVIC_SetPriorityGrouping+0x40>)
 80010a6:	68db      	ldr	r3, [r3, #12]
 80010a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010aa:	68ba      	ldr	r2, [r7, #8]
 80010ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010b0:	4013      	ands	r3, r2
 80010b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010b8:	68bb      	ldr	r3, [r7, #8]
 80010ba:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80010bc:	4b06      	ldr	r3, [pc, #24]	; (80010d8 <__NVIC_SetPriorityGrouping+0x44>)
 80010be:	4313      	orrs	r3, r2
 80010c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010c2:	4a04      	ldr	r2, [pc, #16]	; (80010d4 <__NVIC_SetPriorityGrouping+0x40>)
 80010c4:	68bb      	ldr	r3, [r7, #8]
 80010c6:	60d3      	str	r3, [r2, #12]
}
 80010c8:	bf00      	nop
 80010ca:	3714      	adds	r7, #20
 80010cc:	46bd      	mov	sp, r7
 80010ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d2:	4770      	bx	lr
 80010d4:	e000ed00 	.word	0xe000ed00
 80010d8:	05fa0000 	.word	0x05fa0000

080010dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010dc:	b480      	push	{r7}
 80010de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010e0:	4b04      	ldr	r3, [pc, #16]	; (80010f4 <__NVIC_GetPriorityGrouping+0x18>)
 80010e2:	68db      	ldr	r3, [r3, #12]
 80010e4:	0a1b      	lsrs	r3, r3, #8
 80010e6:	f003 0307 	and.w	r3, r3, #7
}
 80010ea:	4618      	mov	r0, r3
 80010ec:	46bd      	mov	sp, r7
 80010ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f2:	4770      	bx	lr
 80010f4:	e000ed00 	.word	0xe000ed00

080010f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010f8:	b480      	push	{r7}
 80010fa:	b083      	sub	sp, #12
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	4603      	mov	r3, r0
 8001100:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001102:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001106:	2b00      	cmp	r3, #0
 8001108:	db0b      	blt.n	8001122 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800110a:	88fb      	ldrh	r3, [r7, #6]
 800110c:	f003 021f 	and.w	r2, r3, #31
 8001110:	4907      	ldr	r1, [pc, #28]	; (8001130 <__NVIC_EnableIRQ+0x38>)
 8001112:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001116:	095b      	lsrs	r3, r3, #5
 8001118:	2001      	movs	r0, #1
 800111a:	fa00 f202 	lsl.w	r2, r0, r2
 800111e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001122:	bf00      	nop
 8001124:	370c      	adds	r7, #12
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr
 800112e:	bf00      	nop
 8001130:	e000e100 	.word	0xe000e100

08001134 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001134:	b480      	push	{r7}
 8001136:	b083      	sub	sp, #12
 8001138:	af00      	add	r7, sp, #0
 800113a:	4603      	mov	r3, r0
 800113c:	6039      	str	r1, [r7, #0]
 800113e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001140:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001144:	2b00      	cmp	r3, #0
 8001146:	db0a      	blt.n	800115e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	b2da      	uxtb	r2, r3
 800114c:	490c      	ldr	r1, [pc, #48]	; (8001180 <__NVIC_SetPriority+0x4c>)
 800114e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001152:	0112      	lsls	r2, r2, #4
 8001154:	b2d2      	uxtb	r2, r2
 8001156:	440b      	add	r3, r1
 8001158:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800115c:	e00a      	b.n	8001174 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	b2da      	uxtb	r2, r3
 8001162:	4908      	ldr	r1, [pc, #32]	; (8001184 <__NVIC_SetPriority+0x50>)
 8001164:	88fb      	ldrh	r3, [r7, #6]
 8001166:	f003 030f 	and.w	r3, r3, #15
 800116a:	3b04      	subs	r3, #4
 800116c:	0112      	lsls	r2, r2, #4
 800116e:	b2d2      	uxtb	r2, r2
 8001170:	440b      	add	r3, r1
 8001172:	761a      	strb	r2, [r3, #24]
}
 8001174:	bf00      	nop
 8001176:	370c      	adds	r7, #12
 8001178:	46bd      	mov	sp, r7
 800117a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117e:	4770      	bx	lr
 8001180:	e000e100 	.word	0xe000e100
 8001184:	e000ed00 	.word	0xe000ed00

08001188 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001188:	b480      	push	{r7}
 800118a:	b089      	sub	sp, #36	; 0x24
 800118c:	af00      	add	r7, sp, #0
 800118e:	60f8      	str	r0, [r7, #12]
 8001190:	60b9      	str	r1, [r7, #8]
 8001192:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	f003 0307 	and.w	r3, r3, #7
 800119a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800119c:	69fb      	ldr	r3, [r7, #28]
 800119e:	f1c3 0307 	rsb	r3, r3, #7
 80011a2:	2b04      	cmp	r3, #4
 80011a4:	bf28      	it	cs
 80011a6:	2304      	movcs	r3, #4
 80011a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011aa:	69fb      	ldr	r3, [r7, #28]
 80011ac:	3304      	adds	r3, #4
 80011ae:	2b06      	cmp	r3, #6
 80011b0:	d902      	bls.n	80011b8 <NVIC_EncodePriority+0x30>
 80011b2:	69fb      	ldr	r3, [r7, #28]
 80011b4:	3b03      	subs	r3, #3
 80011b6:	e000      	b.n	80011ba <NVIC_EncodePriority+0x32>
 80011b8:	2300      	movs	r3, #0
 80011ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011bc:	f04f 32ff 	mov.w	r2, #4294967295
 80011c0:	69bb      	ldr	r3, [r7, #24]
 80011c2:	fa02 f303 	lsl.w	r3, r2, r3
 80011c6:	43da      	mvns	r2, r3
 80011c8:	68bb      	ldr	r3, [r7, #8]
 80011ca:	401a      	ands	r2, r3
 80011cc:	697b      	ldr	r3, [r7, #20]
 80011ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011d0:	f04f 31ff 	mov.w	r1, #4294967295
 80011d4:	697b      	ldr	r3, [r7, #20]
 80011d6:	fa01 f303 	lsl.w	r3, r1, r3
 80011da:	43d9      	mvns	r1, r3
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011e0:	4313      	orrs	r3, r2
         );
}
 80011e2:	4618      	mov	r0, r3
 80011e4:	3724      	adds	r7, #36	; 0x24
 80011e6:	46bd      	mov	sp, r7
 80011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ec:	4770      	bx	lr

080011ee <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011ee:	b580      	push	{r7, lr}
 80011f0:	b082      	sub	sp, #8
 80011f2:	af00      	add	r7, sp, #0
 80011f4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011f6:	6878      	ldr	r0, [r7, #4]
 80011f8:	f7ff ff4c 	bl	8001094 <__NVIC_SetPriorityGrouping>
}
 80011fc:	bf00      	nop
 80011fe:	3708      	adds	r7, #8
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}

08001204 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b086      	sub	sp, #24
 8001208:	af00      	add	r7, sp, #0
 800120a:	4603      	mov	r3, r0
 800120c:	60b9      	str	r1, [r7, #8]
 800120e:	607a      	str	r2, [r7, #4]
 8001210:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001212:	f7ff ff63 	bl	80010dc <__NVIC_GetPriorityGrouping>
 8001216:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001218:	687a      	ldr	r2, [r7, #4]
 800121a:	68b9      	ldr	r1, [r7, #8]
 800121c:	6978      	ldr	r0, [r7, #20]
 800121e:	f7ff ffb3 	bl	8001188 <NVIC_EncodePriority>
 8001222:	4602      	mov	r2, r0
 8001224:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001228:	4611      	mov	r1, r2
 800122a:	4618      	mov	r0, r3
 800122c:	f7ff ff82 	bl	8001134 <__NVIC_SetPriority>
}
 8001230:	bf00      	nop
 8001232:	3718      	adds	r7, #24
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}

08001238 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b082      	sub	sp, #8
 800123c:	af00      	add	r7, sp, #0
 800123e:	4603      	mov	r3, r0
 8001240:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001242:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001246:	4618      	mov	r0, r3
 8001248:	f7ff ff56 	bl	80010f8 <__NVIC_EnableIRQ>
}
 800124c:	bf00      	nop
 800124e:	3708      	adds	r7, #8
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}

08001254 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b084      	sub	sp, #16
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	2b00      	cmp	r3, #0
 8001260:	d101      	bne.n	8001266 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001262:	2301      	movs	r3, #1
 8001264:	e0cf      	b.n	8001406 <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800126c:	2b00      	cmp	r3, #0
 800126e:	d106      	bne.n	800127e <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	2223      	movs	r2, #35	; 0x23
 8001274:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001278:	6878      	ldr	r0, [r7, #4]
 800127a:	f7ff fa17 	bl	80006ac <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800127e:	4b64      	ldr	r3, [pc, #400]	; (8001410 <HAL_ETH_Init+0x1bc>)
 8001280:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001284:	4a62      	ldr	r2, [pc, #392]	; (8001410 <HAL_ETH_Init+0x1bc>)
 8001286:	f043 0302 	orr.w	r3, r3, #2
 800128a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800128e:	4b60      	ldr	r3, [pc, #384]	; (8001410 <HAL_ETH_Init+0x1bc>)
 8001290:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001294:	f003 0302 	and.w	r3, r3, #2
 8001298:	60bb      	str	r3, [r7, #8]
 800129a:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	7a1b      	ldrb	r3, [r3, #8]
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d103      	bne.n	80012ac <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 80012a4:	2000      	movs	r0, #0
 80012a6:	f7ff fee1 	bl	800106c <HAL_SYSCFG_ETHInterfaceSelect>
 80012aa:	e003      	b.n	80012b4 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 80012ac:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80012b0:	f7ff fedc 	bl	800106c <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 80012b4:	4b57      	ldr	r3, [pc, #348]	; (8001414 <HAL_ETH_Init+0x1c0>)
 80012b6:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	687a      	ldr	r2, [r7, #4]
 80012c4:	6812      	ldr	r2, [r2, #0]
 80012c6:	f043 0301 	orr.w	r3, r3, #1
 80012ca:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80012ce:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80012d0:	f7ff fec0 	bl	8001054 <HAL_GetTick>
 80012d4:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80012d6:	e011      	b.n	80012fc <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80012d8:	f7ff febc 	bl	8001054 <HAL_GetTick>
 80012dc:	4602      	mov	r2, r0
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	1ad3      	subs	r3, r2, r3
 80012e2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80012e6:	d909      	bls.n	80012fc <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	2204      	movs	r2, #4
 80012ec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	22e0      	movs	r2, #224	; 0xe0
 80012f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 80012f8:	2301      	movs	r3, #1
 80012fa:	e084      	b.n	8001406 <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f003 0301 	and.w	r3, r3, #1
 800130a:	2b00      	cmp	r3, #0
 800130c:	d1e4      	bne.n	80012d8 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 800130e:	6878      	ldr	r0, [r7, #4]
 8001310:	f000 f886 	bl	8001420 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8001314:	f001 fcb6 	bl	8002c84 <HAL_RCC_GetHCLKFreq>
 8001318:	4603      	mov	r3, r0
 800131a:	4a3f      	ldr	r2, [pc, #252]	; (8001418 <HAL_ETH_Init+0x1c4>)
 800131c:	fba2 2303 	umull	r2, r3, r2, r3
 8001320:	0c9a      	lsrs	r2, r3, #18
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	3a01      	subs	r2, #1
 8001328:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800132c:	6878      	ldr	r0, [r7, #4]
 800132e:	f000 fa71 	bl	8001814 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800133a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800133e:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 8001342:	687a      	ldr	r2, [r7, #4]
 8001344:	6812      	ldr	r2, [r2, #0]
 8001346:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800134a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800134e:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	695b      	ldr	r3, [r3, #20]
 8001356:	f003 0303 	and.w	r3, r3, #3
 800135a:	2b00      	cmp	r3, #0
 800135c:	d009      	beq.n	8001372 <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	2201      	movs	r2, #1
 8001362:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	22e0      	movs	r2, #224	; 0xe0
 800136a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 800136e:	2301      	movs	r3, #1
 8001370:	e049      	b.n	8001406 <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800137a:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 800137e:	4b27      	ldr	r3, [pc, #156]	; (800141c <HAL_ETH_Init+0x1c8>)
 8001380:	4013      	ands	r3, r2
 8001382:	687a      	ldr	r2, [r7, #4]
 8001384:	6952      	ldr	r2, [r2, #20]
 8001386:	0051      	lsls	r1, r2, #1
 8001388:	687a      	ldr	r2, [r7, #4]
 800138a:	6812      	ldr	r2, [r2, #0]
 800138c:	430b      	orrs	r3, r1
 800138e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001392:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001396:	6878      	ldr	r0, [r7, #4]
 8001398:	f000 fad9 	bl	800194e <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800139c:	6878      	ldr	r0, [r7, #4]
 800139e:	f000 fb1f 	bl	80019e0 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	685b      	ldr	r3, [r3, #4]
 80013a6:	3305      	adds	r3, #5
 80013a8:	781b      	ldrb	r3, [r3, #0]
 80013aa:	021a      	lsls	r2, r3, #8
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	685b      	ldr	r3, [r3, #4]
 80013b0:	3304      	adds	r3, #4
 80013b2:	781b      	ldrb	r3, [r3, #0]
 80013b4:	4619      	mov	r1, r3
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	430a      	orrs	r2, r1
 80013bc:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	3303      	adds	r3, #3
 80013c6:	781b      	ldrb	r3, [r3, #0]
 80013c8:	061a      	lsls	r2, r3, #24
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	685b      	ldr	r3, [r3, #4]
 80013ce:	3302      	adds	r3, #2
 80013d0:	781b      	ldrb	r3, [r3, #0]
 80013d2:	041b      	lsls	r3, r3, #16
 80013d4:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	685b      	ldr	r3, [r3, #4]
 80013da:	3301      	adds	r3, #1
 80013dc:	781b      	ldrb	r3, [r3, #0]
 80013de:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80013e0:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	685b      	ldr	r3, [r3, #4]
 80013e6:	781b      	ldrb	r3, [r3, #0]
 80013e8:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80013ee:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80013f0:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	2200      	movs	r2, #0
 80013f8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	2210      	movs	r2, #16
 8001400:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8001404:	2300      	movs	r3, #0
}
 8001406:	4618      	mov	r0, r3
 8001408:	3710      	adds	r7, #16
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop
 8001410:	58024400 	.word	0x58024400
 8001414:	58000400 	.word	0x58000400
 8001418:	431bde83 	.word	0x431bde83
 800141c:	ffff8001 	.word	0xffff8001

08001420 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b084      	sub	sp, #16
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001430:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001438:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800143a:	f001 fc23 	bl	8002c84 <HAL_RCC_GetHCLKFreq>
 800143e:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8001440:	68bb      	ldr	r3, [r7, #8]
 8001442:	4a1e      	ldr	r2, [pc, #120]	; (80014bc <HAL_ETH_SetMDIOClockRange+0x9c>)
 8001444:	4293      	cmp	r3, r2
 8001446:	d908      	bls.n	800145a <HAL_ETH_SetMDIOClockRange+0x3a>
 8001448:	68bb      	ldr	r3, [r7, #8]
 800144a:	4a1d      	ldr	r2, [pc, #116]	; (80014c0 <HAL_ETH_SetMDIOClockRange+0xa0>)
 800144c:	4293      	cmp	r3, r2
 800144e:	d804      	bhi.n	800145a <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001456:	60fb      	str	r3, [r7, #12]
 8001458:	e027      	b.n	80014aa <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 800145a:	68bb      	ldr	r3, [r7, #8]
 800145c:	4a18      	ldr	r2, [pc, #96]	; (80014c0 <HAL_ETH_SetMDIOClockRange+0xa0>)
 800145e:	4293      	cmp	r3, r2
 8001460:	d908      	bls.n	8001474 <HAL_ETH_SetMDIOClockRange+0x54>
 8001462:	68bb      	ldr	r3, [r7, #8]
 8001464:	4a17      	ldr	r2, [pc, #92]	; (80014c4 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8001466:	4293      	cmp	r3, r2
 8001468:	d204      	bcs.n	8001474 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8001470:	60fb      	str	r3, [r7, #12]
 8001472:	e01a      	b.n	80014aa <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8001474:	68bb      	ldr	r3, [r7, #8]
 8001476:	4a13      	ldr	r2, [pc, #76]	; (80014c4 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8001478:	4293      	cmp	r3, r2
 800147a:	d303      	bcc.n	8001484 <HAL_ETH_SetMDIOClockRange+0x64>
 800147c:	68bb      	ldr	r3, [r7, #8]
 800147e:	4a12      	ldr	r2, [pc, #72]	; (80014c8 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8001480:	4293      	cmp	r3, r2
 8001482:	d911      	bls.n	80014a8 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8001484:	68bb      	ldr	r3, [r7, #8]
 8001486:	4a10      	ldr	r2, [pc, #64]	; (80014c8 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8001488:	4293      	cmp	r3, r2
 800148a:	d908      	bls.n	800149e <HAL_ETH_SetMDIOClockRange+0x7e>
 800148c:	68bb      	ldr	r3, [r7, #8]
 800148e:	4a0f      	ldr	r2, [pc, #60]	; (80014cc <HAL_ETH_SetMDIOClockRange+0xac>)
 8001490:	4293      	cmp	r3, r2
 8001492:	d804      	bhi.n	800149e <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800149a:	60fb      	str	r3, [r7, #12]
 800149c:	e005      	b.n	80014aa <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80014a4:	60fb      	str	r3, [r7, #12]
 80014a6:	e000      	b.n	80014aa <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 80014a8:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	68fa      	ldr	r2, [r7, #12]
 80014b0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 80014b4:	bf00      	nop
 80014b6:	3710      	adds	r7, #16
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bd80      	pop	{r7, pc}
 80014bc:	01312cff 	.word	0x01312cff
 80014c0:	02160ebf 	.word	0x02160ebf
 80014c4:	03938700 	.word	0x03938700
 80014c8:	05f5e0ff 	.word	0x05f5e0ff
 80014cc:	08f0d17f 	.word	0x08f0d17f

080014d0 <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80014d0:	b480      	push	{r7}
 80014d2:	b085      	sub	sp, #20
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
 80014d8:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 80014e2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	791b      	ldrb	r3, [r3, #4]
 80014e8:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 80014ea:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	7b1b      	ldrb	r3, [r3, #12]
 80014f0:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80014f2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	7b5b      	ldrb	r3, [r3, #13]
 80014f8:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80014fa:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	7b9b      	ldrb	r3, [r3, #14]
 8001500:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8001502:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	7bdb      	ldrb	r3, [r3, #15]
 8001508:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800150a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800150c:	683a      	ldr	r2, [r7, #0]
 800150e:	7c12      	ldrb	r2, [r2, #16]
 8001510:	2a00      	cmp	r2, #0
 8001512:	d102      	bne.n	800151a <ETH_SetMACConfig+0x4a>
 8001514:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001518:	e000      	b.n	800151c <ETH_SetMACConfig+0x4c>
 800151a:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 800151c:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800151e:	683a      	ldr	r2, [r7, #0]
 8001520:	7c52      	ldrb	r2, [r2, #17]
 8001522:	2a00      	cmp	r2, #0
 8001524:	d102      	bne.n	800152c <ETH_SetMACConfig+0x5c>
 8001526:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800152a:	e000      	b.n	800152e <ETH_SetMACConfig+0x5e>
 800152c:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800152e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	7c9b      	ldrb	r3, [r3, #18]
 8001534:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8001536:	431a      	orrs	r2, r3
               macconf->Speed |
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 800153c:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8001542:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	7f1b      	ldrb	r3, [r3, #28]
 8001548:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 800154a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	7f5b      	ldrb	r3, [r3, #29]
 8001550:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8001552:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8001554:	683a      	ldr	r2, [r7, #0]
 8001556:	7f92      	ldrb	r2, [r2, #30]
 8001558:	2a00      	cmp	r2, #0
 800155a:	d102      	bne.n	8001562 <ETH_SetMACConfig+0x92>
 800155c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001560:	e000      	b.n	8001564 <ETH_SetMACConfig+0x94>
 8001562:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8001564:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	7fdb      	ldrb	r3, [r3, #31]
 800156a:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 800156c:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 800156e:	683a      	ldr	r2, [r7, #0]
 8001570:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001574:	2a00      	cmp	r2, #0
 8001576:	d102      	bne.n	800157e <ETH_SetMACConfig+0xae>
 8001578:	f44f 7280 	mov.w	r2, #256	; 0x100
 800157c:	e000      	b.n	8001580 <ETH_SetMACConfig+0xb0>
 800157e:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8001580:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8001586:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800158e:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8001590:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 8001596:	4313      	orrs	r3, r2
 8001598:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	681a      	ldr	r2, [r3, #0]
 80015a0:	4b56      	ldr	r3, [pc, #344]	; (80016fc <ETH_SetMACConfig+0x22c>)
 80015a2:	4013      	ands	r3, r2
 80015a4:	687a      	ldr	r2, [r7, #4]
 80015a6:	6812      	ldr	r2, [r2, #0]
 80015a8:	68f9      	ldr	r1, [r7, #12]
 80015aa:	430b      	orrs	r3, r1
 80015ac:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015b2:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80015ba:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80015bc:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80015c4:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80015c6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80015ce:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80015d0:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 80015d2:	683a      	ldr	r2, [r7, #0]
 80015d4:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 80015d8:	2a00      	cmp	r2, #0
 80015da:	d102      	bne.n	80015e2 <ETH_SetMACConfig+0x112>
 80015dc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80015e0:	e000      	b.n	80015e4 <ETH_SetMACConfig+0x114>
 80015e2:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80015e4:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80015ea:	4313      	orrs	r3, r2
 80015ec:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	685a      	ldr	r2, [r3, #4]
 80015f4:	4b42      	ldr	r3, [pc, #264]	; (8001700 <ETH_SetMACConfig+0x230>)
 80015f6:	4013      	ands	r3, r2
 80015f8:	687a      	ldr	r2, [r7, #4]
 80015fa:	6812      	ldr	r2, [r2, #0]
 80015fc:	68f9      	ldr	r1, [r7, #12]
 80015fe:	430b      	orrs	r3, r1
 8001600:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001608:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800160e:	4313      	orrs	r3, r2
 8001610:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	68da      	ldr	r2, [r3, #12]
 8001618:	4b3a      	ldr	r3, [pc, #232]	; (8001704 <ETH_SetMACConfig+0x234>)
 800161a:	4013      	ands	r3, r2
 800161c:	687a      	ldr	r2, [r7, #4]
 800161e:	6812      	ldr	r2, [r2, #0]
 8001620:	68f9      	ldr	r1, [r7, #12]
 8001622:	430b      	orrs	r3, r1
 8001624:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800162c:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001632:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8001634:	683a      	ldr	r2, [r7, #0]
 8001636:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800163a:	2a00      	cmp	r2, #0
 800163c:	d101      	bne.n	8001642 <ETH_SetMACConfig+0x172>
 800163e:	2280      	movs	r2, #128	; 0x80
 8001640:	e000      	b.n	8001644 <ETH_SetMACConfig+0x174>
 8001642:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8001644:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800164a:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800164c:	4313      	orrs	r3, r2
 800164e:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001656:	f64f 730d 	movw	r3, #65293	; 0xff0d
 800165a:	4013      	ands	r3, r2
 800165c:	687a      	ldr	r2, [r7, #4]
 800165e:	6812      	ldr	r2, [r2, #0]
 8001660:	68f9      	ldr	r1, [r7, #12]
 8001662:	430b      	orrs	r3, r1
 8001664:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 800166c:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8001674:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8001676:	4313      	orrs	r3, r2
 8001678:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001682:	f023 0103 	bic.w	r1, r3, #3
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	68fa      	ldr	r2, [r7, #12]
 800168c:	430a      	orrs	r2, r1
 800168e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 800169a:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	430a      	orrs	r2, r1
 80016a8:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80016b0:	683a      	ldr	r2, [r7, #0]
 80016b2:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 80016b6:	2a00      	cmp	r2, #0
 80016b8:	d101      	bne.n	80016be <ETH_SetMACConfig+0x1ee>
 80016ba:	2240      	movs	r2, #64	; 0x40
 80016bc:	e000      	b.n	80016c0 <ETH_SetMACConfig+0x1f0>
 80016be:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 80016c0:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 80016c8:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80016ca:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 80016d2:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 80016d4:	4313      	orrs	r3, r2
 80016d6:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 80016e0:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	68fa      	ldr	r2, [r7, #12]
 80016ea:	430a      	orrs	r2, r1
 80016ec:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 80016f0:	bf00      	nop
 80016f2:	3714      	adds	r7, #20
 80016f4:	46bd      	mov	sp, r7
 80016f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fa:	4770      	bx	lr
 80016fc:	00048083 	.word	0x00048083
 8001700:	c0f88000 	.word	0xc0f88000
 8001704:	fffffef0 	.word	0xfffffef0

08001708 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8001708:	b480      	push	{r7}
 800170a:	b085      	sub	sp, #20
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
 8001710:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800171a:	681a      	ldr	r2, [r3, #0]
 800171c:	4b38      	ldr	r3, [pc, #224]	; (8001800 <ETH_SetDMAConfig+0xf8>)
 800171e:	4013      	ands	r3, r2
 8001720:	683a      	ldr	r2, [r7, #0]
 8001722:	6811      	ldr	r1, [r2, #0]
 8001724:	687a      	ldr	r2, [r7, #4]
 8001726:	6812      	ldr	r2, [r2, #0]
 8001728:	430b      	orrs	r3, r1
 800172a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800172e:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	791b      	ldrb	r3, [r3, #4]
 8001734:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800173a:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	7b1b      	ldrb	r3, [r3, #12]
 8001740:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001742:	4313      	orrs	r3, r2
 8001744:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800174e:	685a      	ldr	r2, [r3, #4]
 8001750:	4b2c      	ldr	r3, [pc, #176]	; (8001804 <ETH_SetDMAConfig+0xfc>)
 8001752:	4013      	ands	r3, r2
 8001754:	687a      	ldr	r2, [r7, #4]
 8001756:	6812      	ldr	r2, [r2, #0]
 8001758:	68f9      	ldr	r1, [r7, #12]
 800175a:	430b      	orrs	r3, r1
 800175c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001760:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	7b5b      	ldrb	r3, [r3, #13]
 8001766:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 800176c:	4313      	orrs	r3, r2
 800176e:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001778:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 800177c:	4b22      	ldr	r3, [pc, #136]	; (8001808 <ETH_SetDMAConfig+0x100>)
 800177e:	4013      	ands	r3, r2
 8001780:	687a      	ldr	r2, [r7, #4]
 8001782:	6812      	ldr	r2, [r2, #0]
 8001784:	68f9      	ldr	r1, [r7, #12]
 8001786:	430b      	orrs	r3, r1
 8001788:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800178c:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	7d1b      	ldrb	r3, [r3, #20]
 8001798:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 800179a:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	7f5b      	ldrb	r3, [r3, #29]
 80017a0:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 80017a2:	4313      	orrs	r3, r2
 80017a4:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80017ae:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 80017b2:	4b16      	ldr	r3, [pc, #88]	; (800180c <ETH_SetDMAConfig+0x104>)
 80017b4:	4013      	ands	r3, r2
 80017b6:	687a      	ldr	r2, [r7, #4]
 80017b8:	6812      	ldr	r2, [r2, #0]
 80017ba:	68f9      	ldr	r1, [r7, #12]
 80017bc:	430b      	orrs	r3, r1
 80017be:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80017c2:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	7f1b      	ldrb	r3, [r3, #28]
 80017ca:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80017d0:	4313      	orrs	r3, r2
 80017d2:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80017dc:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 80017e0:	4b0b      	ldr	r3, [pc, #44]	; (8001810 <ETH_SetDMAConfig+0x108>)
 80017e2:	4013      	ands	r3, r2
 80017e4:	687a      	ldr	r2, [r7, #4]
 80017e6:	6812      	ldr	r2, [r2, #0]
 80017e8:	68f9      	ldr	r1, [r7, #12]
 80017ea:	430b      	orrs	r3, r1
 80017ec:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80017f0:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 80017f4:	bf00      	nop
 80017f6:	3714      	adds	r7, #20
 80017f8:	46bd      	mov	sp, r7
 80017fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fe:	4770      	bx	lr
 8001800:	ffff87fd 	.word	0xffff87fd
 8001804:	ffff2ffe 	.word	0xffff2ffe
 8001808:	fffec000 	.word	0xfffec000
 800180c:	ffc0efef 	.word	0xffc0efef
 8001810:	7fc0ffff 	.word	0x7fc0ffff

08001814 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b0a4      	sub	sp, #144	; 0x90
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 800181c:	2301      	movs	r3, #1
 800181e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001822:	2300      	movs	r3, #0
 8001824:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8001826:	2300      	movs	r3, #0
 8001828:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 800182c:	2300      	movs	r3, #0
 800182e:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8001832:	2301      	movs	r3, #1
 8001834:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8001838:	2301      	movs	r3, #1
 800183a:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 800183e:	2301      	movs	r3, #1
 8001840:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8001844:	2300      	movs	r3, #0
 8001846:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 800184a:	2301      	movs	r3, #1
 800184c:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001850:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001854:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8001856:	2300      	movs	r3, #0
 8001858:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 800185c:	2300      	movs	r3, #0
 800185e:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8001860:	2300      	movs	r3, #0
 8001862:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8001866:	2300      	movs	r3, #0
 8001868:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 800186c:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8001870:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8001872:	2300      	movs	r3, #0
 8001874:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8001878:	2300      	movs	r3, #0
 800187a:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 800187c:	2301      	movs	r3, #1
 800187e:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8001882:	2300      	movs	r3, #0
 8001884:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8001888:	2300      	movs	r3, #0
 800188a:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 800188e:	2300      	movs	r3, #0
 8001890:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8001892:	2300      	movs	r3, #0
 8001894:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8001896:	2300      	movs	r3, #0
 8001898:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 800189a:	2300      	movs	r3, #0
 800189c:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80018a0:	2300      	movs	r3, #0
 80018a2:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 80018a6:	2301      	movs	r3, #1
 80018a8:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 80018ac:	2320      	movs	r3, #32
 80018ae:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 80018b2:	2301      	movs	r3, #1
 80018b4:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 80018b8:	2300      	movs	r3, #0
 80018ba:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 80018be:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 80018c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 80018c4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80018c8:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 80018ca:	2300      	movs	r3, #0
 80018cc:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 80018d0:	2302      	movs	r3, #2
 80018d2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 80018d6:	2300      	movs	r3, #0
 80018d8:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80018dc:	2300      	movs	r3, #0
 80018de:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 80018e2:	2300      	movs	r3, #0
 80018e4:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 80018e8:	2301      	movs	r3, #1
 80018ea:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 80018ee:	2300      	movs	r3, #0
 80018f0:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 80018f2:	2301      	movs	r3, #1
 80018f4:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80018f8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018fc:	4619      	mov	r1, r3
 80018fe:	6878      	ldr	r0, [r7, #4]
 8001900:	f7ff fde6 	bl	80014d0 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001904:	2301      	movs	r3, #1
 8001906:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001908:	2301      	movs	r3, #1
 800190a:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 800190c:	2300      	movs	r3, #0
 800190e:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8001910:	2300      	movs	r3, #0
 8001912:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8001916:	2300      	movs	r3, #0
 8001918:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 800191a:	2300      	movs	r3, #0
 800191c:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800191e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001922:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8001924:	2300      	movs	r3, #0
 8001926:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001928:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800192c:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 800192e:	2300      	movs	r3, #0
 8001930:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8001934:	f44f 7306 	mov.w	r3, #536	; 0x218
 8001938:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800193a:	f107 0308 	add.w	r3, r7, #8
 800193e:	4619      	mov	r1, r3
 8001940:	6878      	ldr	r0, [r7, #4]
 8001942:	f7ff fee1 	bl	8001708 <ETH_SetDMAConfig>
}
 8001946:	bf00      	nop
 8001948:	3790      	adds	r7, #144	; 0x90
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}

0800194e <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 800194e:	b480      	push	{r7}
 8001950:	b085      	sub	sp, #20
 8001952:	af00      	add	r7, sp, #0
 8001954:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001956:	2300      	movs	r3, #0
 8001958:	60fb      	str	r3, [r7, #12]
 800195a:	e01d      	b.n	8001998 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	68d9      	ldr	r1, [r3, #12]
 8001960:	68fa      	ldr	r2, [r7, #12]
 8001962:	4613      	mov	r3, r2
 8001964:	005b      	lsls	r3, r3, #1
 8001966:	4413      	add	r3, r2
 8001968:	00db      	lsls	r3, r3, #3
 800196a:	440b      	add	r3, r1
 800196c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 800196e:	68bb      	ldr	r3, [r7, #8]
 8001970:	2200      	movs	r2, #0
 8001972:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8001974:	68bb      	ldr	r3, [r7, #8]
 8001976:	2200      	movs	r2, #0
 8001978:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 800197a:	68bb      	ldr	r3, [r7, #8]
 800197c:	2200      	movs	r2, #0
 800197e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8001980:	68bb      	ldr	r3, [r7, #8]
 8001982:	2200      	movs	r2, #0
 8001984:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001986:	68b9      	ldr	r1, [r7, #8]
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	68fa      	ldr	r2, [r7, #12]
 800198c:	3206      	adds	r2, #6
 800198e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	3301      	adds	r3, #1
 8001996:	60fb      	str	r3, [r7, #12]
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	2b03      	cmp	r3, #3
 800199c:	d9de      	bls.n	800195c <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	2200      	movs	r2, #0
 80019a2:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019ac:	461a      	mov	r2, r3
 80019ae:	2303      	movs	r3, #3
 80019b0:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	68da      	ldr	r2, [r3, #12]
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019c0:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	68da      	ldr	r2, [r3, #12]
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019d0:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 80019d4:	bf00      	nop
 80019d6:	3714      	adds	r7, #20
 80019d8:	46bd      	mov	sp, r7
 80019da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019de:	4770      	bx	lr

080019e0 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80019e0:	b480      	push	{r7}
 80019e2:	b085      	sub	sp, #20
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80019e8:	2300      	movs	r3, #0
 80019ea:	60fb      	str	r3, [r7, #12]
 80019ec:	e023      	b.n	8001a36 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6919      	ldr	r1, [r3, #16]
 80019f2:	68fa      	ldr	r2, [r7, #12]
 80019f4:	4613      	mov	r3, r2
 80019f6:	005b      	lsls	r3, r3, #1
 80019f8:	4413      	add	r3, r2
 80019fa:	00db      	lsls	r3, r3, #3
 80019fc:	440b      	add	r3, r1
 80019fe:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8001a00:	68bb      	ldr	r3, [r7, #8]
 8001a02:	2200      	movs	r2, #0
 8001a04:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8001a06:	68bb      	ldr	r3, [r7, #8]
 8001a08:	2200      	movs	r2, #0
 8001a0a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8001a0c:	68bb      	ldr	r3, [r7, #8]
 8001a0e:	2200      	movs	r2, #0
 8001a10:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8001a12:	68bb      	ldr	r3, [r7, #8]
 8001a14:	2200      	movs	r2, #0
 8001a16:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8001a18:	68bb      	ldr	r3, [r7, #8]
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8001a1e:	68bb      	ldr	r3, [r7, #8]
 8001a20:	2200      	movs	r2, #0
 8001a22:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001a24:	68b9      	ldr	r1, [r7, #8]
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	68fa      	ldr	r2, [r7, #12]
 8001a2a:	3212      	adds	r2, #18
 8001a2c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	3301      	adds	r3, #1
 8001a34:	60fb      	str	r3, [r7, #12]
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	2b03      	cmp	r3, #3
 8001a3a:	d9d8      	bls.n	80019ee <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2200      	movs	r2, #0
 8001a40:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	2200      	movs	r2, #0
 8001a46:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	2200      	movs	r2, #0
 8001a52:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2200      	movs	r2, #0
 8001a58:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a62:	461a      	mov	r2, r3
 8001a64:	2303      	movs	r3, #3
 8001a66:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	691a      	ldr	r2, [r3, #16]
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a76:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	691b      	ldr	r3, [r3, #16]
 8001a7e:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a8a:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 8001a8e:	bf00      	nop
 8001a90:	3714      	adds	r7, #20
 8001a92:	46bd      	mov	sp, r7
 8001a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a98:	4770      	bx	lr
	...

08001a9c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	b089      	sub	sp, #36	; 0x24
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
 8001aa4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001aaa:	4b86      	ldr	r3, [pc, #536]	; (8001cc4 <HAL_GPIO_Init+0x228>)
 8001aac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001aae:	e18c      	b.n	8001dca <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	681a      	ldr	r2, [r3, #0]
 8001ab4:	2101      	movs	r1, #1
 8001ab6:	69fb      	ldr	r3, [r7, #28]
 8001ab8:	fa01 f303 	lsl.w	r3, r1, r3
 8001abc:	4013      	ands	r3, r2
 8001abe:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001ac0:	693b      	ldr	r3, [r7, #16]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	f000 817e 	beq.w	8001dc4 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	f003 0303 	and.w	r3, r3, #3
 8001ad0:	2b01      	cmp	r3, #1
 8001ad2:	d005      	beq.n	8001ae0 <HAL_GPIO_Init+0x44>
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	f003 0303 	and.w	r3, r3, #3
 8001adc:	2b02      	cmp	r3, #2
 8001ade:	d130      	bne.n	8001b42 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	689b      	ldr	r3, [r3, #8]
 8001ae4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001ae6:	69fb      	ldr	r3, [r7, #28]
 8001ae8:	005b      	lsls	r3, r3, #1
 8001aea:	2203      	movs	r2, #3
 8001aec:	fa02 f303 	lsl.w	r3, r2, r3
 8001af0:	43db      	mvns	r3, r3
 8001af2:	69ba      	ldr	r2, [r7, #24]
 8001af4:	4013      	ands	r3, r2
 8001af6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	68da      	ldr	r2, [r3, #12]
 8001afc:	69fb      	ldr	r3, [r7, #28]
 8001afe:	005b      	lsls	r3, r3, #1
 8001b00:	fa02 f303 	lsl.w	r3, r2, r3
 8001b04:	69ba      	ldr	r2, [r7, #24]
 8001b06:	4313      	orrs	r3, r2
 8001b08:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	69ba      	ldr	r2, [r7, #24]
 8001b0e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001b16:	2201      	movs	r2, #1
 8001b18:	69fb      	ldr	r3, [r7, #28]
 8001b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b1e:	43db      	mvns	r3, r3
 8001b20:	69ba      	ldr	r2, [r7, #24]
 8001b22:	4013      	ands	r3, r2
 8001b24:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	091b      	lsrs	r3, r3, #4
 8001b2c:	f003 0201 	and.w	r2, r3, #1
 8001b30:	69fb      	ldr	r3, [r7, #28]
 8001b32:	fa02 f303 	lsl.w	r3, r2, r3
 8001b36:	69ba      	ldr	r2, [r7, #24]
 8001b38:	4313      	orrs	r3, r2
 8001b3a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	69ba      	ldr	r2, [r7, #24]
 8001b40:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	f003 0303 	and.w	r3, r3, #3
 8001b4a:	2b03      	cmp	r3, #3
 8001b4c:	d017      	beq.n	8001b7e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	68db      	ldr	r3, [r3, #12]
 8001b52:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001b54:	69fb      	ldr	r3, [r7, #28]
 8001b56:	005b      	lsls	r3, r3, #1
 8001b58:	2203      	movs	r2, #3
 8001b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b5e:	43db      	mvns	r3, r3
 8001b60:	69ba      	ldr	r2, [r7, #24]
 8001b62:	4013      	ands	r3, r2
 8001b64:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	689a      	ldr	r2, [r3, #8]
 8001b6a:	69fb      	ldr	r3, [r7, #28]
 8001b6c:	005b      	lsls	r3, r3, #1
 8001b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b72:	69ba      	ldr	r2, [r7, #24]
 8001b74:	4313      	orrs	r3, r2
 8001b76:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	69ba      	ldr	r2, [r7, #24]
 8001b7c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	f003 0303 	and.w	r3, r3, #3
 8001b86:	2b02      	cmp	r3, #2
 8001b88:	d123      	bne.n	8001bd2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b8a:	69fb      	ldr	r3, [r7, #28]
 8001b8c:	08da      	lsrs	r2, r3, #3
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	3208      	adds	r2, #8
 8001b92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b96:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001b98:	69fb      	ldr	r3, [r7, #28]
 8001b9a:	f003 0307 	and.w	r3, r3, #7
 8001b9e:	009b      	lsls	r3, r3, #2
 8001ba0:	220f      	movs	r2, #15
 8001ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba6:	43db      	mvns	r3, r3
 8001ba8:	69ba      	ldr	r2, [r7, #24]
 8001baa:	4013      	ands	r3, r2
 8001bac:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	691a      	ldr	r2, [r3, #16]
 8001bb2:	69fb      	ldr	r3, [r7, #28]
 8001bb4:	f003 0307 	and.w	r3, r3, #7
 8001bb8:	009b      	lsls	r3, r3, #2
 8001bba:	fa02 f303 	lsl.w	r3, r2, r3
 8001bbe:	69ba      	ldr	r2, [r7, #24]
 8001bc0:	4313      	orrs	r3, r2
 8001bc2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001bc4:	69fb      	ldr	r3, [r7, #28]
 8001bc6:	08da      	lsrs	r2, r3, #3
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	3208      	adds	r2, #8
 8001bcc:	69b9      	ldr	r1, [r7, #24]
 8001bce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001bd8:	69fb      	ldr	r3, [r7, #28]
 8001bda:	005b      	lsls	r3, r3, #1
 8001bdc:	2203      	movs	r2, #3
 8001bde:	fa02 f303 	lsl.w	r3, r2, r3
 8001be2:	43db      	mvns	r3, r3
 8001be4:	69ba      	ldr	r2, [r7, #24]
 8001be6:	4013      	ands	r3, r2
 8001be8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	f003 0203 	and.w	r2, r3, #3
 8001bf2:	69fb      	ldr	r3, [r7, #28]
 8001bf4:	005b      	lsls	r3, r3, #1
 8001bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfa:	69ba      	ldr	r2, [r7, #24]
 8001bfc:	4313      	orrs	r3, r2
 8001bfe:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	69ba      	ldr	r2, [r7, #24]
 8001c04:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	f000 80d8 	beq.w	8001dc4 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c14:	4b2c      	ldr	r3, [pc, #176]	; (8001cc8 <HAL_GPIO_Init+0x22c>)
 8001c16:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001c1a:	4a2b      	ldr	r2, [pc, #172]	; (8001cc8 <HAL_GPIO_Init+0x22c>)
 8001c1c:	f043 0302 	orr.w	r3, r3, #2
 8001c20:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001c24:	4b28      	ldr	r3, [pc, #160]	; (8001cc8 <HAL_GPIO_Init+0x22c>)
 8001c26:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001c2a:	f003 0302 	and.w	r3, r3, #2
 8001c2e:	60fb      	str	r3, [r7, #12]
 8001c30:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c32:	4a26      	ldr	r2, [pc, #152]	; (8001ccc <HAL_GPIO_Init+0x230>)
 8001c34:	69fb      	ldr	r3, [r7, #28]
 8001c36:	089b      	lsrs	r3, r3, #2
 8001c38:	3302      	adds	r3, #2
 8001c3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001c40:	69fb      	ldr	r3, [r7, #28]
 8001c42:	f003 0303 	and.w	r3, r3, #3
 8001c46:	009b      	lsls	r3, r3, #2
 8001c48:	220f      	movs	r2, #15
 8001c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4e:	43db      	mvns	r3, r3
 8001c50:	69ba      	ldr	r2, [r7, #24]
 8001c52:	4013      	ands	r3, r2
 8001c54:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	4a1d      	ldr	r2, [pc, #116]	; (8001cd0 <HAL_GPIO_Init+0x234>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d04a      	beq.n	8001cf4 <HAL_GPIO_Init+0x258>
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	4a1c      	ldr	r2, [pc, #112]	; (8001cd4 <HAL_GPIO_Init+0x238>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d02b      	beq.n	8001cbe <HAL_GPIO_Init+0x222>
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	4a1b      	ldr	r2, [pc, #108]	; (8001cd8 <HAL_GPIO_Init+0x23c>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d025      	beq.n	8001cba <HAL_GPIO_Init+0x21e>
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	4a1a      	ldr	r2, [pc, #104]	; (8001cdc <HAL_GPIO_Init+0x240>)
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d01f      	beq.n	8001cb6 <HAL_GPIO_Init+0x21a>
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	4a19      	ldr	r2, [pc, #100]	; (8001ce0 <HAL_GPIO_Init+0x244>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d019      	beq.n	8001cb2 <HAL_GPIO_Init+0x216>
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	4a18      	ldr	r2, [pc, #96]	; (8001ce4 <HAL_GPIO_Init+0x248>)
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d013      	beq.n	8001cae <HAL_GPIO_Init+0x212>
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	4a17      	ldr	r2, [pc, #92]	; (8001ce8 <HAL_GPIO_Init+0x24c>)
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d00d      	beq.n	8001caa <HAL_GPIO_Init+0x20e>
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	4a16      	ldr	r2, [pc, #88]	; (8001cec <HAL_GPIO_Init+0x250>)
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d007      	beq.n	8001ca6 <HAL_GPIO_Init+0x20a>
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	4a15      	ldr	r2, [pc, #84]	; (8001cf0 <HAL_GPIO_Init+0x254>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d101      	bne.n	8001ca2 <HAL_GPIO_Init+0x206>
 8001c9e:	2309      	movs	r3, #9
 8001ca0:	e029      	b.n	8001cf6 <HAL_GPIO_Init+0x25a>
 8001ca2:	230a      	movs	r3, #10
 8001ca4:	e027      	b.n	8001cf6 <HAL_GPIO_Init+0x25a>
 8001ca6:	2307      	movs	r3, #7
 8001ca8:	e025      	b.n	8001cf6 <HAL_GPIO_Init+0x25a>
 8001caa:	2306      	movs	r3, #6
 8001cac:	e023      	b.n	8001cf6 <HAL_GPIO_Init+0x25a>
 8001cae:	2305      	movs	r3, #5
 8001cb0:	e021      	b.n	8001cf6 <HAL_GPIO_Init+0x25a>
 8001cb2:	2304      	movs	r3, #4
 8001cb4:	e01f      	b.n	8001cf6 <HAL_GPIO_Init+0x25a>
 8001cb6:	2303      	movs	r3, #3
 8001cb8:	e01d      	b.n	8001cf6 <HAL_GPIO_Init+0x25a>
 8001cba:	2302      	movs	r3, #2
 8001cbc:	e01b      	b.n	8001cf6 <HAL_GPIO_Init+0x25a>
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	e019      	b.n	8001cf6 <HAL_GPIO_Init+0x25a>
 8001cc2:	bf00      	nop
 8001cc4:	58000080 	.word	0x58000080
 8001cc8:	58024400 	.word	0x58024400
 8001ccc:	58000400 	.word	0x58000400
 8001cd0:	58020000 	.word	0x58020000
 8001cd4:	58020400 	.word	0x58020400
 8001cd8:	58020800 	.word	0x58020800
 8001cdc:	58020c00 	.word	0x58020c00
 8001ce0:	58021000 	.word	0x58021000
 8001ce4:	58021400 	.word	0x58021400
 8001ce8:	58021800 	.word	0x58021800
 8001cec:	58021c00 	.word	0x58021c00
 8001cf0:	58022400 	.word	0x58022400
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	69fa      	ldr	r2, [r7, #28]
 8001cf8:	f002 0203 	and.w	r2, r2, #3
 8001cfc:	0092      	lsls	r2, r2, #2
 8001cfe:	4093      	lsls	r3, r2
 8001d00:	69ba      	ldr	r2, [r7, #24]
 8001d02:	4313      	orrs	r3, r2
 8001d04:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d06:	4938      	ldr	r1, [pc, #224]	; (8001de8 <HAL_GPIO_Init+0x34c>)
 8001d08:	69fb      	ldr	r3, [r7, #28]
 8001d0a:	089b      	lsrs	r3, r3, #2
 8001d0c:	3302      	adds	r3, #2
 8001d0e:	69ba      	ldr	r2, [r7, #24]
 8001d10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001d14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001d1c:	693b      	ldr	r3, [r7, #16]
 8001d1e:	43db      	mvns	r3, r3
 8001d20:	69ba      	ldr	r2, [r7, #24]
 8001d22:	4013      	ands	r3, r2
 8001d24:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d003      	beq.n	8001d3a <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8001d32:	69ba      	ldr	r2, [r7, #24]
 8001d34:	693b      	ldr	r3, [r7, #16]
 8001d36:	4313      	orrs	r3, r2
 8001d38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001d3a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001d3e:	69bb      	ldr	r3, [r7, #24]
 8001d40:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001d42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001d4a:	693b      	ldr	r3, [r7, #16]
 8001d4c:	43db      	mvns	r3, r3
 8001d4e:	69ba      	ldr	r2, [r7, #24]
 8001d50:	4013      	ands	r3, r2
 8001d52:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d003      	beq.n	8001d68 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8001d60:	69ba      	ldr	r2, [r7, #24]
 8001d62:	693b      	ldr	r3, [r7, #16]
 8001d64:	4313      	orrs	r3, r2
 8001d66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001d68:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001d6c:	69bb      	ldr	r3, [r7, #24]
 8001d6e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001d70:	697b      	ldr	r3, [r7, #20]
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001d76:	693b      	ldr	r3, [r7, #16]
 8001d78:	43db      	mvns	r3, r3
 8001d7a:	69ba      	ldr	r2, [r7, #24]
 8001d7c:	4013      	ands	r3, r2
 8001d7e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d003      	beq.n	8001d94 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8001d8c:	69ba      	ldr	r2, [r7, #24]
 8001d8e:	693b      	ldr	r3, [r7, #16]
 8001d90:	4313      	orrs	r3, r2
 8001d92:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001d94:	697b      	ldr	r3, [r7, #20]
 8001d96:	69ba      	ldr	r2, [r7, #24]
 8001d98:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001d9a:	697b      	ldr	r3, [r7, #20]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001da0:	693b      	ldr	r3, [r7, #16]
 8001da2:	43db      	mvns	r3, r3
 8001da4:	69ba      	ldr	r2, [r7, #24]
 8001da6:	4013      	ands	r3, r2
 8001da8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	685b      	ldr	r3, [r3, #4]
 8001dae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d003      	beq.n	8001dbe <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8001db6:	69ba      	ldr	r2, [r7, #24]
 8001db8:	693b      	ldr	r3, [r7, #16]
 8001dba:	4313      	orrs	r3, r2
 8001dbc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001dbe:	697b      	ldr	r3, [r7, #20]
 8001dc0:	69ba      	ldr	r2, [r7, #24]
 8001dc2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001dc4:	69fb      	ldr	r3, [r7, #28]
 8001dc6:	3301      	adds	r3, #1
 8001dc8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	681a      	ldr	r2, [r3, #0]
 8001dce:	69fb      	ldr	r3, [r7, #28]
 8001dd0:	fa22 f303 	lsr.w	r3, r2, r3
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	f47f ae6b 	bne.w	8001ab0 <HAL_GPIO_Init+0x14>
  }
}
 8001dda:	bf00      	nop
 8001ddc:	bf00      	nop
 8001dde:	3724      	adds	r7, #36	; 0x24
 8001de0:	46bd      	mov	sp, r7
 8001de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de6:	4770      	bx	lr
 8001de8:	58000400 	.word	0x58000400

08001dec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001dec:	b480      	push	{r7}
 8001dee:	b083      	sub	sp, #12
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
 8001df4:	460b      	mov	r3, r1
 8001df6:	807b      	strh	r3, [r7, #2]
 8001df8:	4613      	mov	r3, r2
 8001dfa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001dfc:	787b      	ldrb	r3, [r7, #1]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d003      	beq.n	8001e0a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e02:	887a      	ldrh	r2, [r7, #2]
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001e08:	e003      	b.n	8001e12 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001e0a:	887b      	ldrh	r3, [r7, #2]
 8001e0c:	041a      	lsls	r2, r3, #16
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	619a      	str	r2, [r3, #24]
}
 8001e12:	bf00      	nop
 8001e14:	370c      	adds	r7, #12
 8001e16:	46bd      	mov	sp, r7
 8001e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1c:	4770      	bx	lr

08001e1e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001e1e:	b480      	push	{r7}
 8001e20:	b085      	sub	sp, #20
 8001e22:	af00      	add	r7, sp, #0
 8001e24:	6078      	str	r0, [r7, #4]
 8001e26:	460b      	mov	r3, r1
 8001e28:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	695b      	ldr	r3, [r3, #20]
 8001e2e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001e30:	887a      	ldrh	r2, [r7, #2]
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	4013      	ands	r3, r2
 8001e36:	041a      	lsls	r2, r3, #16
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	43d9      	mvns	r1, r3
 8001e3c:	887b      	ldrh	r3, [r7, #2]
 8001e3e:	400b      	ands	r3, r1
 8001e40:	431a      	orrs	r2, r3
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	619a      	str	r2, [r3, #24]
}
 8001e46:	bf00      	nop
 8001e48:	3714      	adds	r7, #20
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e50:	4770      	bx	lr
	...

08001e54 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b084      	sub	sp, #16
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8001e5c:	4b19      	ldr	r3, [pc, #100]	; (8001ec4 <HAL_PWREx_ConfigSupply+0x70>)
 8001e5e:	68db      	ldr	r3, [r3, #12]
 8001e60:	f003 0304 	and.w	r3, r3, #4
 8001e64:	2b04      	cmp	r3, #4
 8001e66:	d00a      	beq.n	8001e7e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001e68:	4b16      	ldr	r3, [pc, #88]	; (8001ec4 <HAL_PWREx_ConfigSupply+0x70>)
 8001e6a:	68db      	ldr	r3, [r3, #12]
 8001e6c:	f003 0307 	and.w	r3, r3, #7
 8001e70:	687a      	ldr	r2, [r7, #4]
 8001e72:	429a      	cmp	r2, r3
 8001e74:	d001      	beq.n	8001e7a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001e76:	2301      	movs	r3, #1
 8001e78:	e01f      	b.n	8001eba <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	e01d      	b.n	8001eba <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001e7e:	4b11      	ldr	r3, [pc, #68]	; (8001ec4 <HAL_PWREx_ConfigSupply+0x70>)
 8001e80:	68db      	ldr	r3, [r3, #12]
 8001e82:	f023 0207 	bic.w	r2, r3, #7
 8001e86:	490f      	ldr	r1, [pc, #60]	; (8001ec4 <HAL_PWREx_ConfigSupply+0x70>)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	4313      	orrs	r3, r2
 8001e8c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001e8e:	f7ff f8e1 	bl	8001054 <HAL_GetTick>
 8001e92:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001e94:	e009      	b.n	8001eaa <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001e96:	f7ff f8dd 	bl	8001054 <HAL_GetTick>
 8001e9a:	4602      	mov	r2, r0
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	1ad3      	subs	r3, r2, r3
 8001ea0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001ea4:	d901      	bls.n	8001eaa <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	e007      	b.n	8001eba <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001eaa:	4b06      	ldr	r3, [pc, #24]	; (8001ec4 <HAL_PWREx_ConfigSupply+0x70>)
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001eb2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001eb6:	d1ee      	bne.n	8001e96 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001eb8:	2300      	movs	r3, #0
}
 8001eba:	4618      	mov	r0, r3
 8001ebc:	3710      	adds	r7, #16
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}
 8001ec2:	bf00      	nop
 8001ec4:	58024800 	.word	0x58024800

08001ec8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b08c      	sub	sp, #48	; 0x30
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d101      	bne.n	8001eda <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	e39d      	b.n	8002616 <HAL_RCC_OscConfig+0x74e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f003 0301 	and.w	r3, r3, #1
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	f000 8087 	beq.w	8001ff6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ee8:	4b88      	ldr	r3, [pc, #544]	; (800210c <HAL_RCC_OscConfig+0x244>)
 8001eea:	691b      	ldr	r3, [r3, #16]
 8001eec:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001ef0:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001ef2:	4b86      	ldr	r3, [pc, #536]	; (800210c <HAL_RCC_OscConfig+0x244>)
 8001ef4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ef6:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001ef8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001efa:	2b10      	cmp	r3, #16
 8001efc:	d007      	beq.n	8001f0e <HAL_RCC_OscConfig+0x46>
 8001efe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f00:	2b18      	cmp	r3, #24
 8001f02:	d110      	bne.n	8001f26 <HAL_RCC_OscConfig+0x5e>
 8001f04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f06:	f003 0303 	and.w	r3, r3, #3
 8001f0a:	2b02      	cmp	r3, #2
 8001f0c:	d10b      	bne.n	8001f26 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f0e:	4b7f      	ldr	r3, [pc, #508]	; (800210c <HAL_RCC_OscConfig+0x244>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d06c      	beq.n	8001ff4 <HAL_RCC_OscConfig+0x12c>
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d168      	bne.n	8001ff4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001f22:	2301      	movs	r3, #1
 8001f24:	e377      	b.n	8002616 <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f2e:	d106      	bne.n	8001f3e <HAL_RCC_OscConfig+0x76>
 8001f30:	4b76      	ldr	r3, [pc, #472]	; (800210c <HAL_RCC_OscConfig+0x244>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4a75      	ldr	r2, [pc, #468]	; (800210c <HAL_RCC_OscConfig+0x244>)
 8001f36:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f3a:	6013      	str	r3, [r2, #0]
 8001f3c:	e02e      	b.n	8001f9c <HAL_RCC_OscConfig+0xd4>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d10c      	bne.n	8001f60 <HAL_RCC_OscConfig+0x98>
 8001f46:	4b71      	ldr	r3, [pc, #452]	; (800210c <HAL_RCC_OscConfig+0x244>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4a70      	ldr	r2, [pc, #448]	; (800210c <HAL_RCC_OscConfig+0x244>)
 8001f4c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f50:	6013      	str	r3, [r2, #0]
 8001f52:	4b6e      	ldr	r3, [pc, #440]	; (800210c <HAL_RCC_OscConfig+0x244>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	4a6d      	ldr	r2, [pc, #436]	; (800210c <HAL_RCC_OscConfig+0x244>)
 8001f58:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f5c:	6013      	str	r3, [r2, #0]
 8001f5e:	e01d      	b.n	8001f9c <HAL_RCC_OscConfig+0xd4>
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f68:	d10c      	bne.n	8001f84 <HAL_RCC_OscConfig+0xbc>
 8001f6a:	4b68      	ldr	r3, [pc, #416]	; (800210c <HAL_RCC_OscConfig+0x244>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4a67      	ldr	r2, [pc, #412]	; (800210c <HAL_RCC_OscConfig+0x244>)
 8001f70:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f74:	6013      	str	r3, [r2, #0]
 8001f76:	4b65      	ldr	r3, [pc, #404]	; (800210c <HAL_RCC_OscConfig+0x244>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4a64      	ldr	r2, [pc, #400]	; (800210c <HAL_RCC_OscConfig+0x244>)
 8001f7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f80:	6013      	str	r3, [r2, #0]
 8001f82:	e00b      	b.n	8001f9c <HAL_RCC_OscConfig+0xd4>
 8001f84:	4b61      	ldr	r3, [pc, #388]	; (800210c <HAL_RCC_OscConfig+0x244>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4a60      	ldr	r2, [pc, #384]	; (800210c <HAL_RCC_OscConfig+0x244>)
 8001f8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f8e:	6013      	str	r3, [r2, #0]
 8001f90:	4b5e      	ldr	r3, [pc, #376]	; (800210c <HAL_RCC_OscConfig+0x244>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4a5d      	ldr	r2, [pc, #372]	; (800210c <HAL_RCC_OscConfig+0x244>)
 8001f96:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f9a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d013      	beq.n	8001fcc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fa4:	f7ff f856 	bl	8001054 <HAL_GetTick>
 8001fa8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001faa:	e008      	b.n	8001fbe <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001fac:	f7ff f852 	bl	8001054 <HAL_GetTick>
 8001fb0:	4602      	mov	r2, r0
 8001fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb4:	1ad3      	subs	r3, r2, r3
 8001fb6:	2b64      	cmp	r3, #100	; 0x64
 8001fb8:	d901      	bls.n	8001fbe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001fba:	2303      	movs	r3, #3
 8001fbc:	e32b      	b.n	8002616 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001fbe:	4b53      	ldr	r3, [pc, #332]	; (800210c <HAL_RCC_OscConfig+0x244>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d0f0      	beq.n	8001fac <HAL_RCC_OscConfig+0xe4>
 8001fca:	e014      	b.n	8001ff6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fcc:	f7ff f842 	bl	8001054 <HAL_GetTick>
 8001fd0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001fd2:	e008      	b.n	8001fe6 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001fd4:	f7ff f83e 	bl	8001054 <HAL_GetTick>
 8001fd8:	4602      	mov	r2, r0
 8001fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fdc:	1ad3      	subs	r3, r2, r3
 8001fde:	2b64      	cmp	r3, #100	; 0x64
 8001fe0:	d901      	bls.n	8001fe6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001fe2:	2303      	movs	r3, #3
 8001fe4:	e317      	b.n	8002616 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001fe6:	4b49      	ldr	r3, [pc, #292]	; (800210c <HAL_RCC_OscConfig+0x244>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d1f0      	bne.n	8001fd4 <HAL_RCC_OscConfig+0x10c>
 8001ff2:	e000      	b.n	8001ff6 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ff4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f003 0302 	and.w	r3, r3, #2
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	f000 808c 	beq.w	800211c <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002004:	4b41      	ldr	r3, [pc, #260]	; (800210c <HAL_RCC_OscConfig+0x244>)
 8002006:	691b      	ldr	r3, [r3, #16]
 8002008:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800200c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800200e:	4b3f      	ldr	r3, [pc, #252]	; (800210c <HAL_RCC_OscConfig+0x244>)
 8002010:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002012:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002014:	6a3b      	ldr	r3, [r7, #32]
 8002016:	2b00      	cmp	r3, #0
 8002018:	d007      	beq.n	800202a <HAL_RCC_OscConfig+0x162>
 800201a:	6a3b      	ldr	r3, [r7, #32]
 800201c:	2b18      	cmp	r3, #24
 800201e:	d137      	bne.n	8002090 <HAL_RCC_OscConfig+0x1c8>
 8002020:	69fb      	ldr	r3, [r7, #28]
 8002022:	f003 0303 	and.w	r3, r3, #3
 8002026:	2b00      	cmp	r3, #0
 8002028:	d132      	bne.n	8002090 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800202a:	4b38      	ldr	r3, [pc, #224]	; (800210c <HAL_RCC_OscConfig+0x244>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f003 0304 	and.w	r3, r3, #4
 8002032:	2b00      	cmp	r3, #0
 8002034:	d005      	beq.n	8002042 <HAL_RCC_OscConfig+0x17a>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	68db      	ldr	r3, [r3, #12]
 800203a:	2b00      	cmp	r3, #0
 800203c:	d101      	bne.n	8002042 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800203e:	2301      	movs	r3, #1
 8002040:	e2e9      	b.n	8002616 <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002042:	4b32      	ldr	r3, [pc, #200]	; (800210c <HAL_RCC_OscConfig+0x244>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f023 0219 	bic.w	r2, r3, #25
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	68db      	ldr	r3, [r3, #12]
 800204e:	492f      	ldr	r1, [pc, #188]	; (800210c <HAL_RCC_OscConfig+0x244>)
 8002050:	4313      	orrs	r3, r2
 8002052:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002054:	f7fe fffe 	bl	8001054 <HAL_GetTick>
 8002058:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800205a:	e008      	b.n	800206e <HAL_RCC_OscConfig+0x1a6>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800205c:	f7fe fffa 	bl	8001054 <HAL_GetTick>
 8002060:	4602      	mov	r2, r0
 8002062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002064:	1ad3      	subs	r3, r2, r3
 8002066:	2b02      	cmp	r3, #2
 8002068:	d901      	bls.n	800206e <HAL_RCC_OscConfig+0x1a6>
            {
              return HAL_TIMEOUT;
 800206a:	2303      	movs	r3, #3
 800206c:	e2d3      	b.n	8002616 <HAL_RCC_OscConfig+0x74e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800206e:	4b27      	ldr	r3, [pc, #156]	; (800210c <HAL_RCC_OscConfig+0x244>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f003 0304 	and.w	r3, r3, #4
 8002076:	2b00      	cmp	r3, #0
 8002078:	d0f0      	beq.n	800205c <HAL_RCC_OscConfig+0x194>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800207a:	4b24      	ldr	r3, [pc, #144]	; (800210c <HAL_RCC_OscConfig+0x244>)
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	691b      	ldr	r3, [r3, #16]
 8002086:	061b      	lsls	r3, r3, #24
 8002088:	4920      	ldr	r1, [pc, #128]	; (800210c <HAL_RCC_OscConfig+0x244>)
 800208a:	4313      	orrs	r3, r2
 800208c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800208e:	e045      	b.n	800211c <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	68db      	ldr	r3, [r3, #12]
 8002094:	2b00      	cmp	r3, #0
 8002096:	d026      	beq.n	80020e6 <HAL_RCC_OscConfig+0x21e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002098:	4b1c      	ldr	r3, [pc, #112]	; (800210c <HAL_RCC_OscConfig+0x244>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f023 0219 	bic.w	r2, r3, #25
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	68db      	ldr	r3, [r3, #12]
 80020a4:	4919      	ldr	r1, [pc, #100]	; (800210c <HAL_RCC_OscConfig+0x244>)
 80020a6:	4313      	orrs	r3, r2
 80020a8:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020aa:	f7fe ffd3 	bl	8001054 <HAL_GetTick>
 80020ae:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80020b0:	e008      	b.n	80020c4 <HAL_RCC_OscConfig+0x1fc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80020b2:	f7fe ffcf 	bl	8001054 <HAL_GetTick>
 80020b6:	4602      	mov	r2, r0
 80020b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ba:	1ad3      	subs	r3, r2, r3
 80020bc:	2b02      	cmp	r3, #2
 80020be:	d901      	bls.n	80020c4 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80020c0:	2303      	movs	r3, #3
 80020c2:	e2a8      	b.n	8002616 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80020c4:	4b11      	ldr	r3, [pc, #68]	; (800210c <HAL_RCC_OscConfig+0x244>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f003 0304 	and.w	r3, r3, #4
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d0f0      	beq.n	80020b2 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020d0:	4b0e      	ldr	r3, [pc, #56]	; (800210c <HAL_RCC_OscConfig+0x244>)
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	691b      	ldr	r3, [r3, #16]
 80020dc:	061b      	lsls	r3, r3, #24
 80020de:	490b      	ldr	r1, [pc, #44]	; (800210c <HAL_RCC_OscConfig+0x244>)
 80020e0:	4313      	orrs	r3, r2
 80020e2:	604b      	str	r3, [r1, #4]
 80020e4:	e01a      	b.n	800211c <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80020e6:	4b09      	ldr	r3, [pc, #36]	; (800210c <HAL_RCC_OscConfig+0x244>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	4a08      	ldr	r2, [pc, #32]	; (800210c <HAL_RCC_OscConfig+0x244>)
 80020ec:	f023 0301 	bic.w	r3, r3, #1
 80020f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020f2:	f7fe ffaf 	bl	8001054 <HAL_GetTick>
 80020f6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80020f8:	e00a      	b.n	8002110 <HAL_RCC_OscConfig+0x248>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80020fa:	f7fe ffab 	bl	8001054 <HAL_GetTick>
 80020fe:	4602      	mov	r2, r0
 8002100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002102:	1ad3      	subs	r3, r2, r3
 8002104:	2b02      	cmp	r3, #2
 8002106:	d903      	bls.n	8002110 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8002108:	2303      	movs	r3, #3
 800210a:	e284      	b.n	8002616 <HAL_RCC_OscConfig+0x74e>
 800210c:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002110:	4b96      	ldr	r3, [pc, #600]	; (800236c <HAL_RCC_OscConfig+0x4a4>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f003 0304 	and.w	r3, r3, #4
 8002118:	2b00      	cmp	r3, #0
 800211a:	d1ee      	bne.n	80020fa <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f003 0310 	and.w	r3, r3, #16
 8002124:	2b00      	cmp	r3, #0
 8002126:	d06a      	beq.n	80021fe <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002128:	4b90      	ldr	r3, [pc, #576]	; (800236c <HAL_RCC_OscConfig+0x4a4>)
 800212a:	691b      	ldr	r3, [r3, #16]
 800212c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002130:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002132:	4b8e      	ldr	r3, [pc, #568]	; (800236c <HAL_RCC_OscConfig+0x4a4>)
 8002134:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002136:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002138:	69bb      	ldr	r3, [r7, #24]
 800213a:	2b08      	cmp	r3, #8
 800213c:	d007      	beq.n	800214e <HAL_RCC_OscConfig+0x286>
 800213e:	69bb      	ldr	r3, [r7, #24]
 8002140:	2b18      	cmp	r3, #24
 8002142:	d11b      	bne.n	800217c <HAL_RCC_OscConfig+0x2b4>
 8002144:	697b      	ldr	r3, [r7, #20]
 8002146:	f003 0303 	and.w	r3, r3, #3
 800214a:	2b01      	cmp	r3, #1
 800214c:	d116      	bne.n	800217c <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800214e:	4b87      	ldr	r3, [pc, #540]	; (800236c <HAL_RCC_OscConfig+0x4a4>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002156:	2b00      	cmp	r3, #0
 8002158:	d005      	beq.n	8002166 <HAL_RCC_OscConfig+0x29e>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	69db      	ldr	r3, [r3, #28]
 800215e:	2b80      	cmp	r3, #128	; 0x80
 8002160:	d001      	beq.n	8002166 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8002162:	2301      	movs	r3, #1
 8002164:	e257      	b.n	8002616 <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002166:	4b81      	ldr	r3, [pc, #516]	; (800236c <HAL_RCC_OscConfig+0x4a4>)
 8002168:	68db      	ldr	r3, [r3, #12]
 800216a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6a1b      	ldr	r3, [r3, #32]
 8002172:	061b      	lsls	r3, r3, #24
 8002174:	497d      	ldr	r1, [pc, #500]	; (800236c <HAL_RCC_OscConfig+0x4a4>)
 8002176:	4313      	orrs	r3, r2
 8002178:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800217a:	e040      	b.n	80021fe <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	69db      	ldr	r3, [r3, #28]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d023      	beq.n	80021cc <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002184:	4b79      	ldr	r3, [pc, #484]	; (800236c <HAL_RCC_OscConfig+0x4a4>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a78      	ldr	r2, [pc, #480]	; (800236c <HAL_RCC_OscConfig+0x4a4>)
 800218a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800218e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002190:	f7fe ff60 	bl	8001054 <HAL_GetTick>
 8002194:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002196:	e008      	b.n	80021aa <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002198:	f7fe ff5c 	bl	8001054 <HAL_GetTick>
 800219c:	4602      	mov	r2, r0
 800219e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a0:	1ad3      	subs	r3, r2, r3
 80021a2:	2b02      	cmp	r3, #2
 80021a4:	d901      	bls.n	80021aa <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80021a6:	2303      	movs	r3, #3
 80021a8:	e235      	b.n	8002616 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80021aa:	4b70      	ldr	r3, [pc, #448]	; (800236c <HAL_RCC_OscConfig+0x4a4>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d0f0      	beq.n	8002198 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80021b6:	4b6d      	ldr	r3, [pc, #436]	; (800236c <HAL_RCC_OscConfig+0x4a4>)
 80021b8:	68db      	ldr	r3, [r3, #12]
 80021ba:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6a1b      	ldr	r3, [r3, #32]
 80021c2:	061b      	lsls	r3, r3, #24
 80021c4:	4969      	ldr	r1, [pc, #420]	; (800236c <HAL_RCC_OscConfig+0x4a4>)
 80021c6:	4313      	orrs	r3, r2
 80021c8:	60cb      	str	r3, [r1, #12]
 80021ca:	e018      	b.n	80021fe <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80021cc:	4b67      	ldr	r3, [pc, #412]	; (800236c <HAL_RCC_OscConfig+0x4a4>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4a66      	ldr	r2, [pc, #408]	; (800236c <HAL_RCC_OscConfig+0x4a4>)
 80021d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80021d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021d8:	f7fe ff3c 	bl	8001054 <HAL_GetTick>
 80021dc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80021de:	e008      	b.n	80021f2 <HAL_RCC_OscConfig+0x32a>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80021e0:	f7fe ff38 	bl	8001054 <HAL_GetTick>
 80021e4:	4602      	mov	r2, r0
 80021e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021e8:	1ad3      	subs	r3, r2, r3
 80021ea:	2b02      	cmp	r3, #2
 80021ec:	d901      	bls.n	80021f2 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 80021ee:	2303      	movs	r3, #3
 80021f0:	e211      	b.n	8002616 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80021f2:	4b5e      	ldr	r3, [pc, #376]	; (800236c <HAL_RCC_OscConfig+0x4a4>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d1f0      	bne.n	80021e0 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f003 0308 	and.w	r3, r3, #8
 8002206:	2b00      	cmp	r3, #0
 8002208:	d036      	beq.n	8002278 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	695b      	ldr	r3, [r3, #20]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d019      	beq.n	8002246 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002212:	4b56      	ldr	r3, [pc, #344]	; (800236c <HAL_RCC_OscConfig+0x4a4>)
 8002214:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002216:	4a55      	ldr	r2, [pc, #340]	; (800236c <HAL_RCC_OscConfig+0x4a4>)
 8002218:	f043 0301 	orr.w	r3, r3, #1
 800221c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800221e:	f7fe ff19 	bl	8001054 <HAL_GetTick>
 8002222:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002224:	e008      	b.n	8002238 <HAL_RCC_OscConfig+0x370>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002226:	f7fe ff15 	bl	8001054 <HAL_GetTick>
 800222a:	4602      	mov	r2, r0
 800222c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800222e:	1ad3      	subs	r3, r2, r3
 8002230:	2b02      	cmp	r3, #2
 8002232:	d901      	bls.n	8002238 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8002234:	2303      	movs	r3, #3
 8002236:	e1ee      	b.n	8002616 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002238:	4b4c      	ldr	r3, [pc, #304]	; (800236c <HAL_RCC_OscConfig+0x4a4>)
 800223a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800223c:	f003 0302 	and.w	r3, r3, #2
 8002240:	2b00      	cmp	r3, #0
 8002242:	d0f0      	beq.n	8002226 <HAL_RCC_OscConfig+0x35e>
 8002244:	e018      	b.n	8002278 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002246:	4b49      	ldr	r3, [pc, #292]	; (800236c <HAL_RCC_OscConfig+0x4a4>)
 8002248:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800224a:	4a48      	ldr	r2, [pc, #288]	; (800236c <HAL_RCC_OscConfig+0x4a4>)
 800224c:	f023 0301 	bic.w	r3, r3, #1
 8002250:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002252:	f7fe feff 	bl	8001054 <HAL_GetTick>
 8002256:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002258:	e008      	b.n	800226c <HAL_RCC_OscConfig+0x3a4>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800225a:	f7fe fefb 	bl	8001054 <HAL_GetTick>
 800225e:	4602      	mov	r2, r0
 8002260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002262:	1ad3      	subs	r3, r2, r3
 8002264:	2b02      	cmp	r3, #2
 8002266:	d901      	bls.n	800226c <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8002268:	2303      	movs	r3, #3
 800226a:	e1d4      	b.n	8002616 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800226c:	4b3f      	ldr	r3, [pc, #252]	; (800236c <HAL_RCC_OscConfig+0x4a4>)
 800226e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002270:	f003 0302 	and.w	r3, r3, #2
 8002274:	2b00      	cmp	r3, #0
 8002276:	d1f0      	bne.n	800225a <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f003 0320 	and.w	r3, r3, #32
 8002280:	2b00      	cmp	r3, #0
 8002282:	d036      	beq.n	80022f2 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	699b      	ldr	r3, [r3, #24]
 8002288:	2b00      	cmp	r3, #0
 800228a:	d019      	beq.n	80022c0 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800228c:	4b37      	ldr	r3, [pc, #220]	; (800236c <HAL_RCC_OscConfig+0x4a4>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4a36      	ldr	r2, [pc, #216]	; (800236c <HAL_RCC_OscConfig+0x4a4>)
 8002292:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002296:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002298:	f7fe fedc 	bl	8001054 <HAL_GetTick>
 800229c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800229e:	e008      	b.n	80022b2 <HAL_RCC_OscConfig+0x3ea>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80022a0:	f7fe fed8 	bl	8001054 <HAL_GetTick>
 80022a4:	4602      	mov	r2, r0
 80022a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022a8:	1ad3      	subs	r3, r2, r3
 80022aa:	2b02      	cmp	r3, #2
 80022ac:	d901      	bls.n	80022b2 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 80022ae:	2303      	movs	r3, #3
 80022b0:	e1b1      	b.n	8002616 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80022b2:	4b2e      	ldr	r3, [pc, #184]	; (800236c <HAL_RCC_OscConfig+0x4a4>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d0f0      	beq.n	80022a0 <HAL_RCC_OscConfig+0x3d8>
 80022be:	e018      	b.n	80022f2 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80022c0:	4b2a      	ldr	r3, [pc, #168]	; (800236c <HAL_RCC_OscConfig+0x4a4>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4a29      	ldr	r2, [pc, #164]	; (800236c <HAL_RCC_OscConfig+0x4a4>)
 80022c6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80022ca:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80022cc:	f7fe fec2 	bl	8001054 <HAL_GetTick>
 80022d0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80022d2:	e008      	b.n	80022e6 <HAL_RCC_OscConfig+0x41e>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80022d4:	f7fe febe 	bl	8001054 <HAL_GetTick>
 80022d8:	4602      	mov	r2, r0
 80022da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022dc:	1ad3      	subs	r3, r2, r3
 80022de:	2b02      	cmp	r3, #2
 80022e0:	d901      	bls.n	80022e6 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 80022e2:	2303      	movs	r3, #3
 80022e4:	e197      	b.n	8002616 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80022e6:	4b21      	ldr	r3, [pc, #132]	; (800236c <HAL_RCC_OscConfig+0x4a4>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d1f0      	bne.n	80022d4 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f003 0304 	and.w	r3, r3, #4
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	f000 8086 	beq.w	800240c <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002300:	4b1b      	ldr	r3, [pc, #108]	; (8002370 <HAL_RCC_OscConfig+0x4a8>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4a1a      	ldr	r2, [pc, #104]	; (8002370 <HAL_RCC_OscConfig+0x4a8>)
 8002306:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800230a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800230c:	f7fe fea2 	bl	8001054 <HAL_GetTick>
 8002310:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002312:	e008      	b.n	8002326 <HAL_RCC_OscConfig+0x45e>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002314:	f7fe fe9e 	bl	8001054 <HAL_GetTick>
 8002318:	4602      	mov	r2, r0
 800231a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800231c:	1ad3      	subs	r3, r2, r3
 800231e:	2b64      	cmp	r3, #100	; 0x64
 8002320:	d901      	bls.n	8002326 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8002322:	2303      	movs	r3, #3
 8002324:	e177      	b.n	8002616 <HAL_RCC_OscConfig+0x74e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002326:	4b12      	ldr	r3, [pc, #72]	; (8002370 <HAL_RCC_OscConfig+0x4a8>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800232e:	2b00      	cmp	r3, #0
 8002330:	d0f0      	beq.n	8002314 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	689b      	ldr	r3, [r3, #8]
 8002336:	2b01      	cmp	r3, #1
 8002338:	d106      	bne.n	8002348 <HAL_RCC_OscConfig+0x480>
 800233a:	4b0c      	ldr	r3, [pc, #48]	; (800236c <HAL_RCC_OscConfig+0x4a4>)
 800233c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800233e:	4a0b      	ldr	r2, [pc, #44]	; (800236c <HAL_RCC_OscConfig+0x4a4>)
 8002340:	f043 0301 	orr.w	r3, r3, #1
 8002344:	6713      	str	r3, [r2, #112]	; 0x70
 8002346:	e032      	b.n	80023ae <HAL_RCC_OscConfig+0x4e6>
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	689b      	ldr	r3, [r3, #8]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d111      	bne.n	8002374 <HAL_RCC_OscConfig+0x4ac>
 8002350:	4b06      	ldr	r3, [pc, #24]	; (800236c <HAL_RCC_OscConfig+0x4a4>)
 8002352:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002354:	4a05      	ldr	r2, [pc, #20]	; (800236c <HAL_RCC_OscConfig+0x4a4>)
 8002356:	f023 0301 	bic.w	r3, r3, #1
 800235a:	6713      	str	r3, [r2, #112]	; 0x70
 800235c:	4b03      	ldr	r3, [pc, #12]	; (800236c <HAL_RCC_OscConfig+0x4a4>)
 800235e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002360:	4a02      	ldr	r2, [pc, #8]	; (800236c <HAL_RCC_OscConfig+0x4a4>)
 8002362:	f023 0304 	bic.w	r3, r3, #4
 8002366:	6713      	str	r3, [r2, #112]	; 0x70
 8002368:	e021      	b.n	80023ae <HAL_RCC_OscConfig+0x4e6>
 800236a:	bf00      	nop
 800236c:	58024400 	.word	0x58024400
 8002370:	58024800 	.word	0x58024800
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	689b      	ldr	r3, [r3, #8]
 8002378:	2b05      	cmp	r3, #5
 800237a:	d10c      	bne.n	8002396 <HAL_RCC_OscConfig+0x4ce>
 800237c:	4b83      	ldr	r3, [pc, #524]	; (800258c <HAL_RCC_OscConfig+0x6c4>)
 800237e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002380:	4a82      	ldr	r2, [pc, #520]	; (800258c <HAL_RCC_OscConfig+0x6c4>)
 8002382:	f043 0304 	orr.w	r3, r3, #4
 8002386:	6713      	str	r3, [r2, #112]	; 0x70
 8002388:	4b80      	ldr	r3, [pc, #512]	; (800258c <HAL_RCC_OscConfig+0x6c4>)
 800238a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800238c:	4a7f      	ldr	r2, [pc, #508]	; (800258c <HAL_RCC_OscConfig+0x6c4>)
 800238e:	f043 0301 	orr.w	r3, r3, #1
 8002392:	6713      	str	r3, [r2, #112]	; 0x70
 8002394:	e00b      	b.n	80023ae <HAL_RCC_OscConfig+0x4e6>
 8002396:	4b7d      	ldr	r3, [pc, #500]	; (800258c <HAL_RCC_OscConfig+0x6c4>)
 8002398:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800239a:	4a7c      	ldr	r2, [pc, #496]	; (800258c <HAL_RCC_OscConfig+0x6c4>)
 800239c:	f023 0301 	bic.w	r3, r3, #1
 80023a0:	6713      	str	r3, [r2, #112]	; 0x70
 80023a2:	4b7a      	ldr	r3, [pc, #488]	; (800258c <HAL_RCC_OscConfig+0x6c4>)
 80023a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023a6:	4a79      	ldr	r2, [pc, #484]	; (800258c <HAL_RCC_OscConfig+0x6c4>)
 80023a8:	f023 0304 	bic.w	r3, r3, #4
 80023ac:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	689b      	ldr	r3, [r3, #8]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d015      	beq.n	80023e2 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023b6:	f7fe fe4d 	bl	8001054 <HAL_GetTick>
 80023ba:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80023bc:	e00a      	b.n	80023d4 <HAL_RCC_OscConfig+0x50c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023be:	f7fe fe49 	bl	8001054 <HAL_GetTick>
 80023c2:	4602      	mov	r2, r0
 80023c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023c6:	1ad3      	subs	r3, r2, r3
 80023c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80023cc:	4293      	cmp	r3, r2
 80023ce:	d901      	bls.n	80023d4 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 80023d0:	2303      	movs	r3, #3
 80023d2:	e120      	b.n	8002616 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80023d4:	4b6d      	ldr	r3, [pc, #436]	; (800258c <HAL_RCC_OscConfig+0x6c4>)
 80023d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023d8:	f003 0302 	and.w	r3, r3, #2
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d0ee      	beq.n	80023be <HAL_RCC_OscConfig+0x4f6>
 80023e0:	e014      	b.n	800240c <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023e2:	f7fe fe37 	bl	8001054 <HAL_GetTick>
 80023e6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80023e8:	e00a      	b.n	8002400 <HAL_RCC_OscConfig+0x538>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023ea:	f7fe fe33 	bl	8001054 <HAL_GetTick>
 80023ee:	4602      	mov	r2, r0
 80023f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023f2:	1ad3      	subs	r3, r2, r3
 80023f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80023f8:	4293      	cmp	r3, r2
 80023fa:	d901      	bls.n	8002400 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 80023fc:	2303      	movs	r3, #3
 80023fe:	e10a      	b.n	8002616 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002400:	4b62      	ldr	r3, [pc, #392]	; (800258c <HAL_RCC_OscConfig+0x6c4>)
 8002402:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002404:	f003 0302 	and.w	r3, r3, #2
 8002408:	2b00      	cmp	r3, #0
 800240a:	d1ee      	bne.n	80023ea <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002410:	2b00      	cmp	r3, #0
 8002412:	f000 80ff 	beq.w	8002614 <HAL_RCC_OscConfig+0x74c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002416:	4b5d      	ldr	r3, [pc, #372]	; (800258c <HAL_RCC_OscConfig+0x6c4>)
 8002418:	691b      	ldr	r3, [r3, #16]
 800241a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800241e:	2b18      	cmp	r3, #24
 8002420:	f000 80ba 	beq.w	8002598 <HAL_RCC_OscConfig+0x6d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002428:	2b02      	cmp	r3, #2
 800242a:	f040 8095 	bne.w	8002558 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800242e:	4b57      	ldr	r3, [pc, #348]	; (800258c <HAL_RCC_OscConfig+0x6c4>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4a56      	ldr	r2, [pc, #344]	; (800258c <HAL_RCC_OscConfig+0x6c4>)
 8002434:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002438:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800243a:	f7fe fe0b 	bl	8001054 <HAL_GetTick>
 800243e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002440:	e008      	b.n	8002454 <HAL_RCC_OscConfig+0x58c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002442:	f7fe fe07 	bl	8001054 <HAL_GetTick>
 8002446:	4602      	mov	r2, r0
 8002448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800244a:	1ad3      	subs	r3, r2, r3
 800244c:	2b02      	cmp	r3, #2
 800244e:	d901      	bls.n	8002454 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8002450:	2303      	movs	r3, #3
 8002452:	e0e0      	b.n	8002616 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002454:	4b4d      	ldr	r3, [pc, #308]	; (800258c <HAL_RCC_OscConfig+0x6c4>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800245c:	2b00      	cmp	r3, #0
 800245e:	d1f0      	bne.n	8002442 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002460:	4b4a      	ldr	r3, [pc, #296]	; (800258c <HAL_RCC_OscConfig+0x6c4>)
 8002462:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002464:	4b4a      	ldr	r3, [pc, #296]	; (8002590 <HAL_RCC_OscConfig+0x6c8>)
 8002466:	4013      	ands	r3, r2
 8002468:	687a      	ldr	r2, [r7, #4]
 800246a:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800246c:	687a      	ldr	r2, [r7, #4]
 800246e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002470:	0112      	lsls	r2, r2, #4
 8002472:	430a      	orrs	r2, r1
 8002474:	4945      	ldr	r1, [pc, #276]	; (800258c <HAL_RCC_OscConfig+0x6c4>)
 8002476:	4313      	orrs	r3, r2
 8002478:	628b      	str	r3, [r1, #40]	; 0x28
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800247e:	3b01      	subs	r3, #1
 8002480:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002488:	3b01      	subs	r3, #1
 800248a:	025b      	lsls	r3, r3, #9
 800248c:	b29b      	uxth	r3, r3
 800248e:	431a      	orrs	r2, r3
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002494:	3b01      	subs	r3, #1
 8002496:	041b      	lsls	r3, r3, #16
 8002498:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800249c:	431a      	orrs	r2, r3
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024a2:	3b01      	subs	r3, #1
 80024a4:	061b      	lsls	r3, r3, #24
 80024a6:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80024aa:	4938      	ldr	r1, [pc, #224]	; (800258c <HAL_RCC_OscConfig+0x6c4>)
 80024ac:	4313      	orrs	r3, r2
 80024ae:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80024b0:	4b36      	ldr	r3, [pc, #216]	; (800258c <HAL_RCC_OscConfig+0x6c4>)
 80024b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024b4:	4a35      	ldr	r2, [pc, #212]	; (800258c <HAL_RCC_OscConfig+0x6c4>)
 80024b6:	f023 0301 	bic.w	r3, r3, #1
 80024ba:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80024bc:	4b33      	ldr	r3, [pc, #204]	; (800258c <HAL_RCC_OscConfig+0x6c4>)
 80024be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80024c0:	4b34      	ldr	r3, [pc, #208]	; (8002594 <HAL_RCC_OscConfig+0x6cc>)
 80024c2:	4013      	ands	r3, r2
 80024c4:	687a      	ldr	r2, [r7, #4]
 80024c6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80024c8:	00d2      	lsls	r2, r2, #3
 80024ca:	4930      	ldr	r1, [pc, #192]	; (800258c <HAL_RCC_OscConfig+0x6c4>)
 80024cc:	4313      	orrs	r3, r2
 80024ce:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80024d0:	4b2e      	ldr	r3, [pc, #184]	; (800258c <HAL_RCC_OscConfig+0x6c4>)
 80024d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024d4:	f023 020c 	bic.w	r2, r3, #12
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024dc:	492b      	ldr	r1, [pc, #172]	; (800258c <HAL_RCC_OscConfig+0x6c4>)
 80024de:	4313      	orrs	r3, r2
 80024e0:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80024e2:	4b2a      	ldr	r3, [pc, #168]	; (800258c <HAL_RCC_OscConfig+0x6c4>)
 80024e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024e6:	f023 0202 	bic.w	r2, r3, #2
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024ee:	4927      	ldr	r1, [pc, #156]	; (800258c <HAL_RCC_OscConfig+0x6c4>)
 80024f0:	4313      	orrs	r3, r2
 80024f2:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80024f4:	4b25      	ldr	r3, [pc, #148]	; (800258c <HAL_RCC_OscConfig+0x6c4>)
 80024f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024f8:	4a24      	ldr	r2, [pc, #144]	; (800258c <HAL_RCC_OscConfig+0x6c4>)
 80024fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024fe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002500:	4b22      	ldr	r3, [pc, #136]	; (800258c <HAL_RCC_OscConfig+0x6c4>)
 8002502:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002504:	4a21      	ldr	r2, [pc, #132]	; (800258c <HAL_RCC_OscConfig+0x6c4>)
 8002506:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800250a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800250c:	4b1f      	ldr	r3, [pc, #124]	; (800258c <HAL_RCC_OscConfig+0x6c4>)
 800250e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002510:	4a1e      	ldr	r2, [pc, #120]	; (800258c <HAL_RCC_OscConfig+0x6c4>)
 8002512:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002516:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8002518:	4b1c      	ldr	r3, [pc, #112]	; (800258c <HAL_RCC_OscConfig+0x6c4>)
 800251a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800251c:	4a1b      	ldr	r2, [pc, #108]	; (800258c <HAL_RCC_OscConfig+0x6c4>)
 800251e:	f043 0301 	orr.w	r3, r3, #1
 8002522:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002524:	4b19      	ldr	r3, [pc, #100]	; (800258c <HAL_RCC_OscConfig+0x6c4>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4a18      	ldr	r2, [pc, #96]	; (800258c <HAL_RCC_OscConfig+0x6c4>)
 800252a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800252e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002530:	f7fe fd90 	bl	8001054 <HAL_GetTick>
 8002534:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002536:	e008      	b.n	800254a <HAL_RCC_OscConfig+0x682>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002538:	f7fe fd8c 	bl	8001054 <HAL_GetTick>
 800253c:	4602      	mov	r2, r0
 800253e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002540:	1ad3      	subs	r3, r2, r3
 8002542:	2b02      	cmp	r3, #2
 8002544:	d901      	bls.n	800254a <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8002546:	2303      	movs	r3, #3
 8002548:	e065      	b.n	8002616 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800254a:	4b10      	ldr	r3, [pc, #64]	; (800258c <HAL_RCC_OscConfig+0x6c4>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002552:	2b00      	cmp	r3, #0
 8002554:	d0f0      	beq.n	8002538 <HAL_RCC_OscConfig+0x670>
 8002556:	e05d      	b.n	8002614 <HAL_RCC_OscConfig+0x74c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002558:	4b0c      	ldr	r3, [pc, #48]	; (800258c <HAL_RCC_OscConfig+0x6c4>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4a0b      	ldr	r2, [pc, #44]	; (800258c <HAL_RCC_OscConfig+0x6c4>)
 800255e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002562:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002564:	f7fe fd76 	bl	8001054 <HAL_GetTick>
 8002568:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800256a:	e008      	b.n	800257e <HAL_RCC_OscConfig+0x6b6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800256c:	f7fe fd72 	bl	8001054 <HAL_GetTick>
 8002570:	4602      	mov	r2, r0
 8002572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002574:	1ad3      	subs	r3, r2, r3
 8002576:	2b02      	cmp	r3, #2
 8002578:	d901      	bls.n	800257e <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 800257a:	2303      	movs	r3, #3
 800257c:	e04b      	b.n	8002616 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800257e:	4b03      	ldr	r3, [pc, #12]	; (800258c <HAL_RCC_OscConfig+0x6c4>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002586:	2b00      	cmp	r3, #0
 8002588:	d1f0      	bne.n	800256c <HAL_RCC_OscConfig+0x6a4>
 800258a:	e043      	b.n	8002614 <HAL_RCC_OscConfig+0x74c>
 800258c:	58024400 	.word	0x58024400
 8002590:	fffffc0c 	.word	0xfffffc0c
 8002594:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002598:	4b21      	ldr	r3, [pc, #132]	; (8002620 <HAL_RCC_OscConfig+0x758>)
 800259a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800259c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800259e:	4b20      	ldr	r3, [pc, #128]	; (8002620 <HAL_RCC_OscConfig+0x758>)
 80025a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025a2:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025a8:	2b01      	cmp	r3, #1
 80025aa:	d031      	beq.n	8002610 <HAL_RCC_OscConfig+0x748>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025ac:	693b      	ldr	r3, [r7, #16]
 80025ae:	f003 0203 	and.w	r2, r3, #3
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80025b6:	429a      	cmp	r2, r3
 80025b8:	d12a      	bne.n	8002610 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80025ba:	693b      	ldr	r3, [r7, #16]
 80025bc:	091b      	lsrs	r3, r3, #4
 80025be:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025c6:	429a      	cmp	r2, r3
 80025c8:	d122      	bne.n	8002610 <HAL_RCC_OscConfig+0x748>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025d4:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80025d6:	429a      	cmp	r2, r3
 80025d8:	d11a      	bne.n	8002610 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	0a5b      	lsrs	r3, r3, #9
 80025de:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025e6:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80025e8:	429a      	cmp	r2, r3
 80025ea:	d111      	bne.n	8002610 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	0c1b      	lsrs	r3, r3, #16
 80025f0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025f8:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80025fa:	429a      	cmp	r2, r3
 80025fc:	d108      	bne.n	8002610 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	0e1b      	lsrs	r3, r3, #24
 8002602:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800260a:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800260c:	429a      	cmp	r2, r3
 800260e:	d001      	beq.n	8002614 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8002610:	2301      	movs	r3, #1
 8002612:	e000      	b.n	8002616 <HAL_RCC_OscConfig+0x74e>
      }
    }
  }
  return HAL_OK;
 8002614:	2300      	movs	r3, #0
}
 8002616:	4618      	mov	r0, r3
 8002618:	3730      	adds	r7, #48	; 0x30
 800261a:	46bd      	mov	sp, r7
 800261c:	bd80      	pop	{r7, pc}
 800261e:	bf00      	nop
 8002620:	58024400 	.word	0x58024400

08002624 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b086      	sub	sp, #24
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
 800262c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2b00      	cmp	r3, #0
 8002632:	d101      	bne.n	8002638 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002634:	2301      	movs	r3, #1
 8002636:	e19c      	b.n	8002972 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002638:	4b8a      	ldr	r3, [pc, #552]	; (8002864 <HAL_RCC_ClockConfig+0x240>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f003 030f 	and.w	r3, r3, #15
 8002640:	683a      	ldr	r2, [r7, #0]
 8002642:	429a      	cmp	r2, r3
 8002644:	d910      	bls.n	8002668 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002646:	4b87      	ldr	r3, [pc, #540]	; (8002864 <HAL_RCC_ClockConfig+0x240>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f023 020f 	bic.w	r2, r3, #15
 800264e:	4985      	ldr	r1, [pc, #532]	; (8002864 <HAL_RCC_ClockConfig+0x240>)
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	4313      	orrs	r3, r2
 8002654:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002656:	4b83      	ldr	r3, [pc, #524]	; (8002864 <HAL_RCC_ClockConfig+0x240>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f003 030f 	and.w	r3, r3, #15
 800265e:	683a      	ldr	r2, [r7, #0]
 8002660:	429a      	cmp	r2, r3
 8002662:	d001      	beq.n	8002668 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002664:	2301      	movs	r3, #1
 8002666:	e184      	b.n	8002972 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f003 0304 	and.w	r3, r3, #4
 8002670:	2b00      	cmp	r3, #0
 8002672:	d010      	beq.n	8002696 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	691a      	ldr	r2, [r3, #16]
 8002678:	4b7b      	ldr	r3, [pc, #492]	; (8002868 <HAL_RCC_ClockConfig+0x244>)
 800267a:	699b      	ldr	r3, [r3, #24]
 800267c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002680:	429a      	cmp	r2, r3
 8002682:	d908      	bls.n	8002696 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002684:	4b78      	ldr	r3, [pc, #480]	; (8002868 <HAL_RCC_ClockConfig+0x244>)
 8002686:	699b      	ldr	r3, [r3, #24]
 8002688:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	691b      	ldr	r3, [r3, #16]
 8002690:	4975      	ldr	r1, [pc, #468]	; (8002868 <HAL_RCC_ClockConfig+0x244>)
 8002692:	4313      	orrs	r3, r2
 8002694:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f003 0308 	and.w	r3, r3, #8
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d010      	beq.n	80026c4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	695a      	ldr	r2, [r3, #20]
 80026a6:	4b70      	ldr	r3, [pc, #448]	; (8002868 <HAL_RCC_ClockConfig+0x244>)
 80026a8:	69db      	ldr	r3, [r3, #28]
 80026aa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80026ae:	429a      	cmp	r2, r3
 80026b0:	d908      	bls.n	80026c4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80026b2:	4b6d      	ldr	r3, [pc, #436]	; (8002868 <HAL_RCC_ClockConfig+0x244>)
 80026b4:	69db      	ldr	r3, [r3, #28]
 80026b6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	695b      	ldr	r3, [r3, #20]
 80026be:	496a      	ldr	r1, [pc, #424]	; (8002868 <HAL_RCC_ClockConfig+0x244>)
 80026c0:	4313      	orrs	r3, r2
 80026c2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f003 0310 	and.w	r3, r3, #16
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d010      	beq.n	80026f2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	699a      	ldr	r2, [r3, #24]
 80026d4:	4b64      	ldr	r3, [pc, #400]	; (8002868 <HAL_RCC_ClockConfig+0x244>)
 80026d6:	69db      	ldr	r3, [r3, #28]
 80026d8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80026dc:	429a      	cmp	r2, r3
 80026de:	d908      	bls.n	80026f2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80026e0:	4b61      	ldr	r3, [pc, #388]	; (8002868 <HAL_RCC_ClockConfig+0x244>)
 80026e2:	69db      	ldr	r3, [r3, #28]
 80026e4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	699b      	ldr	r3, [r3, #24]
 80026ec:	495e      	ldr	r1, [pc, #376]	; (8002868 <HAL_RCC_ClockConfig+0x244>)
 80026ee:	4313      	orrs	r3, r2
 80026f0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f003 0320 	and.w	r3, r3, #32
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d010      	beq.n	8002720 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	69da      	ldr	r2, [r3, #28]
 8002702:	4b59      	ldr	r3, [pc, #356]	; (8002868 <HAL_RCC_ClockConfig+0x244>)
 8002704:	6a1b      	ldr	r3, [r3, #32]
 8002706:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800270a:	429a      	cmp	r2, r3
 800270c:	d908      	bls.n	8002720 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800270e:	4b56      	ldr	r3, [pc, #344]	; (8002868 <HAL_RCC_ClockConfig+0x244>)
 8002710:	6a1b      	ldr	r3, [r3, #32]
 8002712:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	69db      	ldr	r3, [r3, #28]
 800271a:	4953      	ldr	r1, [pc, #332]	; (8002868 <HAL_RCC_ClockConfig+0x244>)
 800271c:	4313      	orrs	r3, r2
 800271e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f003 0302 	and.w	r3, r3, #2
 8002728:	2b00      	cmp	r3, #0
 800272a:	d010      	beq.n	800274e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	68da      	ldr	r2, [r3, #12]
 8002730:	4b4d      	ldr	r3, [pc, #308]	; (8002868 <HAL_RCC_ClockConfig+0x244>)
 8002732:	699b      	ldr	r3, [r3, #24]
 8002734:	f003 030f 	and.w	r3, r3, #15
 8002738:	429a      	cmp	r2, r3
 800273a:	d908      	bls.n	800274e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800273c:	4b4a      	ldr	r3, [pc, #296]	; (8002868 <HAL_RCC_ClockConfig+0x244>)
 800273e:	699b      	ldr	r3, [r3, #24]
 8002740:	f023 020f 	bic.w	r2, r3, #15
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	68db      	ldr	r3, [r3, #12]
 8002748:	4947      	ldr	r1, [pc, #284]	; (8002868 <HAL_RCC_ClockConfig+0x244>)
 800274a:	4313      	orrs	r3, r2
 800274c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f003 0301 	and.w	r3, r3, #1
 8002756:	2b00      	cmp	r3, #0
 8002758:	d055      	beq.n	8002806 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800275a:	4b43      	ldr	r3, [pc, #268]	; (8002868 <HAL_RCC_ClockConfig+0x244>)
 800275c:	699b      	ldr	r3, [r3, #24]
 800275e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	689b      	ldr	r3, [r3, #8]
 8002766:	4940      	ldr	r1, [pc, #256]	; (8002868 <HAL_RCC_ClockConfig+0x244>)
 8002768:	4313      	orrs	r3, r2
 800276a:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	2b02      	cmp	r3, #2
 8002772:	d107      	bne.n	8002784 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002774:	4b3c      	ldr	r3, [pc, #240]	; (8002868 <HAL_RCC_ClockConfig+0x244>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800277c:	2b00      	cmp	r3, #0
 800277e:	d121      	bne.n	80027c4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002780:	2301      	movs	r3, #1
 8002782:	e0f6      	b.n	8002972 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	2b03      	cmp	r3, #3
 800278a:	d107      	bne.n	800279c <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800278c:	4b36      	ldr	r3, [pc, #216]	; (8002868 <HAL_RCC_ClockConfig+0x244>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002794:	2b00      	cmp	r3, #0
 8002796:	d115      	bne.n	80027c4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002798:	2301      	movs	r3, #1
 800279a:	e0ea      	b.n	8002972 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	2b01      	cmp	r3, #1
 80027a2:	d107      	bne.n	80027b4 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80027a4:	4b30      	ldr	r3, [pc, #192]	; (8002868 <HAL_RCC_ClockConfig+0x244>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d109      	bne.n	80027c4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80027b0:	2301      	movs	r3, #1
 80027b2:	e0de      	b.n	8002972 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80027b4:	4b2c      	ldr	r3, [pc, #176]	; (8002868 <HAL_RCC_ClockConfig+0x244>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f003 0304 	and.w	r3, r3, #4
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d101      	bne.n	80027c4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80027c0:	2301      	movs	r3, #1
 80027c2:	e0d6      	b.n	8002972 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80027c4:	4b28      	ldr	r3, [pc, #160]	; (8002868 <HAL_RCC_ClockConfig+0x244>)
 80027c6:	691b      	ldr	r3, [r3, #16]
 80027c8:	f023 0207 	bic.w	r2, r3, #7
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	4925      	ldr	r1, [pc, #148]	; (8002868 <HAL_RCC_ClockConfig+0x244>)
 80027d2:	4313      	orrs	r3, r2
 80027d4:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027d6:	f7fe fc3d 	bl	8001054 <HAL_GetTick>
 80027da:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027dc:	e00a      	b.n	80027f4 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027de:	f7fe fc39 	bl	8001054 <HAL_GetTick>
 80027e2:	4602      	mov	r2, r0
 80027e4:	697b      	ldr	r3, [r7, #20]
 80027e6:	1ad3      	subs	r3, r2, r3
 80027e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80027ec:	4293      	cmp	r3, r2
 80027ee:	d901      	bls.n	80027f4 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80027f0:	2303      	movs	r3, #3
 80027f2:	e0be      	b.n	8002972 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027f4:	4b1c      	ldr	r3, [pc, #112]	; (8002868 <HAL_RCC_ClockConfig+0x244>)
 80027f6:	691b      	ldr	r3, [r3, #16]
 80027f8:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	00db      	lsls	r3, r3, #3
 8002802:	429a      	cmp	r2, r3
 8002804:	d1eb      	bne.n	80027de <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f003 0302 	and.w	r3, r3, #2
 800280e:	2b00      	cmp	r3, #0
 8002810:	d010      	beq.n	8002834 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	68da      	ldr	r2, [r3, #12]
 8002816:	4b14      	ldr	r3, [pc, #80]	; (8002868 <HAL_RCC_ClockConfig+0x244>)
 8002818:	699b      	ldr	r3, [r3, #24]
 800281a:	f003 030f 	and.w	r3, r3, #15
 800281e:	429a      	cmp	r2, r3
 8002820:	d208      	bcs.n	8002834 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002822:	4b11      	ldr	r3, [pc, #68]	; (8002868 <HAL_RCC_ClockConfig+0x244>)
 8002824:	699b      	ldr	r3, [r3, #24]
 8002826:	f023 020f 	bic.w	r2, r3, #15
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	68db      	ldr	r3, [r3, #12]
 800282e:	490e      	ldr	r1, [pc, #56]	; (8002868 <HAL_RCC_ClockConfig+0x244>)
 8002830:	4313      	orrs	r3, r2
 8002832:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002834:	4b0b      	ldr	r3, [pc, #44]	; (8002864 <HAL_RCC_ClockConfig+0x240>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f003 030f 	and.w	r3, r3, #15
 800283c:	683a      	ldr	r2, [r7, #0]
 800283e:	429a      	cmp	r2, r3
 8002840:	d214      	bcs.n	800286c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002842:	4b08      	ldr	r3, [pc, #32]	; (8002864 <HAL_RCC_ClockConfig+0x240>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f023 020f 	bic.w	r2, r3, #15
 800284a:	4906      	ldr	r1, [pc, #24]	; (8002864 <HAL_RCC_ClockConfig+0x240>)
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	4313      	orrs	r3, r2
 8002850:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002852:	4b04      	ldr	r3, [pc, #16]	; (8002864 <HAL_RCC_ClockConfig+0x240>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f003 030f 	and.w	r3, r3, #15
 800285a:	683a      	ldr	r2, [r7, #0]
 800285c:	429a      	cmp	r2, r3
 800285e:	d005      	beq.n	800286c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002860:	2301      	movs	r3, #1
 8002862:	e086      	b.n	8002972 <HAL_RCC_ClockConfig+0x34e>
 8002864:	52002000 	.word	0x52002000
 8002868:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f003 0304 	and.w	r3, r3, #4
 8002874:	2b00      	cmp	r3, #0
 8002876:	d010      	beq.n	800289a <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	691a      	ldr	r2, [r3, #16]
 800287c:	4b3f      	ldr	r3, [pc, #252]	; (800297c <HAL_RCC_ClockConfig+0x358>)
 800287e:	699b      	ldr	r3, [r3, #24]
 8002880:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002884:	429a      	cmp	r2, r3
 8002886:	d208      	bcs.n	800289a <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002888:	4b3c      	ldr	r3, [pc, #240]	; (800297c <HAL_RCC_ClockConfig+0x358>)
 800288a:	699b      	ldr	r3, [r3, #24]
 800288c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	691b      	ldr	r3, [r3, #16]
 8002894:	4939      	ldr	r1, [pc, #228]	; (800297c <HAL_RCC_ClockConfig+0x358>)
 8002896:	4313      	orrs	r3, r2
 8002898:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f003 0308 	and.w	r3, r3, #8
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d010      	beq.n	80028c8 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	695a      	ldr	r2, [r3, #20]
 80028aa:	4b34      	ldr	r3, [pc, #208]	; (800297c <HAL_RCC_ClockConfig+0x358>)
 80028ac:	69db      	ldr	r3, [r3, #28]
 80028ae:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80028b2:	429a      	cmp	r2, r3
 80028b4:	d208      	bcs.n	80028c8 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80028b6:	4b31      	ldr	r3, [pc, #196]	; (800297c <HAL_RCC_ClockConfig+0x358>)
 80028b8:	69db      	ldr	r3, [r3, #28]
 80028ba:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	695b      	ldr	r3, [r3, #20]
 80028c2:	492e      	ldr	r1, [pc, #184]	; (800297c <HAL_RCC_ClockConfig+0x358>)
 80028c4:	4313      	orrs	r3, r2
 80028c6:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f003 0310 	and.w	r3, r3, #16
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d010      	beq.n	80028f6 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	699a      	ldr	r2, [r3, #24]
 80028d8:	4b28      	ldr	r3, [pc, #160]	; (800297c <HAL_RCC_ClockConfig+0x358>)
 80028da:	69db      	ldr	r3, [r3, #28]
 80028dc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80028e0:	429a      	cmp	r2, r3
 80028e2:	d208      	bcs.n	80028f6 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80028e4:	4b25      	ldr	r3, [pc, #148]	; (800297c <HAL_RCC_ClockConfig+0x358>)
 80028e6:	69db      	ldr	r3, [r3, #28]
 80028e8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	699b      	ldr	r3, [r3, #24]
 80028f0:	4922      	ldr	r1, [pc, #136]	; (800297c <HAL_RCC_ClockConfig+0x358>)
 80028f2:	4313      	orrs	r3, r2
 80028f4:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f003 0320 	and.w	r3, r3, #32
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d010      	beq.n	8002924 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	69da      	ldr	r2, [r3, #28]
 8002906:	4b1d      	ldr	r3, [pc, #116]	; (800297c <HAL_RCC_ClockConfig+0x358>)
 8002908:	6a1b      	ldr	r3, [r3, #32]
 800290a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800290e:	429a      	cmp	r2, r3
 8002910:	d208      	bcs.n	8002924 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002912:	4b1a      	ldr	r3, [pc, #104]	; (800297c <HAL_RCC_ClockConfig+0x358>)
 8002914:	6a1b      	ldr	r3, [r3, #32]
 8002916:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	69db      	ldr	r3, [r3, #28]
 800291e:	4917      	ldr	r1, [pc, #92]	; (800297c <HAL_RCC_ClockConfig+0x358>)
 8002920:	4313      	orrs	r3, r2
 8002922:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002924:	f000 f834 	bl	8002990 <HAL_RCC_GetSysClockFreq>
 8002928:	4602      	mov	r2, r0
 800292a:	4b14      	ldr	r3, [pc, #80]	; (800297c <HAL_RCC_ClockConfig+0x358>)
 800292c:	699b      	ldr	r3, [r3, #24]
 800292e:	0a1b      	lsrs	r3, r3, #8
 8002930:	f003 030f 	and.w	r3, r3, #15
 8002934:	4912      	ldr	r1, [pc, #72]	; (8002980 <HAL_RCC_ClockConfig+0x35c>)
 8002936:	5ccb      	ldrb	r3, [r1, r3]
 8002938:	f003 031f 	and.w	r3, r3, #31
 800293c:	fa22 f303 	lsr.w	r3, r2, r3
 8002940:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002942:	4b0e      	ldr	r3, [pc, #56]	; (800297c <HAL_RCC_ClockConfig+0x358>)
 8002944:	699b      	ldr	r3, [r3, #24]
 8002946:	f003 030f 	and.w	r3, r3, #15
 800294a:	4a0d      	ldr	r2, [pc, #52]	; (8002980 <HAL_RCC_ClockConfig+0x35c>)
 800294c:	5cd3      	ldrb	r3, [r2, r3]
 800294e:	f003 031f 	and.w	r3, r3, #31
 8002952:	693a      	ldr	r2, [r7, #16]
 8002954:	fa22 f303 	lsr.w	r3, r2, r3
 8002958:	4a0a      	ldr	r2, [pc, #40]	; (8002984 <HAL_RCC_ClockConfig+0x360>)
 800295a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800295c:	4a0a      	ldr	r2, [pc, #40]	; (8002988 <HAL_RCC_ClockConfig+0x364>)
 800295e:	693b      	ldr	r3, [r7, #16]
 8002960:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8002962:	4b0a      	ldr	r3, [pc, #40]	; (800298c <HAL_RCC_ClockConfig+0x368>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4618      	mov	r0, r3
 8002968:	f7fe f946 	bl	8000bf8 <HAL_InitTick>
 800296c:	4603      	mov	r3, r0
 800296e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002970:	7bfb      	ldrb	r3, [r7, #15]
}
 8002972:	4618      	mov	r0, r3
 8002974:	3718      	adds	r7, #24
 8002976:	46bd      	mov	sp, r7
 8002978:	bd80      	pop	{r7, pc}
 800297a:	bf00      	nop
 800297c:	58024400 	.word	0x58024400
 8002980:	08008aa8 	.word	0x08008aa8
 8002984:	24000004 	.word	0x24000004
 8002988:	24000000 	.word	0x24000000
 800298c:	24000008 	.word	0x24000008

08002990 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002990:	b480      	push	{r7}
 8002992:	b089      	sub	sp, #36	; 0x24
 8002994:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002996:	4bb3      	ldr	r3, [pc, #716]	; (8002c64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002998:	691b      	ldr	r3, [r3, #16]
 800299a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800299e:	2b18      	cmp	r3, #24
 80029a0:	f200 8155 	bhi.w	8002c4e <HAL_RCC_GetSysClockFreq+0x2be>
 80029a4:	a201      	add	r2, pc, #4	; (adr r2, 80029ac <HAL_RCC_GetSysClockFreq+0x1c>)
 80029a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029aa:	bf00      	nop
 80029ac:	08002a11 	.word	0x08002a11
 80029b0:	08002c4f 	.word	0x08002c4f
 80029b4:	08002c4f 	.word	0x08002c4f
 80029b8:	08002c4f 	.word	0x08002c4f
 80029bc:	08002c4f 	.word	0x08002c4f
 80029c0:	08002c4f 	.word	0x08002c4f
 80029c4:	08002c4f 	.word	0x08002c4f
 80029c8:	08002c4f 	.word	0x08002c4f
 80029cc:	08002a37 	.word	0x08002a37
 80029d0:	08002c4f 	.word	0x08002c4f
 80029d4:	08002c4f 	.word	0x08002c4f
 80029d8:	08002c4f 	.word	0x08002c4f
 80029dc:	08002c4f 	.word	0x08002c4f
 80029e0:	08002c4f 	.word	0x08002c4f
 80029e4:	08002c4f 	.word	0x08002c4f
 80029e8:	08002c4f 	.word	0x08002c4f
 80029ec:	08002a3d 	.word	0x08002a3d
 80029f0:	08002c4f 	.word	0x08002c4f
 80029f4:	08002c4f 	.word	0x08002c4f
 80029f8:	08002c4f 	.word	0x08002c4f
 80029fc:	08002c4f 	.word	0x08002c4f
 8002a00:	08002c4f 	.word	0x08002c4f
 8002a04:	08002c4f 	.word	0x08002c4f
 8002a08:	08002c4f 	.word	0x08002c4f
 8002a0c:	08002a43 	.word	0x08002a43
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002a10:	4b94      	ldr	r3, [pc, #592]	; (8002c64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f003 0320 	and.w	r3, r3, #32
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d009      	beq.n	8002a30 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002a1c:	4b91      	ldr	r3, [pc, #580]	; (8002c64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	08db      	lsrs	r3, r3, #3
 8002a22:	f003 0303 	and.w	r3, r3, #3
 8002a26:	4a90      	ldr	r2, [pc, #576]	; (8002c68 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002a28:	fa22 f303 	lsr.w	r3, r2, r3
 8002a2c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8002a2e:	e111      	b.n	8002c54 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002a30:	4b8d      	ldr	r3, [pc, #564]	; (8002c68 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002a32:	61bb      	str	r3, [r7, #24]
    break;
 8002a34:	e10e      	b.n	8002c54 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8002a36:	4b8d      	ldr	r3, [pc, #564]	; (8002c6c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002a38:	61bb      	str	r3, [r7, #24]
    break;
 8002a3a:	e10b      	b.n	8002c54 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8002a3c:	4b8c      	ldr	r3, [pc, #560]	; (8002c70 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002a3e:	61bb      	str	r3, [r7, #24]
    break;
 8002a40:	e108      	b.n	8002c54 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002a42:	4b88      	ldr	r3, [pc, #544]	; (8002c64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a46:	f003 0303 	and.w	r3, r3, #3
 8002a4a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8002a4c:	4b85      	ldr	r3, [pc, #532]	; (8002c64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a50:	091b      	lsrs	r3, r3, #4
 8002a52:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002a56:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002a58:	4b82      	ldr	r3, [pc, #520]	; (8002c64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a5c:	f003 0301 	and.w	r3, r3, #1
 8002a60:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8002a62:	4b80      	ldr	r3, [pc, #512]	; (8002c64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a66:	08db      	lsrs	r3, r3, #3
 8002a68:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002a6c:	68fa      	ldr	r2, [r7, #12]
 8002a6e:	fb02 f303 	mul.w	r3, r2, r3
 8002a72:	ee07 3a90 	vmov	s15, r3
 8002a76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a7a:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8002a7e:	693b      	ldr	r3, [r7, #16]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	f000 80e1 	beq.w	8002c48 <HAL_RCC_GetSysClockFreq+0x2b8>
 8002a86:	697b      	ldr	r3, [r7, #20]
 8002a88:	2b02      	cmp	r3, #2
 8002a8a:	f000 8083 	beq.w	8002b94 <HAL_RCC_GetSysClockFreq+0x204>
 8002a8e:	697b      	ldr	r3, [r7, #20]
 8002a90:	2b02      	cmp	r3, #2
 8002a92:	f200 80a1 	bhi.w	8002bd8 <HAL_RCC_GetSysClockFreq+0x248>
 8002a96:	697b      	ldr	r3, [r7, #20]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d003      	beq.n	8002aa4 <HAL_RCC_GetSysClockFreq+0x114>
 8002a9c:	697b      	ldr	r3, [r7, #20]
 8002a9e:	2b01      	cmp	r3, #1
 8002aa0:	d056      	beq.n	8002b50 <HAL_RCC_GetSysClockFreq+0x1c0>
 8002aa2:	e099      	b.n	8002bd8 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002aa4:	4b6f      	ldr	r3, [pc, #444]	; (8002c64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f003 0320 	and.w	r3, r3, #32
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d02d      	beq.n	8002b0c <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002ab0:	4b6c      	ldr	r3, [pc, #432]	; (8002c64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	08db      	lsrs	r3, r3, #3
 8002ab6:	f003 0303 	and.w	r3, r3, #3
 8002aba:	4a6b      	ldr	r2, [pc, #428]	; (8002c68 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002abc:	fa22 f303 	lsr.w	r3, r2, r3
 8002ac0:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	ee07 3a90 	vmov	s15, r3
 8002ac8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002acc:	693b      	ldr	r3, [r7, #16]
 8002ace:	ee07 3a90 	vmov	s15, r3
 8002ad2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ad6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002ada:	4b62      	ldr	r3, [pc, #392]	; (8002c64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ade:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ae2:	ee07 3a90 	vmov	s15, r3
 8002ae6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002aea:	ed97 6a02 	vldr	s12, [r7, #8]
 8002aee:	eddf 5a61 	vldr	s11, [pc, #388]	; 8002c74 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002af2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002af6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002afa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002afe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002b02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b06:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8002b0a:	e087      	b.n	8002c1c <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002b0c:	693b      	ldr	r3, [r7, #16]
 8002b0e:	ee07 3a90 	vmov	s15, r3
 8002b12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b16:	eddf 6a58 	vldr	s13, [pc, #352]	; 8002c78 <HAL_RCC_GetSysClockFreq+0x2e8>
 8002b1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002b1e:	4b51      	ldr	r3, [pc, #324]	; (8002c64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b26:	ee07 3a90 	vmov	s15, r3
 8002b2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002b2e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002b32:	eddf 5a50 	vldr	s11, [pc, #320]	; 8002c74 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002b36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002b3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002b3e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002b42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002b46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b4a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002b4e:	e065      	b.n	8002c1c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002b50:	693b      	ldr	r3, [r7, #16]
 8002b52:	ee07 3a90 	vmov	s15, r3
 8002b56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b5a:	eddf 6a48 	vldr	s13, [pc, #288]	; 8002c7c <HAL_RCC_GetSysClockFreq+0x2ec>
 8002b5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002b62:	4b40      	ldr	r3, [pc, #256]	; (8002c64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b6a:	ee07 3a90 	vmov	s15, r3
 8002b6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002b72:	ed97 6a02 	vldr	s12, [r7, #8]
 8002b76:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8002c74 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002b7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002b7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002b82:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002b86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002b8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b8e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002b92:	e043      	b.n	8002c1c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002b94:	693b      	ldr	r3, [r7, #16]
 8002b96:	ee07 3a90 	vmov	s15, r3
 8002b9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b9e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8002c80 <HAL_RCC_GetSysClockFreq+0x2f0>
 8002ba2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002ba6:	4b2f      	ldr	r3, [pc, #188]	; (8002c64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002baa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002bae:	ee07 3a90 	vmov	s15, r3
 8002bb2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002bb6:	ed97 6a02 	vldr	s12, [r7, #8]
 8002bba:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8002c74 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002bbe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002bc2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002bc6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002bca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002bce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002bd2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002bd6:	e021      	b.n	8002c1c <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002bd8:	693b      	ldr	r3, [r7, #16]
 8002bda:	ee07 3a90 	vmov	s15, r3
 8002bde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002be2:	eddf 6a26 	vldr	s13, [pc, #152]	; 8002c7c <HAL_RCC_GetSysClockFreq+0x2ec>
 8002be6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002bea:	4b1e      	ldr	r3, [pc, #120]	; (8002c64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002bf2:	ee07 3a90 	vmov	s15, r3
 8002bf6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002bfa:	ed97 6a02 	vldr	s12, [r7, #8]
 8002bfe:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8002c74 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002c02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002c06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002c0a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002c0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002c12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c16:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002c1a:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8002c1c:	4b11      	ldr	r3, [pc, #68]	; (8002c64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002c1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c20:	0a5b      	lsrs	r3, r3, #9
 8002c22:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002c26:	3301      	adds	r3, #1
 8002c28:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	ee07 3a90 	vmov	s15, r3
 8002c30:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002c34:	edd7 6a07 	vldr	s13, [r7, #28]
 8002c38:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002c3c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002c40:	ee17 3a90 	vmov	r3, s15
 8002c44:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8002c46:	e005      	b.n	8002c54 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8002c48:	2300      	movs	r3, #0
 8002c4a:	61bb      	str	r3, [r7, #24]
    break;
 8002c4c:	e002      	b.n	8002c54 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8002c4e:	4b07      	ldr	r3, [pc, #28]	; (8002c6c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002c50:	61bb      	str	r3, [r7, #24]
    break;
 8002c52:	bf00      	nop
  }

  return sysclockfreq;
 8002c54:	69bb      	ldr	r3, [r7, #24]
}
 8002c56:	4618      	mov	r0, r3
 8002c58:	3724      	adds	r7, #36	; 0x24
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c60:	4770      	bx	lr
 8002c62:	bf00      	nop
 8002c64:	58024400 	.word	0x58024400
 8002c68:	03d09000 	.word	0x03d09000
 8002c6c:	003d0900 	.word	0x003d0900
 8002c70:	007a1200 	.word	0x007a1200
 8002c74:	46000000 	.word	0x46000000
 8002c78:	4c742400 	.word	0x4c742400
 8002c7c:	4a742400 	.word	0x4a742400
 8002c80:	4af42400 	.word	0x4af42400

08002c84 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b082      	sub	sp, #8
 8002c88:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8002c8a:	f7ff fe81 	bl	8002990 <HAL_RCC_GetSysClockFreq>
 8002c8e:	4602      	mov	r2, r0
 8002c90:	4b10      	ldr	r3, [pc, #64]	; (8002cd4 <HAL_RCC_GetHCLKFreq+0x50>)
 8002c92:	699b      	ldr	r3, [r3, #24]
 8002c94:	0a1b      	lsrs	r3, r3, #8
 8002c96:	f003 030f 	and.w	r3, r3, #15
 8002c9a:	490f      	ldr	r1, [pc, #60]	; (8002cd8 <HAL_RCC_GetHCLKFreq+0x54>)
 8002c9c:	5ccb      	ldrb	r3, [r1, r3]
 8002c9e:	f003 031f 	and.w	r3, r3, #31
 8002ca2:	fa22 f303 	lsr.w	r3, r2, r3
 8002ca6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002ca8:	4b0a      	ldr	r3, [pc, #40]	; (8002cd4 <HAL_RCC_GetHCLKFreq+0x50>)
 8002caa:	699b      	ldr	r3, [r3, #24]
 8002cac:	f003 030f 	and.w	r3, r3, #15
 8002cb0:	4a09      	ldr	r2, [pc, #36]	; (8002cd8 <HAL_RCC_GetHCLKFreq+0x54>)
 8002cb2:	5cd3      	ldrb	r3, [r2, r3]
 8002cb4:	f003 031f 	and.w	r3, r3, #31
 8002cb8:	687a      	ldr	r2, [r7, #4]
 8002cba:	fa22 f303 	lsr.w	r3, r2, r3
 8002cbe:	4a07      	ldr	r2, [pc, #28]	; (8002cdc <HAL_RCC_GetHCLKFreq+0x58>)
 8002cc0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002cc2:	4a07      	ldr	r2, [pc, #28]	; (8002ce0 <HAL_RCC_GetHCLKFreq+0x5c>)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8002cc8:	4b04      	ldr	r3, [pc, #16]	; (8002cdc <HAL_RCC_GetHCLKFreq+0x58>)
 8002cca:	681b      	ldr	r3, [r3, #0]
}
 8002ccc:	4618      	mov	r0, r3
 8002cce:	3708      	adds	r7, #8
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	bd80      	pop	{r7, pc}
 8002cd4:	58024400 	.word	0x58024400
 8002cd8:	08008aa8 	.word	0x08008aa8
 8002cdc:	24000004 	.word	0x24000004
 8002ce0:	24000000 	.word	0x24000000

08002ce4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8002ce8:	f7ff ffcc 	bl	8002c84 <HAL_RCC_GetHCLKFreq>
 8002cec:	4602      	mov	r2, r0
 8002cee:	4b06      	ldr	r3, [pc, #24]	; (8002d08 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002cf0:	69db      	ldr	r3, [r3, #28]
 8002cf2:	091b      	lsrs	r3, r3, #4
 8002cf4:	f003 0307 	and.w	r3, r3, #7
 8002cf8:	4904      	ldr	r1, [pc, #16]	; (8002d0c <HAL_RCC_GetPCLK1Freq+0x28>)
 8002cfa:	5ccb      	ldrb	r3, [r1, r3]
 8002cfc:	f003 031f 	and.w	r3, r3, #31
 8002d00:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8002d04:	4618      	mov	r0, r3
 8002d06:	bd80      	pop	{r7, pc}
 8002d08:	58024400 	.word	0x58024400
 8002d0c:	08008aa8 	.word	0x08008aa8

08002d10 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8002d14:	f7ff ffb6 	bl	8002c84 <HAL_RCC_GetHCLKFreq>
 8002d18:	4602      	mov	r2, r0
 8002d1a:	4b06      	ldr	r3, [pc, #24]	; (8002d34 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d1c:	69db      	ldr	r3, [r3, #28]
 8002d1e:	0a1b      	lsrs	r3, r3, #8
 8002d20:	f003 0307 	and.w	r3, r3, #7
 8002d24:	4904      	ldr	r1, [pc, #16]	; (8002d38 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002d26:	5ccb      	ldrb	r3, [r1, r3]
 8002d28:	f003 031f 	and.w	r3, r3, #31
 8002d2c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8002d30:	4618      	mov	r0, r3
 8002d32:	bd80      	pop	{r7, pc}
 8002d34:	58024400 	.word	0x58024400
 8002d38:	08008aa8 	.word	0x08008aa8

08002d3c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	b083      	sub	sp, #12
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
 8002d44:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	223f      	movs	r2, #63	; 0x3f
 8002d4a:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002d4c:	4b1a      	ldr	r3, [pc, #104]	; (8002db8 <HAL_RCC_GetClockConfig+0x7c>)
 8002d4e:	691b      	ldr	r3, [r3, #16]
 8002d50:	f003 0207 	and.w	r2, r3, #7
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8002d58:	4b17      	ldr	r3, [pc, #92]	; (8002db8 <HAL_RCC_GetClockConfig+0x7c>)
 8002d5a:	699b      	ldr	r3, [r3, #24]
 8002d5c:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8002d64:	4b14      	ldr	r3, [pc, #80]	; (8002db8 <HAL_RCC_GetClockConfig+0x7c>)
 8002d66:	699b      	ldr	r3, [r3, #24]
 8002d68:	f003 020f 	and.w	r2, r3, #15
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8002d70:	4b11      	ldr	r3, [pc, #68]	; (8002db8 <HAL_RCC_GetClockConfig+0x7c>)
 8002d72:	699b      	ldr	r3, [r3, #24]
 8002d74:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8002d7c:	4b0e      	ldr	r3, [pc, #56]	; (8002db8 <HAL_RCC_GetClockConfig+0x7c>)
 8002d7e:	69db      	ldr	r3, [r3, #28]
 8002d80:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8002d88:	4b0b      	ldr	r3, [pc, #44]	; (8002db8 <HAL_RCC_GetClockConfig+0x7c>)
 8002d8a:	69db      	ldr	r3, [r3, #28]
 8002d8c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8002d94:	4b08      	ldr	r3, [pc, #32]	; (8002db8 <HAL_RCC_GetClockConfig+0x7c>)
 8002d96:	6a1b      	ldr	r3, [r3, #32]
 8002d98:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002da0:	4b06      	ldr	r3, [pc, #24]	; (8002dbc <HAL_RCC_GetClockConfig+0x80>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f003 020f 	and.w	r2, r3, #15
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	601a      	str	r2, [r3, #0]
}
 8002dac:	bf00      	nop
 8002dae:	370c      	adds	r7, #12
 8002db0:	46bd      	mov	sp, r7
 8002db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db6:	4770      	bx	lr
 8002db8:	58024400 	.word	0x58024400
 8002dbc:	52002000 	.word	0x52002000

08002dc0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b086      	sub	sp, #24
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002dc8:	2300      	movs	r3, #0
 8002dca:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002dcc:	2300      	movs	r3, #0
 8002dce:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d03f      	beq.n	8002e5c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002de0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002de4:	d02a      	beq.n	8002e3c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002de6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002dea:	d824      	bhi.n	8002e36 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002dec:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002df0:	d018      	beq.n	8002e24 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002df2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002df6:	d81e      	bhi.n	8002e36 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d003      	beq.n	8002e04 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002dfc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002e00:	d007      	beq.n	8002e12 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002e02:	e018      	b.n	8002e36 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002e04:	4ba4      	ldr	r3, [pc, #656]	; (8003098 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8002e06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e08:	4aa3      	ldr	r2, [pc, #652]	; (8003098 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8002e0a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e0e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002e10:	e015      	b.n	8002e3e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	3304      	adds	r3, #4
 8002e16:	2102      	movs	r1, #2
 8002e18:	4618      	mov	r0, r3
 8002e1a:	f001 f989 	bl	8004130 <RCCEx_PLL2_Config>
 8002e1e:	4603      	mov	r3, r0
 8002e20:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002e22:	e00c      	b.n	8002e3e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	3324      	adds	r3, #36	; 0x24
 8002e28:	2102      	movs	r1, #2
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	f001 fa32 	bl	8004294 <RCCEx_PLL3_Config>
 8002e30:	4603      	mov	r3, r0
 8002e32:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002e34:	e003      	b.n	8002e3e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002e36:	2301      	movs	r3, #1
 8002e38:	75fb      	strb	r3, [r7, #23]
      break;
 8002e3a:	e000      	b.n	8002e3e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002e3c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002e3e:	7dfb      	ldrb	r3, [r7, #23]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d109      	bne.n	8002e58 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8002e44:	4b94      	ldr	r3, [pc, #592]	; (8003098 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8002e46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e48:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e50:	4991      	ldr	r1, [pc, #580]	; (8003098 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8002e52:	4313      	orrs	r3, r2
 8002e54:	650b      	str	r3, [r1, #80]	; 0x50
 8002e56:	e001      	b.n	8002e5c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e58:	7dfb      	ldrb	r3, [r7, #23]
 8002e5a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d03d      	beq.n	8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e6c:	2b04      	cmp	r3, #4
 8002e6e:	d826      	bhi.n	8002ebe <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8002e70:	a201      	add	r2, pc, #4	; (adr r2, 8002e78 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8002e72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e76:	bf00      	nop
 8002e78:	08002e8d 	.word	0x08002e8d
 8002e7c:	08002e9b 	.word	0x08002e9b
 8002e80:	08002ead 	.word	0x08002ead
 8002e84:	08002ec5 	.word	0x08002ec5
 8002e88:	08002ec5 	.word	0x08002ec5
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002e8c:	4b82      	ldr	r3, [pc, #520]	; (8003098 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8002e8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e90:	4a81      	ldr	r2, [pc, #516]	; (8003098 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8002e92:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e96:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002e98:	e015      	b.n	8002ec6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	3304      	adds	r3, #4
 8002e9e:	2100      	movs	r1, #0
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	f001 f945 	bl	8004130 <RCCEx_PLL2_Config>
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002eaa:	e00c      	b.n	8002ec6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	3324      	adds	r3, #36	; 0x24
 8002eb0:	2100      	movs	r1, #0
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	f001 f9ee 	bl	8004294 <RCCEx_PLL3_Config>
 8002eb8:	4603      	mov	r3, r0
 8002eba:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002ebc:	e003      	b.n	8002ec6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	75fb      	strb	r3, [r7, #23]
      break;
 8002ec2:	e000      	b.n	8002ec6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8002ec4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002ec6:	7dfb      	ldrb	r3, [r7, #23]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d109      	bne.n	8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002ecc:	4b72      	ldr	r3, [pc, #456]	; (8003098 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8002ece:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ed0:	f023 0207 	bic.w	r2, r3, #7
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ed8:	496f      	ldr	r1, [pc, #444]	; (8003098 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8002eda:	4313      	orrs	r3, r2
 8002edc:	650b      	str	r3, [r1, #80]	; 0x50
 8002ede:	e001      	b.n	8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ee0:	7dfb      	ldrb	r3, [r7, #23]
 8002ee2:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d051      	beq.n	8002f94 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002ef6:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8002efa:	d036      	beq.n	8002f6a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002efc:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8002f00:	d830      	bhi.n	8002f64 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8002f02:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002f06:	d032      	beq.n	8002f6e <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8002f08:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002f0c:	d82a      	bhi.n	8002f64 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8002f0e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002f12:	d02e      	beq.n	8002f72 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8002f14:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002f18:	d824      	bhi.n	8002f64 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8002f1a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f1e:	d018      	beq.n	8002f52 <HAL_RCCEx_PeriphCLKConfig+0x192>
 8002f20:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f24:	d81e      	bhi.n	8002f64 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d003      	beq.n	8002f32 <HAL_RCCEx_PeriphCLKConfig+0x172>
 8002f2a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002f2e:	d007      	beq.n	8002f40 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8002f30:	e018      	b.n	8002f64 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002f32:	4b59      	ldr	r3, [pc, #356]	; (8003098 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8002f34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f36:	4a58      	ldr	r2, [pc, #352]	; (8003098 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8002f38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f3c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002f3e:	e019      	b.n	8002f74 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	3304      	adds	r3, #4
 8002f44:	2100      	movs	r1, #0
 8002f46:	4618      	mov	r0, r3
 8002f48:	f001 f8f2 	bl	8004130 <RCCEx_PLL2_Config>
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8002f50:	e010      	b.n	8002f74 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	3324      	adds	r3, #36	; 0x24
 8002f56:	2100      	movs	r1, #0
 8002f58:	4618      	mov	r0, r3
 8002f5a:	f001 f99b 	bl	8004294 <RCCEx_PLL3_Config>
 8002f5e:	4603      	mov	r3, r0
 8002f60:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002f62:	e007      	b.n	8002f74 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8002f64:	2301      	movs	r3, #1
 8002f66:	75fb      	strb	r3, [r7, #23]
      break;
 8002f68:	e004      	b.n	8002f74 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8002f6a:	bf00      	nop
 8002f6c:	e002      	b.n	8002f74 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8002f6e:	bf00      	nop
 8002f70:	e000      	b.n	8002f74 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8002f72:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002f74:	7dfb      	ldrb	r3, [r7, #23]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d10a      	bne.n	8002f90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8002f7a:	4b47      	ldr	r3, [pc, #284]	; (8003098 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8002f7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f7e:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002f88:	4943      	ldr	r1, [pc, #268]	; (8003098 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8002f8a:	4313      	orrs	r3, r2
 8002f8c:	658b      	str	r3, [r1, #88]	; 0x58
 8002f8e:	e001      	b.n	8002f94 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f90:	7dfb      	ldrb	r3, [r7, #23]
 8002f92:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d051      	beq.n	8003044 <HAL_RCCEx_PeriphCLKConfig+0x284>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002fa6:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8002faa:	d036      	beq.n	800301a <HAL_RCCEx_PeriphCLKConfig+0x25a>
 8002fac:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8002fb0:	d830      	bhi.n	8003014 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8002fb2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002fb6:	d032      	beq.n	800301e <HAL_RCCEx_PeriphCLKConfig+0x25e>
 8002fb8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002fbc:	d82a      	bhi.n	8003014 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8002fbe:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002fc2:	d02e      	beq.n	8003022 <HAL_RCCEx_PeriphCLKConfig+0x262>
 8002fc4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002fc8:	d824      	bhi.n	8003014 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8002fca:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002fce:	d018      	beq.n	8003002 <HAL_RCCEx_PeriphCLKConfig+0x242>
 8002fd0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002fd4:	d81e      	bhi.n	8003014 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d003      	beq.n	8002fe2 <HAL_RCCEx_PeriphCLKConfig+0x222>
 8002fda:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002fde:	d007      	beq.n	8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8002fe0:	e018      	b.n	8003014 <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002fe2:	4b2d      	ldr	r3, [pc, #180]	; (8003098 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8002fe4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fe6:	4a2c      	ldr	r2, [pc, #176]	; (8003098 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8002fe8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002fec:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002fee:	e019      	b.n	8003024 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	3304      	adds	r3, #4
 8002ff4:	2100      	movs	r1, #0
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	f001 f89a 	bl	8004130 <RCCEx_PLL2_Config>
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8003000:	e010      	b.n	8003024 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	3324      	adds	r3, #36	; 0x24
 8003006:	2100      	movs	r1, #0
 8003008:	4618      	mov	r0, r3
 800300a:	f001 f943 	bl	8004294 <RCCEx_PLL3_Config>
 800300e:	4603      	mov	r3, r0
 8003010:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003012:	e007      	b.n	8003024 <HAL_RCCEx_PeriphCLKConfig+0x264>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8003014:	2301      	movs	r3, #1
 8003016:	75fb      	strb	r3, [r7, #23]
      break;
 8003018:	e004      	b.n	8003024 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 800301a:	bf00      	nop
 800301c:	e002      	b.n	8003024 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 800301e:	bf00      	nop
 8003020:	e000      	b.n	8003024 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8003022:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003024:	7dfb      	ldrb	r3, [r7, #23]
 8003026:	2b00      	cmp	r3, #0
 8003028:	d10a      	bne.n	8003040 <HAL_RCCEx_PeriphCLKConfig+0x280>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800302a:	4b1b      	ldr	r3, [pc, #108]	; (8003098 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800302c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800302e:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003038:	4917      	ldr	r1, [pc, #92]	; (8003098 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800303a:	4313      	orrs	r3, r2
 800303c:	658b      	str	r3, [r1, #88]	; 0x58
 800303e:	e001      	b.n	8003044 <HAL_RCCEx_PeriphCLKConfig+0x284>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003040:	7dfb      	ldrb	r3, [r7, #23]
 8003042:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800304c:	2b00      	cmp	r3, #0
 800304e:	d035      	beq.n	80030bc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->OspiClockSelection)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003054:	2b30      	cmp	r3, #48	; 0x30
 8003056:	d01c      	beq.n	8003092 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8003058:	2b30      	cmp	r3, #48	; 0x30
 800305a:	d817      	bhi.n	800308c <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 800305c:	2b20      	cmp	r3, #32
 800305e:	d00c      	beq.n	800307a <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8003060:	2b20      	cmp	r3, #32
 8003062:	d813      	bhi.n	800308c <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8003064:	2b00      	cmp	r3, #0
 8003066:	d019      	beq.n	800309c <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 8003068:	2b10      	cmp	r3, #16
 800306a:	d10f      	bne.n	800308c <HAL_RCCEx_PeriphCLKConfig+0x2cc>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800306c:	4b0a      	ldr	r3, [pc, #40]	; (8003098 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800306e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003070:	4a09      	ldr	r2, [pc, #36]	; (8003098 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8003072:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003076:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8003078:	e011      	b.n	800309e <HAL_RCCEx_PeriphCLKConfig+0x2de>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	3304      	adds	r3, #4
 800307e:	2102      	movs	r1, #2
 8003080:	4618      	mov	r0, r3
 8003082:	f001 f855 	bl	8004130 <RCCEx_PLL2_Config>
 8003086:	4603      	mov	r3, r0
 8003088:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 800308a:	e008      	b.n	800309e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800308c:	2301      	movs	r3, #1
 800308e:	75fb      	strb	r3, [r7, #23]
      break;
 8003090:	e005      	b.n	800309e <HAL_RCCEx_PeriphCLKConfig+0x2de>
      break;
 8003092:	bf00      	nop
 8003094:	e003      	b.n	800309e <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8003096:	bf00      	nop
 8003098:	58024400 	.word	0x58024400
      break;
 800309c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800309e:	7dfb      	ldrb	r3, [r7, #23]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d109      	bne.n	80030b8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80030a4:	4ba3      	ldr	r3, [pc, #652]	; (8003334 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80030a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030a8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030b0:	49a0      	ldr	r1, [pc, #640]	; (8003334 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80030b2:	4313      	orrs	r3, r2
 80030b4:	64cb      	str	r3, [r1, #76]	; 0x4c
 80030b6:	e001      	b.n	80030bc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030b8:	7dfb      	ldrb	r3, [r7, #23]
 80030ba:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d047      	beq.n	8003158 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030cc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80030d0:	d030      	beq.n	8003134 <HAL_RCCEx_PeriphCLKConfig+0x374>
 80030d2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80030d6:	d82a      	bhi.n	800312e <HAL_RCCEx_PeriphCLKConfig+0x36e>
 80030d8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80030dc:	d02c      	beq.n	8003138 <HAL_RCCEx_PeriphCLKConfig+0x378>
 80030de:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80030e2:	d824      	bhi.n	800312e <HAL_RCCEx_PeriphCLKConfig+0x36e>
 80030e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80030e8:	d018      	beq.n	800311c <HAL_RCCEx_PeriphCLKConfig+0x35c>
 80030ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80030ee:	d81e      	bhi.n	800312e <HAL_RCCEx_PeriphCLKConfig+0x36e>
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d003      	beq.n	80030fc <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80030f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030f8:	d007      	beq.n	800310a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80030fa:	e018      	b.n	800312e <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80030fc:	4b8d      	ldr	r3, [pc, #564]	; (8003334 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80030fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003100:	4a8c      	ldr	r2, [pc, #560]	; (8003334 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8003102:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003106:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003108:	e017      	b.n	800313a <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	3304      	adds	r3, #4
 800310e:	2100      	movs	r1, #0
 8003110:	4618      	mov	r0, r3
 8003112:	f001 f80d 	bl	8004130 <RCCEx_PLL2_Config>
 8003116:	4603      	mov	r3, r0
 8003118:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800311a:	e00e      	b.n	800313a <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	3324      	adds	r3, #36	; 0x24
 8003120:	2100      	movs	r1, #0
 8003122:	4618      	mov	r0, r3
 8003124:	f001 f8b6 	bl	8004294 <RCCEx_PLL3_Config>
 8003128:	4603      	mov	r3, r0
 800312a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800312c:	e005      	b.n	800313a <HAL_RCCEx_PeriphCLKConfig+0x37a>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800312e:	2301      	movs	r3, #1
 8003130:	75fb      	strb	r3, [r7, #23]
      break;
 8003132:	e002      	b.n	800313a <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 8003134:	bf00      	nop
 8003136:	e000      	b.n	800313a <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 8003138:	bf00      	nop
    }

    if(ret == HAL_OK)
 800313a:	7dfb      	ldrb	r3, [r7, #23]
 800313c:	2b00      	cmp	r3, #0
 800313e:	d109      	bne.n	8003154 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003140:	4b7c      	ldr	r3, [pc, #496]	; (8003334 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8003142:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003144:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800314c:	4979      	ldr	r1, [pc, #484]	; (8003334 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800314e:	4313      	orrs	r3, r2
 8003150:	650b      	str	r3, [r1, #80]	; 0x50
 8003152:	e001      	b.n	8003158 <HAL_RCCEx_PeriphCLKConfig+0x398>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003154:	7dfb      	ldrb	r3, [r7, #23]
 8003156:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003160:	2b00      	cmp	r3, #0
 8003162:	d049      	beq.n	80031f8 <HAL_RCCEx_PeriphCLKConfig+0x438>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003168:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800316c:	d02e      	beq.n	80031cc <HAL_RCCEx_PeriphCLKConfig+0x40c>
 800316e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003172:	d828      	bhi.n	80031c6 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8003174:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003178:	d02a      	beq.n	80031d0 <HAL_RCCEx_PeriphCLKConfig+0x410>
 800317a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800317e:	d822      	bhi.n	80031c6 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8003180:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003184:	d026      	beq.n	80031d4 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8003186:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800318a:	d81c      	bhi.n	80031c6 <HAL_RCCEx_PeriphCLKConfig+0x406>
 800318c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003190:	d010      	beq.n	80031b4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 8003192:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003196:	d816      	bhi.n	80031c6 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8003198:	2b00      	cmp	r3, #0
 800319a:	d01d      	beq.n	80031d8 <HAL_RCCEx_PeriphCLKConfig+0x418>
 800319c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031a0:	d111      	bne.n	80031c6 <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	3304      	adds	r3, #4
 80031a6:	2101      	movs	r1, #1
 80031a8:	4618      	mov	r0, r3
 80031aa:	f000 ffc1 	bl	8004130 <RCCEx_PLL2_Config>
 80031ae:	4603      	mov	r3, r0
 80031b0:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80031b2:	e012      	b.n	80031da <HAL_RCCEx_PeriphCLKConfig+0x41a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	3324      	adds	r3, #36	; 0x24
 80031b8:	2101      	movs	r1, #1
 80031ba:	4618      	mov	r0, r3
 80031bc:	f001 f86a 	bl	8004294 <RCCEx_PLL3_Config>
 80031c0:	4603      	mov	r3, r0
 80031c2:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80031c4:	e009      	b.n	80031da <HAL_RCCEx_PeriphCLKConfig+0x41a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80031c6:	2301      	movs	r3, #1
 80031c8:	75fb      	strb	r3, [r7, #23]
      break;
 80031ca:	e006      	b.n	80031da <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 80031cc:	bf00      	nop
 80031ce:	e004      	b.n	80031da <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 80031d0:	bf00      	nop
 80031d2:	e002      	b.n	80031da <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 80031d4:	bf00      	nop
 80031d6:	e000      	b.n	80031da <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 80031d8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80031da:	7dfb      	ldrb	r3, [r7, #23]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d109      	bne.n	80031f4 <HAL_RCCEx_PeriphCLKConfig+0x434>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80031e0:	4b54      	ldr	r3, [pc, #336]	; (8003334 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80031e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031e4:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031ec:	4951      	ldr	r1, [pc, #324]	; (8003334 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80031ee:	4313      	orrs	r3, r2
 80031f0:	650b      	str	r3, [r1, #80]	; 0x50
 80031f2:	e001      	b.n	80031f8 <HAL_RCCEx_PeriphCLKConfig+0x438>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031f4:	7dfb      	ldrb	r3, [r7, #23]
 80031f6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003200:	2b00      	cmp	r3, #0
 8003202:	d04b      	beq.n	800329c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800320a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800320e:	d02e      	beq.n	800326e <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8003210:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003214:	d828      	bhi.n	8003268 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8003216:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800321a:	d02a      	beq.n	8003272 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 800321c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003220:	d822      	bhi.n	8003268 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8003222:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003226:	d026      	beq.n	8003276 <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 8003228:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800322c:	d81c      	bhi.n	8003268 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800322e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003232:	d010      	beq.n	8003256 <HAL_RCCEx_PeriphCLKConfig+0x496>
 8003234:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003238:	d816      	bhi.n	8003268 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800323a:	2b00      	cmp	r3, #0
 800323c:	d01d      	beq.n	800327a <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 800323e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003242:	d111      	bne.n	8003268 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	3304      	adds	r3, #4
 8003248:	2101      	movs	r1, #1
 800324a:	4618      	mov	r0, r3
 800324c:	f000 ff70 	bl	8004130 <RCCEx_PLL2_Config>
 8003250:	4603      	mov	r3, r0
 8003252:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003254:	e012      	b.n	800327c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	3324      	adds	r3, #36	; 0x24
 800325a:	2101      	movs	r1, #1
 800325c:	4618      	mov	r0, r3
 800325e:	f001 f819 	bl	8004294 <RCCEx_PLL3_Config>
 8003262:	4603      	mov	r3, r0
 8003264:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003266:	e009      	b.n	800327c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8003268:	2301      	movs	r3, #1
 800326a:	75fb      	strb	r3, [r7, #23]
      break;
 800326c:	e006      	b.n	800327c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800326e:	bf00      	nop
 8003270:	e004      	b.n	800327c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8003272:	bf00      	nop
 8003274:	e002      	b.n	800327c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8003276:	bf00      	nop
 8003278:	e000      	b.n	800327c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800327a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800327c:	7dfb      	ldrb	r3, [r7, #23]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d10a      	bne.n	8003298 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003282:	4b2c      	ldr	r3, [pc, #176]	; (8003334 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8003284:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003286:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003290:	4928      	ldr	r1, [pc, #160]	; (8003334 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8003292:	4313      	orrs	r3, r2
 8003294:	658b      	str	r3, [r1, #88]	; 0x58
 8003296:	e001      	b.n	800329c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003298:	7dfb      	ldrb	r3, [r7, #23]
 800329a:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d02f      	beq.n	8003308 <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80032ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80032b0:	d00e      	beq.n	80032d0 <HAL_RCCEx_PeriphCLKConfig+0x510>
 80032b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80032b6:	d814      	bhi.n	80032e2 <HAL_RCCEx_PeriphCLKConfig+0x522>
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d015      	beq.n	80032e8 <HAL_RCCEx_PeriphCLKConfig+0x528>
 80032bc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80032c0:	d10f      	bne.n	80032e2 <HAL_RCCEx_PeriphCLKConfig+0x522>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80032c2:	4b1c      	ldr	r3, [pc, #112]	; (8003334 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80032c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032c6:	4a1b      	ldr	r2, [pc, #108]	; (8003334 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80032c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80032cc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80032ce:	e00c      	b.n	80032ea <HAL_RCCEx_PeriphCLKConfig+0x52a>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	3304      	adds	r3, #4
 80032d4:	2101      	movs	r1, #1
 80032d6:	4618      	mov	r0, r3
 80032d8:	f000 ff2a 	bl	8004130 <RCCEx_PLL2_Config>
 80032dc:	4603      	mov	r3, r0
 80032de:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80032e0:	e003      	b.n	80032ea <HAL_RCCEx_PeriphCLKConfig+0x52a>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80032e2:	2301      	movs	r3, #1
 80032e4:	75fb      	strb	r3, [r7, #23]
      break;
 80032e6:	e000      	b.n	80032ea <HAL_RCCEx_PeriphCLKConfig+0x52a>
      break;
 80032e8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80032ea:	7dfb      	ldrb	r3, [r7, #23]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d109      	bne.n	8003304 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80032f0:	4b10      	ldr	r3, [pc, #64]	; (8003334 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80032f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032f4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80032fc:	490d      	ldr	r1, [pc, #52]	; (8003334 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80032fe:	4313      	orrs	r3, r2
 8003300:	650b      	str	r3, [r1, #80]	; 0x50
 8003302:	e001      	b.n	8003308 <HAL_RCCEx_PeriphCLKConfig+0x548>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003304:	7dfb      	ldrb	r3, [r7, #23]
 8003306:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003310:	2b00      	cmp	r3, #0
 8003312:	d034      	beq.n	800337e <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003318:	2b03      	cmp	r3, #3
 800331a:	d81d      	bhi.n	8003358 <HAL_RCCEx_PeriphCLKConfig+0x598>
 800331c:	a201      	add	r2, pc, #4	; (adr r2, 8003324 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 800331e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003322:	bf00      	nop
 8003324:	0800335f 	.word	0x0800335f
 8003328:	08003339 	.word	0x08003339
 800332c:	08003347 	.word	0x08003347
 8003330:	0800335f 	.word	0x0800335f
 8003334:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003338:	4bb1      	ldr	r3, [pc, #708]	; (8003600 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800333a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800333c:	4ab0      	ldr	r2, [pc, #704]	; (8003600 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800333e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003342:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003344:	e00c      	b.n	8003360 <HAL_RCCEx_PeriphCLKConfig+0x5a0>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	3304      	adds	r3, #4
 800334a:	2102      	movs	r1, #2
 800334c:	4618      	mov	r0, r3
 800334e:	f000 feef 	bl	8004130 <RCCEx_PLL2_Config>
 8003352:	4603      	mov	r3, r0
 8003354:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003356:	e003      	b.n	8003360 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003358:	2301      	movs	r3, #1
 800335a:	75fb      	strb	r3, [r7, #23]
      break;
 800335c:	e000      	b.n	8003360 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      break;
 800335e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003360:	7dfb      	ldrb	r3, [r7, #23]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d109      	bne.n	800337a <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003366:	4ba6      	ldr	r3, [pc, #664]	; (8003600 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003368:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800336a:	f023 0203 	bic.w	r2, r3, #3
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003372:	49a3      	ldr	r1, [pc, #652]	; (8003600 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003374:	4313      	orrs	r3, r2
 8003376:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003378:	e001      	b.n	800337e <HAL_RCCEx_PeriphCLKConfig+0x5be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800337a:	7dfb      	ldrb	r3, [r7, #23]
 800337c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003386:	2b00      	cmp	r3, #0
 8003388:	f000 8086 	beq.w	8003498 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800338c:	4b9d      	ldr	r3, [pc, #628]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4a9c      	ldr	r2, [pc, #624]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8003392:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003396:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003398:	f7fd fe5c 	bl	8001054 <HAL_GetTick>
 800339c:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800339e:	e009      	b.n	80033b4 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033a0:	f7fd fe58 	bl	8001054 <HAL_GetTick>
 80033a4:	4602      	mov	r2, r0
 80033a6:	693b      	ldr	r3, [r7, #16]
 80033a8:	1ad3      	subs	r3, r2, r3
 80033aa:	2b64      	cmp	r3, #100	; 0x64
 80033ac:	d902      	bls.n	80033b4 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
      {
        ret = HAL_TIMEOUT;
 80033ae:	2303      	movs	r3, #3
 80033b0:	75fb      	strb	r3, [r7, #23]
        break;
 80033b2:	e005      	b.n	80033c0 <HAL_RCCEx_PeriphCLKConfig+0x600>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80033b4:	4b93      	ldr	r3, [pc, #588]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d0ef      	beq.n	80033a0 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
      }
    }

    if(ret == HAL_OK)
 80033c0:	7dfb      	ldrb	r3, [r7, #23]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d166      	bne.n	8003494 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80033c6:	4b8e      	ldr	r3, [pc, #568]	; (8003600 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80033c8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80033d0:	4053      	eors	r3, r2
 80033d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d013      	beq.n	8003402 <HAL_RCCEx_PeriphCLKConfig+0x642>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80033da:	4b89      	ldr	r3, [pc, #548]	; (8003600 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80033dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033e2:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80033e4:	4b86      	ldr	r3, [pc, #536]	; (8003600 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80033e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033e8:	4a85      	ldr	r2, [pc, #532]	; (8003600 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80033ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033ee:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80033f0:	4b83      	ldr	r3, [pc, #524]	; (8003600 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80033f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033f4:	4a82      	ldr	r2, [pc, #520]	; (8003600 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80033f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033fa:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80033fc:	4a80      	ldr	r2, [pc, #512]	; (8003600 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003408:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800340c:	d115      	bne.n	800343a <HAL_RCCEx_PeriphCLKConfig+0x67a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800340e:	f7fd fe21 	bl	8001054 <HAL_GetTick>
 8003412:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003414:	e00b      	b.n	800342e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003416:	f7fd fe1d 	bl	8001054 <HAL_GetTick>
 800341a:	4602      	mov	r2, r0
 800341c:	693b      	ldr	r3, [r7, #16]
 800341e:	1ad3      	subs	r3, r2, r3
 8003420:	f241 3288 	movw	r2, #5000	; 0x1388
 8003424:	4293      	cmp	r3, r2
 8003426:	d902      	bls.n	800342e <HAL_RCCEx_PeriphCLKConfig+0x66e>
          {
            ret = HAL_TIMEOUT;
 8003428:	2303      	movs	r3, #3
 800342a:	75fb      	strb	r3, [r7, #23]
            break;
 800342c:	e005      	b.n	800343a <HAL_RCCEx_PeriphCLKConfig+0x67a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800342e:	4b74      	ldr	r3, [pc, #464]	; (8003600 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003430:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003432:	f003 0302 	and.w	r3, r3, #2
 8003436:	2b00      	cmp	r3, #0
 8003438:	d0ed      	beq.n	8003416 <HAL_RCCEx_PeriphCLKConfig+0x656>
          }
        }
      }

      if(ret == HAL_OK)
 800343a:	7dfb      	ldrb	r3, [r7, #23]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d126      	bne.n	800348e <HAL_RCCEx_PeriphCLKConfig+0x6ce>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003446:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800344a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800344e:	d10d      	bne.n	800346c <HAL_RCCEx_PeriphCLKConfig+0x6ac>
 8003450:	4b6b      	ldr	r3, [pc, #428]	; (8003600 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003452:	691b      	ldr	r3, [r3, #16]
 8003454:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800345e:	0919      	lsrs	r1, r3, #4
 8003460:	4b69      	ldr	r3, [pc, #420]	; (8003608 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003462:	400b      	ands	r3, r1
 8003464:	4966      	ldr	r1, [pc, #408]	; (8003600 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003466:	4313      	orrs	r3, r2
 8003468:	610b      	str	r3, [r1, #16]
 800346a:	e005      	b.n	8003478 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
 800346c:	4b64      	ldr	r3, [pc, #400]	; (8003600 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800346e:	691b      	ldr	r3, [r3, #16]
 8003470:	4a63      	ldr	r2, [pc, #396]	; (8003600 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003472:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003476:	6113      	str	r3, [r2, #16]
 8003478:	4b61      	ldr	r3, [pc, #388]	; (8003600 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800347a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003482:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003486:	495e      	ldr	r1, [pc, #376]	; (8003600 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003488:	4313      	orrs	r3, r2
 800348a:	670b      	str	r3, [r1, #112]	; 0x70
 800348c:	e004      	b.n	8003498 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800348e:	7dfb      	ldrb	r3, [r7, #23]
 8003490:	75bb      	strb	r3, [r7, #22]
 8003492:	e001      	b.n	8003498 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003494:	7dfb      	ldrb	r3, [r7, #23]
 8003496:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f003 0301 	and.w	r3, r3, #1
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d07e      	beq.n	80035a2 <HAL_RCCEx_PeriphCLKConfig+0x7e2>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034a8:	2b28      	cmp	r3, #40	; 0x28
 80034aa:	d867      	bhi.n	800357c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
 80034ac:	a201      	add	r2, pc, #4	; (adr r2, 80034b4 <HAL_RCCEx_PeriphCLKConfig+0x6f4>)
 80034ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034b2:	bf00      	nop
 80034b4:	08003583 	.word	0x08003583
 80034b8:	0800357d 	.word	0x0800357d
 80034bc:	0800357d 	.word	0x0800357d
 80034c0:	0800357d 	.word	0x0800357d
 80034c4:	0800357d 	.word	0x0800357d
 80034c8:	0800357d 	.word	0x0800357d
 80034cc:	0800357d 	.word	0x0800357d
 80034d0:	0800357d 	.word	0x0800357d
 80034d4:	08003559 	.word	0x08003559
 80034d8:	0800357d 	.word	0x0800357d
 80034dc:	0800357d 	.word	0x0800357d
 80034e0:	0800357d 	.word	0x0800357d
 80034e4:	0800357d 	.word	0x0800357d
 80034e8:	0800357d 	.word	0x0800357d
 80034ec:	0800357d 	.word	0x0800357d
 80034f0:	0800357d 	.word	0x0800357d
 80034f4:	0800356b 	.word	0x0800356b
 80034f8:	0800357d 	.word	0x0800357d
 80034fc:	0800357d 	.word	0x0800357d
 8003500:	0800357d 	.word	0x0800357d
 8003504:	0800357d 	.word	0x0800357d
 8003508:	0800357d 	.word	0x0800357d
 800350c:	0800357d 	.word	0x0800357d
 8003510:	0800357d 	.word	0x0800357d
 8003514:	08003583 	.word	0x08003583
 8003518:	0800357d 	.word	0x0800357d
 800351c:	0800357d 	.word	0x0800357d
 8003520:	0800357d 	.word	0x0800357d
 8003524:	0800357d 	.word	0x0800357d
 8003528:	0800357d 	.word	0x0800357d
 800352c:	0800357d 	.word	0x0800357d
 8003530:	0800357d 	.word	0x0800357d
 8003534:	08003583 	.word	0x08003583
 8003538:	0800357d 	.word	0x0800357d
 800353c:	0800357d 	.word	0x0800357d
 8003540:	0800357d 	.word	0x0800357d
 8003544:	0800357d 	.word	0x0800357d
 8003548:	0800357d 	.word	0x0800357d
 800354c:	0800357d 	.word	0x0800357d
 8003550:	0800357d 	.word	0x0800357d
 8003554:	08003583 	.word	0x08003583
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	3304      	adds	r3, #4
 800355c:	2101      	movs	r1, #1
 800355e:	4618      	mov	r0, r3
 8003560:	f000 fde6 	bl	8004130 <RCCEx_PLL2_Config>
 8003564:	4603      	mov	r3, r0
 8003566:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003568:	e00c      	b.n	8003584 <HAL_RCCEx_PeriphCLKConfig+0x7c4>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	3324      	adds	r3, #36	; 0x24
 800356e:	2101      	movs	r1, #1
 8003570:	4618      	mov	r0, r3
 8003572:	f000 fe8f 	bl	8004294 <RCCEx_PLL3_Config>
 8003576:	4603      	mov	r3, r0
 8003578:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800357a:	e003      	b.n	8003584 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800357c:	2301      	movs	r3, #1
 800357e:	75fb      	strb	r3, [r7, #23]
      break;
 8003580:	e000      	b.n	8003584 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      break;
 8003582:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003584:	7dfb      	ldrb	r3, [r7, #23]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d109      	bne.n	800359e <HAL_RCCEx_PeriphCLKConfig+0x7de>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800358a:	4b1d      	ldr	r3, [pc, #116]	; (8003600 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800358c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800358e:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003596:	491a      	ldr	r1, [pc, #104]	; (8003600 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003598:	4313      	orrs	r3, r2
 800359a:	654b      	str	r3, [r1, #84]	; 0x54
 800359c:	e001      	b.n	80035a2 <HAL_RCCEx_PeriphCLKConfig+0x7e2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800359e:	7dfb      	ldrb	r3, [r7, #23]
 80035a0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f003 0302 	and.w	r3, r3, #2
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d03e      	beq.n	800362c <HAL_RCCEx_PeriphCLKConfig+0x86c>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035b2:	2b05      	cmp	r3, #5
 80035b4:	d820      	bhi.n	80035f8 <HAL_RCCEx_PeriphCLKConfig+0x838>
 80035b6:	a201      	add	r2, pc, #4	; (adr r2, 80035bc <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 80035b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035bc:	0800360d 	.word	0x0800360d
 80035c0:	080035d5 	.word	0x080035d5
 80035c4:	080035e7 	.word	0x080035e7
 80035c8:	0800360d 	.word	0x0800360d
 80035cc:	0800360d 	.word	0x0800360d
 80035d0:	0800360d 	.word	0x0800360d
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	3304      	adds	r3, #4
 80035d8:	2101      	movs	r1, #1
 80035da:	4618      	mov	r0, r3
 80035dc:	f000 fda8 	bl	8004130 <RCCEx_PLL2_Config>
 80035e0:	4603      	mov	r3, r0
 80035e2:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80035e4:	e013      	b.n	800360e <HAL_RCCEx_PeriphCLKConfig+0x84e>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	3324      	adds	r3, #36	; 0x24
 80035ea:	2101      	movs	r1, #1
 80035ec:	4618      	mov	r0, r3
 80035ee:	f000 fe51 	bl	8004294 <RCCEx_PLL3_Config>
 80035f2:	4603      	mov	r3, r0
 80035f4:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80035f6:	e00a      	b.n	800360e <HAL_RCCEx_PeriphCLKConfig+0x84e>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80035f8:	2301      	movs	r3, #1
 80035fa:	75fb      	strb	r3, [r7, #23]
      break;
 80035fc:	e007      	b.n	800360e <HAL_RCCEx_PeriphCLKConfig+0x84e>
 80035fe:	bf00      	nop
 8003600:	58024400 	.word	0x58024400
 8003604:	58024800 	.word	0x58024800
 8003608:	00ffffcf 	.word	0x00ffffcf
      break;
 800360c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800360e:	7dfb      	ldrb	r3, [r7, #23]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d109      	bne.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0x868>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003614:	4b9f      	ldr	r3, [pc, #636]	; (8003894 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8003616:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003618:	f023 0207 	bic.w	r2, r3, #7
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003620:	499c      	ldr	r1, [pc, #624]	; (8003894 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8003622:	4313      	orrs	r3, r2
 8003624:	654b      	str	r3, [r1, #84]	; 0x54
 8003626:	e001      	b.n	800362c <HAL_RCCEx_PeriphCLKConfig+0x86c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003628:	7dfb      	ldrb	r3, [r7, #23]
 800362a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f003 0304 	and.w	r3, r3, #4
 8003634:	2b00      	cmp	r3, #0
 8003636:	d039      	beq.n	80036ac <HAL_RCCEx_PeriphCLKConfig+0x8ec>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800363e:	2b05      	cmp	r3, #5
 8003640:	d820      	bhi.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
 8003642:	a201      	add	r2, pc, #4	; (adr r2, 8003648 <HAL_RCCEx_PeriphCLKConfig+0x888>)
 8003644:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003648:	0800368b 	.word	0x0800368b
 800364c:	08003661 	.word	0x08003661
 8003650:	08003673 	.word	0x08003673
 8003654:	0800368b 	.word	0x0800368b
 8003658:	0800368b 	.word	0x0800368b
 800365c:	0800368b 	.word	0x0800368b
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	3304      	adds	r3, #4
 8003664:	2101      	movs	r1, #1
 8003666:	4618      	mov	r0, r3
 8003668:	f000 fd62 	bl	8004130 <RCCEx_PLL2_Config>
 800366c:	4603      	mov	r3, r0
 800366e:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003670:	e00c      	b.n	800368c <HAL_RCCEx_PeriphCLKConfig+0x8cc>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	3324      	adds	r3, #36	; 0x24
 8003676:	2101      	movs	r1, #1
 8003678:	4618      	mov	r0, r3
 800367a:	f000 fe0b 	bl	8004294 <RCCEx_PLL3_Config>
 800367e:	4603      	mov	r3, r0
 8003680:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003682:	e003      	b.n	800368c <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003684:	2301      	movs	r3, #1
 8003686:	75fb      	strb	r3, [r7, #23]
      break;
 8003688:	e000      	b.n	800368c <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      break;
 800368a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800368c:	7dfb      	ldrb	r3, [r7, #23]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d10a      	bne.n	80036a8 <HAL_RCCEx_PeriphCLKConfig+0x8e8>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003692:	4b80      	ldr	r3, [pc, #512]	; (8003894 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8003694:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003696:	f023 0207 	bic.w	r2, r3, #7
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80036a0:	497c      	ldr	r1, [pc, #496]	; (8003894 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80036a2:	4313      	orrs	r3, r2
 80036a4:	658b      	str	r3, [r1, #88]	; 0x58
 80036a6:	e001      	b.n	80036ac <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036a8:	7dfb      	ldrb	r3, [r7, #23]
 80036aa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f003 0320 	and.w	r3, r3, #32
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d04b      	beq.n	8003750 <HAL_RCCEx_PeriphCLKConfig+0x990>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036be:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80036c2:	d02e      	beq.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0x962>
 80036c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80036c8:	d828      	bhi.n	800371c <HAL_RCCEx_PeriphCLKConfig+0x95c>
 80036ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036ce:	d02a      	beq.n	8003726 <HAL_RCCEx_PeriphCLKConfig+0x966>
 80036d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036d4:	d822      	bhi.n	800371c <HAL_RCCEx_PeriphCLKConfig+0x95c>
 80036d6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80036da:	d026      	beq.n	800372a <HAL_RCCEx_PeriphCLKConfig+0x96a>
 80036dc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80036e0:	d81c      	bhi.n	800371c <HAL_RCCEx_PeriphCLKConfig+0x95c>
 80036e2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80036e6:	d010      	beq.n	800370a <HAL_RCCEx_PeriphCLKConfig+0x94a>
 80036e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80036ec:	d816      	bhi.n	800371c <HAL_RCCEx_PeriphCLKConfig+0x95c>
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d01d      	beq.n	800372e <HAL_RCCEx_PeriphCLKConfig+0x96e>
 80036f2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80036f6:	d111      	bne.n	800371c <HAL_RCCEx_PeriphCLKConfig+0x95c>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	3304      	adds	r3, #4
 80036fc:	2100      	movs	r1, #0
 80036fe:	4618      	mov	r0, r3
 8003700:	f000 fd16 	bl	8004130 <RCCEx_PLL2_Config>
 8003704:	4603      	mov	r3, r0
 8003706:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003708:	e012      	b.n	8003730 <HAL_RCCEx_PeriphCLKConfig+0x970>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	3324      	adds	r3, #36	; 0x24
 800370e:	2102      	movs	r1, #2
 8003710:	4618      	mov	r0, r3
 8003712:	f000 fdbf 	bl	8004294 <RCCEx_PLL3_Config>
 8003716:	4603      	mov	r3, r0
 8003718:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800371a:	e009      	b.n	8003730 <HAL_RCCEx_PeriphCLKConfig+0x970>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800371c:	2301      	movs	r3, #1
 800371e:	75fb      	strb	r3, [r7, #23]
      break;
 8003720:	e006      	b.n	8003730 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8003722:	bf00      	nop
 8003724:	e004      	b.n	8003730 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8003726:	bf00      	nop
 8003728:	e002      	b.n	8003730 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 800372a:	bf00      	nop
 800372c:	e000      	b.n	8003730 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 800372e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003730:	7dfb      	ldrb	r3, [r7, #23]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d10a      	bne.n	800374c <HAL_RCCEx_PeriphCLKConfig+0x98c>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003736:	4b57      	ldr	r3, [pc, #348]	; (8003894 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8003738:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800373a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003744:	4953      	ldr	r1, [pc, #332]	; (8003894 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8003746:	4313      	orrs	r3, r2
 8003748:	654b      	str	r3, [r1, #84]	; 0x54
 800374a:	e001      	b.n	8003750 <HAL_RCCEx_PeriphCLKConfig+0x990>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800374c:	7dfb      	ldrb	r3, [r7, #23]
 800374e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003758:	2b00      	cmp	r3, #0
 800375a:	d04b      	beq.n	80037f4 <HAL_RCCEx_PeriphCLKConfig+0xa34>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003762:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003766:	d02e      	beq.n	80037c6 <HAL_RCCEx_PeriphCLKConfig+0xa06>
 8003768:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800376c:	d828      	bhi.n	80037c0 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800376e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003772:	d02a      	beq.n	80037ca <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 8003774:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003778:	d822      	bhi.n	80037c0 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800377a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800377e:	d026      	beq.n	80037ce <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 8003780:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003784:	d81c      	bhi.n	80037c0 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8003786:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800378a:	d010      	beq.n	80037ae <HAL_RCCEx_PeriphCLKConfig+0x9ee>
 800378c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003790:	d816      	bhi.n	80037c0 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8003792:	2b00      	cmp	r3, #0
 8003794:	d01d      	beq.n	80037d2 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8003796:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800379a:	d111      	bne.n	80037c0 <HAL_RCCEx_PeriphCLKConfig+0xa00>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	3304      	adds	r3, #4
 80037a0:	2100      	movs	r1, #0
 80037a2:	4618      	mov	r0, r3
 80037a4:	f000 fcc4 	bl	8004130 <RCCEx_PLL2_Config>
 80037a8:	4603      	mov	r3, r0
 80037aa:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80037ac:	e012      	b.n	80037d4 <HAL_RCCEx_PeriphCLKConfig+0xa14>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	3324      	adds	r3, #36	; 0x24
 80037b2:	2102      	movs	r1, #2
 80037b4:	4618      	mov	r0, r3
 80037b6:	f000 fd6d 	bl	8004294 <RCCEx_PLL3_Config>
 80037ba:	4603      	mov	r3, r0
 80037bc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80037be:	e009      	b.n	80037d4 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80037c0:	2301      	movs	r3, #1
 80037c2:	75fb      	strb	r3, [r7, #23]
      break;
 80037c4:	e006      	b.n	80037d4 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 80037c6:	bf00      	nop
 80037c8:	e004      	b.n	80037d4 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 80037ca:	bf00      	nop
 80037cc:	e002      	b.n	80037d4 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 80037ce:	bf00      	nop
 80037d0:	e000      	b.n	80037d4 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 80037d2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80037d4:	7dfb      	ldrb	r3, [r7, #23]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d10a      	bne.n	80037f0 <HAL_RCCEx_PeriphCLKConfig+0xa30>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80037da:	4b2e      	ldr	r3, [pc, #184]	; (8003894 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80037dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037de:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80037e8:	492a      	ldr	r1, [pc, #168]	; (8003894 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80037ea:	4313      	orrs	r3, r2
 80037ec:	658b      	str	r3, [r1, #88]	; 0x58
 80037ee:	e001      	b.n	80037f4 <HAL_RCCEx_PeriphCLKConfig+0xa34>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037f0:	7dfb      	ldrb	r3, [r7, #23]
 80037f2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d04d      	beq.n	800389c <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003806:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800380a:	d02e      	beq.n	800386a <HAL_RCCEx_PeriphCLKConfig+0xaaa>
 800380c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003810:	d828      	bhi.n	8003864 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8003812:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003816:	d02a      	beq.n	800386e <HAL_RCCEx_PeriphCLKConfig+0xaae>
 8003818:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800381c:	d822      	bhi.n	8003864 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800381e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003822:	d026      	beq.n	8003872 <HAL_RCCEx_PeriphCLKConfig+0xab2>
 8003824:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003828:	d81c      	bhi.n	8003864 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800382a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800382e:	d010      	beq.n	8003852 <HAL_RCCEx_PeriphCLKConfig+0xa92>
 8003830:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003834:	d816      	bhi.n	8003864 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8003836:	2b00      	cmp	r3, #0
 8003838:	d01d      	beq.n	8003876 <HAL_RCCEx_PeriphCLKConfig+0xab6>
 800383a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800383e:	d111      	bne.n	8003864 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	3304      	adds	r3, #4
 8003844:	2100      	movs	r1, #0
 8003846:	4618      	mov	r0, r3
 8003848:	f000 fc72 	bl	8004130 <RCCEx_PLL2_Config>
 800384c:	4603      	mov	r3, r0
 800384e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003850:	e012      	b.n	8003878 <HAL_RCCEx_PeriphCLKConfig+0xab8>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	3324      	adds	r3, #36	; 0x24
 8003856:	2102      	movs	r1, #2
 8003858:	4618      	mov	r0, r3
 800385a:	f000 fd1b 	bl	8004294 <RCCEx_PLL3_Config>
 800385e:	4603      	mov	r3, r0
 8003860:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003862:	e009      	b.n	8003878 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003864:	2301      	movs	r3, #1
 8003866:	75fb      	strb	r3, [r7, #23]
      break;
 8003868:	e006      	b.n	8003878 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800386a:	bf00      	nop
 800386c:	e004      	b.n	8003878 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800386e:	bf00      	nop
 8003870:	e002      	b.n	8003878 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8003872:	bf00      	nop
 8003874:	e000      	b.n	8003878 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8003876:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003878:	7dfb      	ldrb	r3, [r7, #23]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d10c      	bne.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800387e:	4b05      	ldr	r3, [pc, #20]	; (8003894 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8003880:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003882:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800388c:	4901      	ldr	r1, [pc, #4]	; (8003894 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800388e:	4313      	orrs	r3, r2
 8003890:	658b      	str	r3, [r1, #88]	; 0x58
 8003892:	e003      	b.n	800389c <HAL_RCCEx_PeriphCLKConfig+0xadc>
 8003894:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003898:	7dfb      	ldrb	r3, [r7, #23]
 800389a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f003 0308 	and.w	r3, r3, #8
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d018      	beq.n	80038da <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection )== RCC_I2C1235CLKSOURCE_PLL3 )
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80038ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038b0:	d10a      	bne.n	80038c8 <HAL_RCCEx_PeriphCLKConfig+0xb08>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	3324      	adds	r3, #36	; 0x24
 80038b6:	2102      	movs	r1, #2
 80038b8:	4618      	mov	r0, r3
 80038ba:	f000 fceb 	bl	8004294 <RCCEx_PLL3_Config>
 80038be:	4603      	mov	r3, r0
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d001      	beq.n	80038c8 <HAL_RCCEx_PeriphCLKConfig+0xb08>
        {
          status = HAL_ERROR;
 80038c4:	2301      	movs	r3, #1
 80038c6:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 80038c8:	4b8a      	ldr	r3, [pc, #552]	; (8003af4 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80038ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038cc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80038d4:	4987      	ldr	r1, [pc, #540]	; (8003af4 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80038d6:	4313      	orrs	r3, r2
 80038d8:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f003 0310 	and.w	r3, r3, #16
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d01a      	beq.n	800391c <HAL_RCCEx_PeriphCLKConfig+0xb5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80038f0:	d10a      	bne.n	8003908 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	3324      	adds	r3, #36	; 0x24
 80038f6:	2102      	movs	r1, #2
 80038f8:	4618      	mov	r0, r3
 80038fa:	f000 fccb 	bl	8004294 <RCCEx_PLL3_Config>
 80038fe:	4603      	mov	r3, r0
 8003900:	2b00      	cmp	r3, #0
 8003902:	d001      	beq.n	8003908 <HAL_RCCEx_PeriphCLKConfig+0xb48>
      {
        status = HAL_ERROR;
 8003904:	2301      	movs	r3, #1
 8003906:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003908:	4b7a      	ldr	r3, [pc, #488]	; (8003af4 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800390a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800390c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003916:	4977      	ldr	r1, [pc, #476]	; (8003af4 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8003918:	4313      	orrs	r3, r2
 800391a:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003924:	2b00      	cmp	r3, #0
 8003926:	d034      	beq.n	8003992 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800392e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003932:	d01d      	beq.n	8003970 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8003934:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003938:	d817      	bhi.n	800396a <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 800393a:	2b00      	cmp	r3, #0
 800393c:	d003      	beq.n	8003946 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 800393e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003942:	d009      	beq.n	8003958 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8003944:	e011      	b.n	800396a <HAL_RCCEx_PeriphCLKConfig+0xbaa>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	3304      	adds	r3, #4
 800394a:	2100      	movs	r1, #0
 800394c:	4618      	mov	r0, r3
 800394e:	f000 fbef 	bl	8004130 <RCCEx_PLL2_Config>
 8003952:	4603      	mov	r3, r0
 8003954:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8003956:	e00c      	b.n	8003972 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	3324      	adds	r3, #36	; 0x24
 800395c:	2102      	movs	r1, #2
 800395e:	4618      	mov	r0, r3
 8003960:	f000 fc98 	bl	8004294 <RCCEx_PLL3_Config>
 8003964:	4603      	mov	r3, r0
 8003966:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8003968:	e003      	b.n	8003972 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800396a:	2301      	movs	r3, #1
 800396c:	75fb      	strb	r3, [r7, #23]
      break;
 800396e:	e000      	b.n	8003972 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      break;
 8003970:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003972:	7dfb      	ldrb	r3, [r7, #23]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d10a      	bne.n	800398e <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003978:	4b5e      	ldr	r3, [pc, #376]	; (8003af4 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800397a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800397c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003986:	495b      	ldr	r1, [pc, #364]	; (8003af4 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8003988:	4313      	orrs	r3, r2
 800398a:	658b      	str	r3, [r1, #88]	; 0x58
 800398c:	e001      	b.n	8003992 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800398e:	7dfb      	ldrb	r3, [r7, #23]
 8003990:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800399a:	2b00      	cmp	r3, #0
 800399c:	d033      	beq.n	8003a06 <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80039a4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80039a8:	d01c      	beq.n	80039e4 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 80039aa:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80039ae:	d816      	bhi.n	80039de <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80039b0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80039b4:	d003      	beq.n	80039be <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 80039b6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80039ba:	d007      	beq.n	80039cc <HAL_RCCEx_PeriphCLKConfig+0xc0c>
 80039bc:	e00f      	b.n	80039de <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80039be:	4b4d      	ldr	r3, [pc, #308]	; (8003af4 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80039c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039c2:	4a4c      	ldr	r2, [pc, #304]	; (8003af4 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80039c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039c8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80039ca:	e00c      	b.n	80039e6 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	3324      	adds	r3, #36	; 0x24
 80039d0:	2101      	movs	r1, #1
 80039d2:	4618      	mov	r0, r3
 80039d4:	f000 fc5e 	bl	8004294 <RCCEx_PLL3_Config>
 80039d8:	4603      	mov	r3, r0
 80039da:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80039dc:	e003      	b.n	80039e6 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80039de:	2301      	movs	r3, #1
 80039e0:	75fb      	strb	r3, [r7, #23]
      break;
 80039e2:	e000      	b.n	80039e6 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      break;
 80039e4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80039e6:	7dfb      	ldrb	r3, [r7, #23]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d10a      	bne.n	8003a02 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80039ec:	4b41      	ldr	r3, [pc, #260]	; (8003af4 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80039ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039f0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80039fa:	493e      	ldr	r1, [pc, #248]	; (8003af4 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80039fc:	4313      	orrs	r3, r2
 80039fe:	654b      	str	r3, [r1, #84]	; 0x54
 8003a00:	e001      	b.n	8003a06 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a02:	7dfb      	ldrb	r3, [r7, #23]
 8003a04:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d029      	beq.n	8003a66 <HAL_RCCEx_PeriphCLKConfig+0xca6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d003      	beq.n	8003a22 <HAL_RCCEx_PeriphCLKConfig+0xc62>
 8003a1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a1e:	d007      	beq.n	8003a30 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8003a20:	e00f      	b.n	8003a42 <HAL_RCCEx_PeriphCLKConfig+0xc82>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a22:	4b34      	ldr	r3, [pc, #208]	; (8003af4 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8003a24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a26:	4a33      	ldr	r2, [pc, #204]	; (8003af4 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8003a28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a2c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8003a2e:	e00b      	b.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0xc88>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	3304      	adds	r3, #4
 8003a34:	2102      	movs	r1, #2
 8003a36:	4618      	mov	r0, r3
 8003a38:	f000 fb7a 	bl	8004130 <RCCEx_PLL2_Config>
 8003a3c:	4603      	mov	r3, r0
 8003a3e:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8003a40:	e002      	b.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0xc88>

    default:
      ret = HAL_ERROR;
 8003a42:	2301      	movs	r3, #1
 8003a44:	75fb      	strb	r3, [r7, #23]
      break;
 8003a46:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a48:	7dfb      	ldrb	r3, [r7, #23]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d109      	bne.n	8003a62 <HAL_RCCEx_PeriphCLKConfig+0xca2>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003a4e:	4b29      	ldr	r3, [pc, #164]	; (8003af4 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8003a50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a52:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a5a:	4926      	ldr	r1, [pc, #152]	; (8003af4 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8003a5c:	4313      	orrs	r3, r2
 8003a5e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003a60:	e001      	b.n	8003a66 <HAL_RCCEx_PeriphCLKConfig+0xca6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a62:	7dfb      	ldrb	r3, [r7, #23]
 8003a64:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d00a      	beq.n	8003a88 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	3324      	adds	r3, #36	; 0x24
 8003a76:	2102      	movs	r1, #2
 8003a78:	4618      	mov	r0, r3
 8003a7a:	f000 fc0b 	bl	8004294 <RCCEx_PLL3_Config>
 8003a7e:	4603      	mov	r3, r0
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d001      	beq.n	8003a88 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
    {
      status=HAL_ERROR;
 8003a84:	2301      	movs	r3, #1
 8003a86:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d033      	beq.n	8003afc <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {

    switch(PeriphClkInit->RngClockSelection)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003a98:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003a9c:	d017      	beq.n	8003ace <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 8003a9e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003aa2:	d811      	bhi.n	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8003aa4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003aa8:	d013      	beq.n	8003ad2 <HAL_RCCEx_PeriphCLKConfig+0xd12>
 8003aaa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003aae:	d80b      	bhi.n	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d010      	beq.n	8003ad6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
 8003ab4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ab8:	d106      	bne.n	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0xd08>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003aba:	4b0e      	ldr	r3, [pc, #56]	; (8003af4 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8003abc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003abe:	4a0d      	ldr	r2, [pc, #52]	; (8003af4 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8003ac0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ac4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8003ac6:	e007      	b.n	8003ad8 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003ac8:	2301      	movs	r3, #1
 8003aca:	75fb      	strb	r3, [r7, #23]
      break;
 8003acc:	e004      	b.n	8003ad8 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 8003ace:	bf00      	nop
 8003ad0:	e002      	b.n	8003ad8 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 8003ad2:	bf00      	nop
 8003ad4:	e000      	b.n	8003ad8 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 8003ad6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ad8:	7dfb      	ldrb	r3, [r7, #23]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d10c      	bne.n	8003af8 <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003ade:	4b05      	ldr	r3, [pc, #20]	; (8003af4 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8003ae0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ae2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003aea:	4902      	ldr	r1, [pc, #8]	; (8003af4 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8003aec:	4313      	orrs	r3, r2
 8003aee:	654b      	str	r3, [r1, #84]	; 0x54
 8003af0:	e004      	b.n	8003afc <HAL_RCCEx_PeriphCLKConfig+0xd3c>
 8003af2:	bf00      	nop
 8003af4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003af8:	7dfb      	ldrb	r3, [r7, #23]
 8003afa:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d008      	beq.n	8003b1a <HAL_RCCEx_PeriphCLKConfig+0xd5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003b08:	4b29      	ldr	r3, [pc, #164]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8003b0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b0c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b14:	4926      	ldr	r1, [pc, #152]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8003b16:	4313      	orrs	r3, r2
 8003b18:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d008      	beq.n	8003b38 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003b26:	4b22      	ldr	r3, [pc, #136]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8003b28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b2a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003b32:	491f      	ldr	r1, [pc, #124]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8003b34:	4313      	orrs	r3, r2
 8003b36:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d00d      	beq.n	8003b60 <HAL_RCCEx_PeriphCLKConfig+0xda0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003b44:	4b1a      	ldr	r3, [pc, #104]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8003b46:	691b      	ldr	r3, [r3, #16]
 8003b48:	4a19      	ldr	r2, [pc, #100]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8003b4a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003b4e:	6113      	str	r3, [r2, #16]
 8003b50:	4b17      	ldr	r3, [pc, #92]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8003b52:	691a      	ldr	r2, [r3, #16]
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003b5a:	4915      	ldr	r1, [pc, #84]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8003b5c:	4313      	orrs	r3, r2
 8003b5e:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	da08      	bge.n	8003b7a <HAL_RCCEx_PeriphCLKConfig+0xdba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003b68:	4b11      	ldr	r3, [pc, #68]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8003b6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b6c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b74:	490e      	ldr	r1, [pc, #56]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8003b76:	4313      	orrs	r3, r2
 8003b78:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d009      	beq.n	8003b9a <HAL_RCCEx_PeriphCLKConfig+0xdda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003b86:	4b0a      	ldr	r3, [pc, #40]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8003b88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b8a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b94:	4906      	ldr	r1, [pc, #24]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8003b96:	4313      	orrs	r3, r2
 8003b98:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8003b9a:	7dbb      	ldrb	r3, [r7, #22]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d101      	bne.n	8003ba4 <HAL_RCCEx_PeriphCLKConfig+0xde4>
  {
    return HAL_OK;
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	e000      	b.n	8003ba6 <HAL_RCCEx_PeriphCLKConfig+0xde6>
  }
  return HAL_ERROR;
 8003ba4:	2301      	movs	r3, #1
}
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	3718      	adds	r7, #24
 8003baa:	46bd      	mov	sp, r7
 8003bac:	bd80      	pop	{r7, pc}
 8003bae:	bf00      	nop
 8003bb0:	58024400 	.word	0x58024400

08003bb4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8003bb8:	f7ff f864 	bl	8002c84 <HAL_RCC_GetHCLKFreq>
 8003bbc:	4602      	mov	r2, r0
 8003bbe:	4b06      	ldr	r3, [pc, #24]	; (8003bd8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8003bc0:	6a1b      	ldr	r3, [r3, #32]
 8003bc2:	091b      	lsrs	r3, r3, #4
 8003bc4:	f003 0307 	and.w	r3, r3, #7
 8003bc8:	4904      	ldr	r1, [pc, #16]	; (8003bdc <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8003bca:	5ccb      	ldrb	r3, [r1, r3]
 8003bcc:	f003 031f 	and.w	r3, r3, #31
 8003bd0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	bd80      	pop	{r7, pc}
 8003bd8:	58024400 	.word	0x58024400
 8003bdc:	08008aa8 	.word	0x08008aa8

08003be0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8003be0:	b480      	push	{r7}
 8003be2:	b089      	sub	sp, #36	; 0x24
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003be8:	4ba1      	ldr	r3, [pc, #644]	; (8003e70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003bea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bec:	f003 0303 	and.w	r3, r3, #3
 8003bf0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8003bf2:	4b9f      	ldr	r3, [pc, #636]	; (8003e70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003bf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bf6:	0b1b      	lsrs	r3, r3, #12
 8003bf8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003bfc:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8003bfe:	4b9c      	ldr	r3, [pc, #624]	; (8003e70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003c00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c02:	091b      	lsrs	r3, r3, #4
 8003c04:	f003 0301 	and.w	r3, r3, #1
 8003c08:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8003c0a:	4b99      	ldr	r3, [pc, #612]	; (8003e70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003c0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c0e:	08db      	lsrs	r3, r3, #3
 8003c10:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003c14:	693a      	ldr	r2, [r7, #16]
 8003c16:	fb02 f303 	mul.w	r3, r2, r3
 8003c1a:	ee07 3a90 	vmov	s15, r3
 8003c1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c22:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8003c26:	697b      	ldr	r3, [r7, #20]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	f000 8111 	beq.w	8003e50 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8003c2e:	69bb      	ldr	r3, [r7, #24]
 8003c30:	2b02      	cmp	r3, #2
 8003c32:	f000 8083 	beq.w	8003d3c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8003c36:	69bb      	ldr	r3, [r7, #24]
 8003c38:	2b02      	cmp	r3, #2
 8003c3a:	f200 80a1 	bhi.w	8003d80 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8003c3e:	69bb      	ldr	r3, [r7, #24]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d003      	beq.n	8003c4c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8003c44:	69bb      	ldr	r3, [r7, #24]
 8003c46:	2b01      	cmp	r3, #1
 8003c48:	d056      	beq.n	8003cf8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8003c4a:	e099      	b.n	8003d80 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003c4c:	4b88      	ldr	r3, [pc, #544]	; (8003e70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f003 0320 	and.w	r3, r3, #32
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d02d      	beq.n	8003cb4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003c58:	4b85      	ldr	r3, [pc, #532]	; (8003e70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	08db      	lsrs	r3, r3, #3
 8003c5e:	f003 0303 	and.w	r3, r3, #3
 8003c62:	4a84      	ldr	r2, [pc, #528]	; (8003e74 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8003c64:	fa22 f303 	lsr.w	r3, r2, r3
 8003c68:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003c6a:	68bb      	ldr	r3, [r7, #8]
 8003c6c:	ee07 3a90 	vmov	s15, r3
 8003c70:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c74:	697b      	ldr	r3, [r7, #20]
 8003c76:	ee07 3a90 	vmov	s15, r3
 8003c7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c82:	4b7b      	ldr	r3, [pc, #492]	; (8003e70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003c84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c8a:	ee07 3a90 	vmov	s15, r3
 8003c8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c92:	ed97 6a03 	vldr	s12, [r7, #12]
 8003c96:	eddf 5a78 	vldr	s11, [pc, #480]	; 8003e78 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003c9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003c9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003ca2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003ca6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003caa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003cae:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8003cb2:	e087      	b.n	8003dc4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003cb4:	697b      	ldr	r3, [r7, #20]
 8003cb6:	ee07 3a90 	vmov	s15, r3
 8003cba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003cbe:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8003e7c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8003cc2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003cc6:	4b6a      	ldr	r3, [pc, #424]	; (8003e70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003cc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003cce:	ee07 3a90 	vmov	s15, r3
 8003cd2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003cd6:	ed97 6a03 	vldr	s12, [r7, #12]
 8003cda:	eddf 5a67 	vldr	s11, [pc, #412]	; 8003e78 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003cde:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003ce2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003ce6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003cea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003cee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003cf2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003cf6:	e065      	b.n	8003dc4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003cf8:	697b      	ldr	r3, [r7, #20]
 8003cfa:	ee07 3a90 	vmov	s15, r3
 8003cfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d02:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8003e80 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003d06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d0a:	4b59      	ldr	r3, [pc, #356]	; (8003e70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003d0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d12:	ee07 3a90 	vmov	s15, r3
 8003d16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d1a:	ed97 6a03 	vldr	s12, [r7, #12]
 8003d1e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8003e78 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003d22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003d26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d2a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003d2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003d32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d36:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003d3a:	e043      	b.n	8003dc4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003d3c:	697b      	ldr	r3, [r7, #20]
 8003d3e:	ee07 3a90 	vmov	s15, r3
 8003d42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d46:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8003e84 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8003d4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d4e:	4b48      	ldr	r3, [pc, #288]	; (8003e70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003d50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d56:	ee07 3a90 	vmov	s15, r3
 8003d5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d5e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003d62:	eddf 5a45 	vldr	s11, [pc, #276]	; 8003e78 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003d66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003d6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d6e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003d72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003d76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d7a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003d7e:	e021      	b.n	8003dc4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003d80:	697b      	ldr	r3, [r7, #20]
 8003d82:	ee07 3a90 	vmov	s15, r3
 8003d86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d8a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8003e80 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003d8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d92:	4b37      	ldr	r3, [pc, #220]	; (8003e70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003d94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d9a:	ee07 3a90 	vmov	s15, r3
 8003d9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003da2:	ed97 6a03 	vldr	s12, [r7, #12]
 8003da6:	eddf 5a34 	vldr	s11, [pc, #208]	; 8003e78 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003daa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003dae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003db2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003db6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003dba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003dbe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003dc2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8003dc4:	4b2a      	ldr	r3, [pc, #168]	; (8003e70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003dc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dc8:	0a5b      	lsrs	r3, r3, #9
 8003dca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003dce:	ee07 3a90 	vmov	s15, r3
 8003dd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003dd6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003dda:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003dde:	edd7 6a07 	vldr	s13, [r7, #28]
 8003de2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003de6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003dea:	ee17 2a90 	vmov	r2, s15
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8003df2:	4b1f      	ldr	r3, [pc, #124]	; (8003e70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003df4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003df6:	0c1b      	lsrs	r3, r3, #16
 8003df8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003dfc:	ee07 3a90 	vmov	s15, r3
 8003e00:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e04:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003e08:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003e0c:	edd7 6a07 	vldr	s13, [r7, #28]
 8003e10:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003e14:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003e18:	ee17 2a90 	vmov	r2, s15
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8003e20:	4b13      	ldr	r3, [pc, #76]	; (8003e70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003e22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e24:	0e1b      	lsrs	r3, r3, #24
 8003e26:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003e2a:	ee07 3a90 	vmov	s15, r3
 8003e2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e32:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003e36:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003e3a:	edd7 6a07 	vldr	s13, [r7, #28]
 8003e3e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003e42:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003e46:	ee17 2a90 	vmov	r2, s15
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8003e4e:	e008      	b.n	8003e62 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2200      	movs	r2, #0
 8003e54:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2200      	movs	r2, #0
 8003e5a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2200      	movs	r2, #0
 8003e60:	609a      	str	r2, [r3, #8]
}
 8003e62:	bf00      	nop
 8003e64:	3724      	adds	r7, #36	; 0x24
 8003e66:	46bd      	mov	sp, r7
 8003e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6c:	4770      	bx	lr
 8003e6e:	bf00      	nop
 8003e70:	58024400 	.word	0x58024400
 8003e74:	03d09000 	.word	0x03d09000
 8003e78:	46000000 	.word	0x46000000
 8003e7c:	4c742400 	.word	0x4c742400
 8003e80:	4a742400 	.word	0x4a742400
 8003e84:	4af42400 	.word	0x4af42400

08003e88 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8003e88:	b480      	push	{r7}
 8003e8a:	b089      	sub	sp, #36	; 0x24
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003e90:	4ba1      	ldr	r3, [pc, #644]	; (8004118 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003e92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e94:	f003 0303 	and.w	r3, r3, #3
 8003e98:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8003e9a:	4b9f      	ldr	r3, [pc, #636]	; (8004118 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003e9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e9e:	0d1b      	lsrs	r3, r3, #20
 8003ea0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003ea4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8003ea6:	4b9c      	ldr	r3, [pc, #624]	; (8004118 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003ea8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eaa:	0a1b      	lsrs	r3, r3, #8
 8003eac:	f003 0301 	and.w	r3, r3, #1
 8003eb0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8003eb2:	4b99      	ldr	r3, [pc, #612]	; (8004118 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003eb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eb6:	08db      	lsrs	r3, r3, #3
 8003eb8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003ebc:	693a      	ldr	r2, [r7, #16]
 8003ebe:	fb02 f303 	mul.w	r3, r2, r3
 8003ec2:	ee07 3a90 	vmov	s15, r3
 8003ec6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003eca:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8003ece:	697b      	ldr	r3, [r7, #20]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	f000 8111 	beq.w	80040f8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8003ed6:	69bb      	ldr	r3, [r7, #24]
 8003ed8:	2b02      	cmp	r3, #2
 8003eda:	f000 8083 	beq.w	8003fe4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8003ede:	69bb      	ldr	r3, [r7, #24]
 8003ee0:	2b02      	cmp	r3, #2
 8003ee2:	f200 80a1 	bhi.w	8004028 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8003ee6:	69bb      	ldr	r3, [r7, #24]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d003      	beq.n	8003ef4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8003eec:	69bb      	ldr	r3, [r7, #24]
 8003eee:	2b01      	cmp	r3, #1
 8003ef0:	d056      	beq.n	8003fa0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8003ef2:	e099      	b.n	8004028 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003ef4:	4b88      	ldr	r3, [pc, #544]	; (8004118 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f003 0320 	and.w	r3, r3, #32
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d02d      	beq.n	8003f5c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003f00:	4b85      	ldr	r3, [pc, #532]	; (8004118 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	08db      	lsrs	r3, r3, #3
 8003f06:	f003 0303 	and.w	r3, r3, #3
 8003f0a:	4a84      	ldr	r2, [pc, #528]	; (800411c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8003f0c:	fa22 f303 	lsr.w	r3, r2, r3
 8003f10:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003f12:	68bb      	ldr	r3, [r7, #8]
 8003f14:	ee07 3a90 	vmov	s15, r3
 8003f18:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f1c:	697b      	ldr	r3, [r7, #20]
 8003f1e:	ee07 3a90 	vmov	s15, r3
 8003f22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f2a:	4b7b      	ldr	r3, [pc, #492]	; (8004118 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f32:	ee07 3a90 	vmov	s15, r3
 8003f36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f3a:	ed97 6a03 	vldr	s12, [r7, #12]
 8003f3e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004120 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003f42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003f46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003f4a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003f4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003f52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f56:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8003f5a:	e087      	b.n	800406c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003f5c:	697b      	ldr	r3, [r7, #20]
 8003f5e:	ee07 3a90 	vmov	s15, r3
 8003f62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f66:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004124 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8003f6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f6e:	4b6a      	ldr	r3, [pc, #424]	; (8004118 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f76:	ee07 3a90 	vmov	s15, r3
 8003f7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f7e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003f82:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004120 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003f86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003f8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003f8e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003f92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003f96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f9a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003f9e:	e065      	b.n	800406c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003fa0:	697b      	ldr	r3, [r7, #20]
 8003fa2:	ee07 3a90 	vmov	s15, r3
 8003fa6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003faa:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004128 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003fae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003fb2:	4b59      	ldr	r3, [pc, #356]	; (8004118 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003fba:	ee07 3a90 	vmov	s15, r3
 8003fbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003fc2:	ed97 6a03 	vldr	s12, [r7, #12]
 8003fc6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004120 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003fca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003fce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003fd2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003fd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003fda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003fde:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003fe2:	e043      	b.n	800406c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003fe4:	697b      	ldr	r3, [r7, #20]
 8003fe6:	ee07 3a90 	vmov	s15, r3
 8003fea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003fee:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800412c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8003ff2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003ff6:	4b48      	ldr	r3, [pc, #288]	; (8004118 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ffa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ffe:	ee07 3a90 	vmov	s15, r3
 8004002:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004006:	ed97 6a03 	vldr	s12, [r7, #12]
 800400a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004120 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800400e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004012:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004016:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800401a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800401e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004022:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004026:	e021      	b.n	800406c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004028:	697b      	ldr	r3, [r7, #20]
 800402a:	ee07 3a90 	vmov	s15, r3
 800402e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004032:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004128 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004036:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800403a:	4b37      	ldr	r3, [pc, #220]	; (8004118 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800403c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800403e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004042:	ee07 3a90 	vmov	s15, r3
 8004046:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800404a:	ed97 6a03 	vldr	s12, [r7, #12]
 800404e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004120 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004052:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004056:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800405a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800405e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004062:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004066:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800406a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800406c:	4b2a      	ldr	r3, [pc, #168]	; (8004118 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800406e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004070:	0a5b      	lsrs	r3, r3, #9
 8004072:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004076:	ee07 3a90 	vmov	s15, r3
 800407a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800407e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004082:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004086:	edd7 6a07 	vldr	s13, [r7, #28]
 800408a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800408e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004092:	ee17 2a90 	vmov	r2, s15
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800409a:	4b1f      	ldr	r3, [pc, #124]	; (8004118 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800409c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800409e:	0c1b      	lsrs	r3, r3, #16
 80040a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80040a4:	ee07 3a90 	vmov	s15, r3
 80040a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040ac:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80040b0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80040b4:	edd7 6a07 	vldr	s13, [r7, #28]
 80040b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80040bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80040c0:	ee17 2a90 	vmov	r2, s15
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80040c8:	4b13      	ldr	r3, [pc, #76]	; (8004118 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80040ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040cc:	0e1b      	lsrs	r3, r3, #24
 80040ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80040d2:	ee07 3a90 	vmov	s15, r3
 80040d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040da:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80040de:	ee37 7a87 	vadd.f32	s14, s15, s14
 80040e2:	edd7 6a07 	vldr	s13, [r7, #28]
 80040e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80040ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80040ee:	ee17 2a90 	vmov	r2, s15
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80040f6:	e008      	b.n	800410a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2200      	movs	r2, #0
 80040fc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2200      	movs	r2, #0
 8004102:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2200      	movs	r2, #0
 8004108:	609a      	str	r2, [r3, #8]
}
 800410a:	bf00      	nop
 800410c:	3724      	adds	r7, #36	; 0x24
 800410e:	46bd      	mov	sp, r7
 8004110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004114:	4770      	bx	lr
 8004116:	bf00      	nop
 8004118:	58024400 	.word	0x58024400
 800411c:	03d09000 	.word	0x03d09000
 8004120:	46000000 	.word	0x46000000
 8004124:	4c742400 	.word	0x4c742400
 8004128:	4a742400 	.word	0x4a742400
 800412c:	4af42400 	.word	0x4af42400

08004130 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b084      	sub	sp, #16
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
 8004138:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800413a:	2300      	movs	r3, #0
 800413c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800413e:	4b53      	ldr	r3, [pc, #332]	; (800428c <RCCEx_PLL2_Config+0x15c>)
 8004140:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004142:	f003 0303 	and.w	r3, r3, #3
 8004146:	2b03      	cmp	r3, #3
 8004148:	d101      	bne.n	800414e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800414a:	2301      	movs	r3, #1
 800414c:	e099      	b.n	8004282 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800414e:	4b4f      	ldr	r3, [pc, #316]	; (800428c <RCCEx_PLL2_Config+0x15c>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	4a4e      	ldr	r2, [pc, #312]	; (800428c <RCCEx_PLL2_Config+0x15c>)
 8004154:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004158:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800415a:	f7fc ff7b 	bl	8001054 <HAL_GetTick>
 800415e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004160:	e008      	b.n	8004174 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8004162:	f7fc ff77 	bl	8001054 <HAL_GetTick>
 8004166:	4602      	mov	r2, r0
 8004168:	68bb      	ldr	r3, [r7, #8]
 800416a:	1ad3      	subs	r3, r2, r3
 800416c:	2b02      	cmp	r3, #2
 800416e:	d901      	bls.n	8004174 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004170:	2303      	movs	r3, #3
 8004172:	e086      	b.n	8004282 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004174:	4b45      	ldr	r3, [pc, #276]	; (800428c <RCCEx_PLL2_Config+0x15c>)
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800417c:	2b00      	cmp	r3, #0
 800417e:	d1f0      	bne.n	8004162 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004180:	4b42      	ldr	r3, [pc, #264]	; (800428c <RCCEx_PLL2_Config+0x15c>)
 8004182:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004184:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	031b      	lsls	r3, r3, #12
 800418e:	493f      	ldr	r1, [pc, #252]	; (800428c <RCCEx_PLL2_Config+0x15c>)
 8004190:	4313      	orrs	r3, r2
 8004192:	628b      	str	r3, [r1, #40]	; 0x28
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	685b      	ldr	r3, [r3, #4]
 8004198:	3b01      	subs	r3, #1
 800419a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	689b      	ldr	r3, [r3, #8]
 80041a2:	3b01      	subs	r3, #1
 80041a4:	025b      	lsls	r3, r3, #9
 80041a6:	b29b      	uxth	r3, r3
 80041a8:	431a      	orrs	r2, r3
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	68db      	ldr	r3, [r3, #12]
 80041ae:	3b01      	subs	r3, #1
 80041b0:	041b      	lsls	r3, r3, #16
 80041b2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80041b6:	431a      	orrs	r2, r3
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	691b      	ldr	r3, [r3, #16]
 80041bc:	3b01      	subs	r3, #1
 80041be:	061b      	lsls	r3, r3, #24
 80041c0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80041c4:	4931      	ldr	r1, [pc, #196]	; (800428c <RCCEx_PLL2_Config+0x15c>)
 80041c6:	4313      	orrs	r3, r2
 80041c8:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80041ca:	4b30      	ldr	r3, [pc, #192]	; (800428c <RCCEx_PLL2_Config+0x15c>)
 80041cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041ce:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	695b      	ldr	r3, [r3, #20]
 80041d6:	492d      	ldr	r1, [pc, #180]	; (800428c <RCCEx_PLL2_Config+0x15c>)
 80041d8:	4313      	orrs	r3, r2
 80041da:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80041dc:	4b2b      	ldr	r3, [pc, #172]	; (800428c <RCCEx_PLL2_Config+0x15c>)
 80041de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041e0:	f023 0220 	bic.w	r2, r3, #32
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	699b      	ldr	r3, [r3, #24]
 80041e8:	4928      	ldr	r1, [pc, #160]	; (800428c <RCCEx_PLL2_Config+0x15c>)
 80041ea:	4313      	orrs	r3, r2
 80041ec:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80041ee:	4b27      	ldr	r3, [pc, #156]	; (800428c <RCCEx_PLL2_Config+0x15c>)
 80041f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041f2:	4a26      	ldr	r2, [pc, #152]	; (800428c <RCCEx_PLL2_Config+0x15c>)
 80041f4:	f023 0310 	bic.w	r3, r3, #16
 80041f8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80041fa:	4b24      	ldr	r3, [pc, #144]	; (800428c <RCCEx_PLL2_Config+0x15c>)
 80041fc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80041fe:	4b24      	ldr	r3, [pc, #144]	; (8004290 <RCCEx_PLL2_Config+0x160>)
 8004200:	4013      	ands	r3, r2
 8004202:	687a      	ldr	r2, [r7, #4]
 8004204:	69d2      	ldr	r2, [r2, #28]
 8004206:	00d2      	lsls	r2, r2, #3
 8004208:	4920      	ldr	r1, [pc, #128]	; (800428c <RCCEx_PLL2_Config+0x15c>)
 800420a:	4313      	orrs	r3, r2
 800420c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800420e:	4b1f      	ldr	r3, [pc, #124]	; (800428c <RCCEx_PLL2_Config+0x15c>)
 8004210:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004212:	4a1e      	ldr	r2, [pc, #120]	; (800428c <RCCEx_PLL2_Config+0x15c>)
 8004214:	f043 0310 	orr.w	r3, r3, #16
 8004218:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	2b00      	cmp	r3, #0
 800421e:	d106      	bne.n	800422e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004220:	4b1a      	ldr	r3, [pc, #104]	; (800428c <RCCEx_PLL2_Config+0x15c>)
 8004222:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004224:	4a19      	ldr	r2, [pc, #100]	; (800428c <RCCEx_PLL2_Config+0x15c>)
 8004226:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800422a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800422c:	e00f      	b.n	800424e <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	2b01      	cmp	r3, #1
 8004232:	d106      	bne.n	8004242 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004234:	4b15      	ldr	r3, [pc, #84]	; (800428c <RCCEx_PLL2_Config+0x15c>)
 8004236:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004238:	4a14      	ldr	r2, [pc, #80]	; (800428c <RCCEx_PLL2_Config+0x15c>)
 800423a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800423e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004240:	e005      	b.n	800424e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004242:	4b12      	ldr	r3, [pc, #72]	; (800428c <RCCEx_PLL2_Config+0x15c>)
 8004244:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004246:	4a11      	ldr	r2, [pc, #68]	; (800428c <RCCEx_PLL2_Config+0x15c>)
 8004248:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800424c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800424e:	4b0f      	ldr	r3, [pc, #60]	; (800428c <RCCEx_PLL2_Config+0x15c>)
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	4a0e      	ldr	r2, [pc, #56]	; (800428c <RCCEx_PLL2_Config+0x15c>)
 8004254:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004258:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800425a:	f7fc fefb 	bl	8001054 <HAL_GetTick>
 800425e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004260:	e008      	b.n	8004274 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8004262:	f7fc fef7 	bl	8001054 <HAL_GetTick>
 8004266:	4602      	mov	r2, r0
 8004268:	68bb      	ldr	r3, [r7, #8]
 800426a:	1ad3      	subs	r3, r2, r3
 800426c:	2b02      	cmp	r3, #2
 800426e:	d901      	bls.n	8004274 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004270:	2303      	movs	r3, #3
 8004272:	e006      	b.n	8004282 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004274:	4b05      	ldr	r3, [pc, #20]	; (800428c <RCCEx_PLL2_Config+0x15c>)
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800427c:	2b00      	cmp	r3, #0
 800427e:	d0f0      	beq.n	8004262 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004280:	7bfb      	ldrb	r3, [r7, #15]
}
 8004282:	4618      	mov	r0, r3
 8004284:	3710      	adds	r7, #16
 8004286:	46bd      	mov	sp, r7
 8004288:	bd80      	pop	{r7, pc}
 800428a:	bf00      	nop
 800428c:	58024400 	.word	0x58024400
 8004290:	ffff0007 	.word	0xffff0007

08004294 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	b084      	sub	sp, #16
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
 800429c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800429e:	2300      	movs	r3, #0
 80042a0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80042a2:	4b53      	ldr	r3, [pc, #332]	; (80043f0 <RCCEx_PLL3_Config+0x15c>)
 80042a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042a6:	f003 0303 	and.w	r3, r3, #3
 80042aa:	2b03      	cmp	r3, #3
 80042ac:	d101      	bne.n	80042b2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80042ae:	2301      	movs	r3, #1
 80042b0:	e099      	b.n	80043e6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80042b2:	4b4f      	ldr	r3, [pc, #316]	; (80043f0 <RCCEx_PLL3_Config+0x15c>)
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	4a4e      	ldr	r2, [pc, #312]	; (80043f0 <RCCEx_PLL3_Config+0x15c>)
 80042b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80042bc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042be:	f7fc fec9 	bl	8001054 <HAL_GetTick>
 80042c2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80042c4:	e008      	b.n	80042d8 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80042c6:	f7fc fec5 	bl	8001054 <HAL_GetTick>
 80042ca:	4602      	mov	r2, r0
 80042cc:	68bb      	ldr	r3, [r7, #8]
 80042ce:	1ad3      	subs	r3, r2, r3
 80042d0:	2b02      	cmp	r3, #2
 80042d2:	d901      	bls.n	80042d8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80042d4:	2303      	movs	r3, #3
 80042d6:	e086      	b.n	80043e6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80042d8:	4b45      	ldr	r3, [pc, #276]	; (80043f0 <RCCEx_PLL3_Config+0x15c>)
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d1f0      	bne.n	80042c6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80042e4:	4b42      	ldr	r3, [pc, #264]	; (80043f0 <RCCEx_PLL3_Config+0x15c>)
 80042e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042e8:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	051b      	lsls	r3, r3, #20
 80042f2:	493f      	ldr	r1, [pc, #252]	; (80043f0 <RCCEx_PLL3_Config+0x15c>)
 80042f4:	4313      	orrs	r3, r2
 80042f6:	628b      	str	r3, [r1, #40]	; 0x28
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	685b      	ldr	r3, [r3, #4]
 80042fc:	3b01      	subs	r3, #1
 80042fe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	689b      	ldr	r3, [r3, #8]
 8004306:	3b01      	subs	r3, #1
 8004308:	025b      	lsls	r3, r3, #9
 800430a:	b29b      	uxth	r3, r3
 800430c:	431a      	orrs	r2, r3
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	68db      	ldr	r3, [r3, #12]
 8004312:	3b01      	subs	r3, #1
 8004314:	041b      	lsls	r3, r3, #16
 8004316:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800431a:	431a      	orrs	r2, r3
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	691b      	ldr	r3, [r3, #16]
 8004320:	3b01      	subs	r3, #1
 8004322:	061b      	lsls	r3, r3, #24
 8004324:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004328:	4931      	ldr	r1, [pc, #196]	; (80043f0 <RCCEx_PLL3_Config+0x15c>)
 800432a:	4313      	orrs	r3, r2
 800432c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800432e:	4b30      	ldr	r3, [pc, #192]	; (80043f0 <RCCEx_PLL3_Config+0x15c>)
 8004330:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004332:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	695b      	ldr	r3, [r3, #20]
 800433a:	492d      	ldr	r1, [pc, #180]	; (80043f0 <RCCEx_PLL3_Config+0x15c>)
 800433c:	4313      	orrs	r3, r2
 800433e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004340:	4b2b      	ldr	r3, [pc, #172]	; (80043f0 <RCCEx_PLL3_Config+0x15c>)
 8004342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004344:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	699b      	ldr	r3, [r3, #24]
 800434c:	4928      	ldr	r1, [pc, #160]	; (80043f0 <RCCEx_PLL3_Config+0x15c>)
 800434e:	4313      	orrs	r3, r2
 8004350:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004352:	4b27      	ldr	r3, [pc, #156]	; (80043f0 <RCCEx_PLL3_Config+0x15c>)
 8004354:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004356:	4a26      	ldr	r2, [pc, #152]	; (80043f0 <RCCEx_PLL3_Config+0x15c>)
 8004358:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800435c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800435e:	4b24      	ldr	r3, [pc, #144]	; (80043f0 <RCCEx_PLL3_Config+0x15c>)
 8004360:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004362:	4b24      	ldr	r3, [pc, #144]	; (80043f4 <RCCEx_PLL3_Config+0x160>)
 8004364:	4013      	ands	r3, r2
 8004366:	687a      	ldr	r2, [r7, #4]
 8004368:	69d2      	ldr	r2, [r2, #28]
 800436a:	00d2      	lsls	r2, r2, #3
 800436c:	4920      	ldr	r1, [pc, #128]	; (80043f0 <RCCEx_PLL3_Config+0x15c>)
 800436e:	4313      	orrs	r3, r2
 8004370:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004372:	4b1f      	ldr	r3, [pc, #124]	; (80043f0 <RCCEx_PLL3_Config+0x15c>)
 8004374:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004376:	4a1e      	ldr	r2, [pc, #120]	; (80043f0 <RCCEx_PLL3_Config+0x15c>)
 8004378:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800437c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	2b00      	cmp	r3, #0
 8004382:	d106      	bne.n	8004392 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004384:	4b1a      	ldr	r3, [pc, #104]	; (80043f0 <RCCEx_PLL3_Config+0x15c>)
 8004386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004388:	4a19      	ldr	r2, [pc, #100]	; (80043f0 <RCCEx_PLL3_Config+0x15c>)
 800438a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800438e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004390:	e00f      	b.n	80043b2 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	2b01      	cmp	r3, #1
 8004396:	d106      	bne.n	80043a6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004398:	4b15      	ldr	r3, [pc, #84]	; (80043f0 <RCCEx_PLL3_Config+0x15c>)
 800439a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800439c:	4a14      	ldr	r2, [pc, #80]	; (80043f0 <RCCEx_PLL3_Config+0x15c>)
 800439e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80043a2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80043a4:	e005      	b.n	80043b2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80043a6:	4b12      	ldr	r3, [pc, #72]	; (80043f0 <RCCEx_PLL3_Config+0x15c>)
 80043a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043aa:	4a11      	ldr	r2, [pc, #68]	; (80043f0 <RCCEx_PLL3_Config+0x15c>)
 80043ac:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80043b0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80043b2:	4b0f      	ldr	r3, [pc, #60]	; (80043f0 <RCCEx_PLL3_Config+0x15c>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	4a0e      	ldr	r2, [pc, #56]	; (80043f0 <RCCEx_PLL3_Config+0x15c>)
 80043b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043bc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80043be:	f7fc fe49 	bl	8001054 <HAL_GetTick>
 80043c2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80043c4:	e008      	b.n	80043d8 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80043c6:	f7fc fe45 	bl	8001054 <HAL_GetTick>
 80043ca:	4602      	mov	r2, r0
 80043cc:	68bb      	ldr	r3, [r7, #8]
 80043ce:	1ad3      	subs	r3, r2, r3
 80043d0:	2b02      	cmp	r3, #2
 80043d2:	d901      	bls.n	80043d8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80043d4:	2303      	movs	r3, #3
 80043d6:	e006      	b.n	80043e6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80043d8:	4b05      	ldr	r3, [pc, #20]	; (80043f0 <RCCEx_PLL3_Config+0x15c>)
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d0f0      	beq.n	80043c6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80043e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80043e6:	4618      	mov	r0, r3
 80043e8:	3710      	adds	r7, #16
 80043ea:	46bd      	mov	sp, r7
 80043ec:	bd80      	pop	{r7, pc}
 80043ee:	bf00      	nop
 80043f0:	58024400 	.word	0x58024400
 80043f4:	ffff0007 	.word	0xffff0007

080043f8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b082      	sub	sp, #8
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d101      	bne.n	800440a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004406:	2301      	movs	r3, #1
 8004408:	e049      	b.n	800449e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004410:	b2db      	uxtb	r3, r3
 8004412:	2b00      	cmp	r3, #0
 8004414:	d106      	bne.n	8004424 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2200      	movs	r2, #0
 800441a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800441e:	6878      	ldr	r0, [r7, #4]
 8004420:	f000 f841 	bl	80044a6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2202      	movs	r2, #2
 8004428:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681a      	ldr	r2, [r3, #0]
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	3304      	adds	r3, #4
 8004434:	4619      	mov	r1, r3
 8004436:	4610      	mov	r0, r2
 8004438:	f000 fa0e 	bl	8004858 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2201      	movs	r2, #1
 8004440:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2201      	movs	r2, #1
 8004448:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2201      	movs	r2, #1
 8004450:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2201      	movs	r2, #1
 8004458:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2201      	movs	r2, #1
 8004460:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2201      	movs	r2, #1
 8004468:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2201      	movs	r2, #1
 8004470:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2201      	movs	r2, #1
 8004478:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2201      	movs	r2, #1
 8004480:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2201      	movs	r2, #1
 8004488:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2201      	movs	r2, #1
 8004490:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2201      	movs	r2, #1
 8004498:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800449c:	2300      	movs	r3, #0
}
 800449e:	4618      	mov	r0, r3
 80044a0:	3708      	adds	r7, #8
 80044a2:	46bd      	mov	sp, r7
 80044a4:	bd80      	pop	{r7, pc}

080044a6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80044a6:	b480      	push	{r7}
 80044a8:	b083      	sub	sp, #12
 80044aa:	af00      	add	r7, sp, #0
 80044ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80044ae:	bf00      	nop
 80044b0:	370c      	adds	r7, #12
 80044b2:	46bd      	mov	sp, r7
 80044b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b8:	4770      	bx	lr
	...

080044bc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80044bc:	b480      	push	{r7}
 80044be:	b085      	sub	sp, #20
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044ca:	b2db      	uxtb	r3, r3
 80044cc:	2b01      	cmp	r3, #1
 80044ce:	d001      	beq.n	80044d4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80044d0:	2301      	movs	r3, #1
 80044d2:	e05e      	b.n	8004592 <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2202      	movs	r2, #2
 80044d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	68da      	ldr	r2, [r3, #12]
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f042 0201 	orr.w	r2, r2, #1
 80044ea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	4a2b      	ldr	r2, [pc, #172]	; (80045a0 <HAL_TIM_Base_Start_IT+0xe4>)
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d02c      	beq.n	8004550 <HAL_TIM_Base_Start_IT+0x94>
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044fe:	d027      	beq.n	8004550 <HAL_TIM_Base_Start_IT+0x94>
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	4a27      	ldr	r2, [pc, #156]	; (80045a4 <HAL_TIM_Base_Start_IT+0xe8>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d022      	beq.n	8004550 <HAL_TIM_Base_Start_IT+0x94>
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	4a26      	ldr	r2, [pc, #152]	; (80045a8 <HAL_TIM_Base_Start_IT+0xec>)
 8004510:	4293      	cmp	r3, r2
 8004512:	d01d      	beq.n	8004550 <HAL_TIM_Base_Start_IT+0x94>
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	4a24      	ldr	r2, [pc, #144]	; (80045ac <HAL_TIM_Base_Start_IT+0xf0>)
 800451a:	4293      	cmp	r3, r2
 800451c:	d018      	beq.n	8004550 <HAL_TIM_Base_Start_IT+0x94>
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	4a23      	ldr	r2, [pc, #140]	; (80045b0 <HAL_TIM_Base_Start_IT+0xf4>)
 8004524:	4293      	cmp	r3, r2
 8004526:	d013      	beq.n	8004550 <HAL_TIM_Base_Start_IT+0x94>
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	4a21      	ldr	r2, [pc, #132]	; (80045b4 <HAL_TIM_Base_Start_IT+0xf8>)
 800452e:	4293      	cmp	r3, r2
 8004530:	d00e      	beq.n	8004550 <HAL_TIM_Base_Start_IT+0x94>
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	4a20      	ldr	r2, [pc, #128]	; (80045b8 <HAL_TIM_Base_Start_IT+0xfc>)
 8004538:	4293      	cmp	r3, r2
 800453a:	d009      	beq.n	8004550 <HAL_TIM_Base_Start_IT+0x94>
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	4a1e      	ldr	r2, [pc, #120]	; (80045bc <HAL_TIM_Base_Start_IT+0x100>)
 8004542:	4293      	cmp	r3, r2
 8004544:	d004      	beq.n	8004550 <HAL_TIM_Base_Start_IT+0x94>
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	4a1d      	ldr	r2, [pc, #116]	; (80045c0 <HAL_TIM_Base_Start_IT+0x104>)
 800454c:	4293      	cmp	r3, r2
 800454e:	d115      	bne.n	800457c <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	689a      	ldr	r2, [r3, #8]
 8004556:	4b1b      	ldr	r3, [pc, #108]	; (80045c4 <HAL_TIM_Base_Start_IT+0x108>)
 8004558:	4013      	ands	r3, r2
 800455a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	2b06      	cmp	r3, #6
 8004560:	d015      	beq.n	800458e <HAL_TIM_Base_Start_IT+0xd2>
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004568:	d011      	beq.n	800458e <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	681a      	ldr	r2, [r3, #0]
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f042 0201 	orr.w	r2, r2, #1
 8004578:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800457a:	e008      	b.n	800458e <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	681a      	ldr	r2, [r3, #0]
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f042 0201 	orr.w	r2, r2, #1
 800458a:	601a      	str	r2, [r3, #0]
 800458c:	e000      	b.n	8004590 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800458e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004590:	2300      	movs	r3, #0
}
 8004592:	4618      	mov	r0, r3
 8004594:	3714      	adds	r7, #20
 8004596:	46bd      	mov	sp, r7
 8004598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459c:	4770      	bx	lr
 800459e:	bf00      	nop
 80045a0:	40010000 	.word	0x40010000
 80045a4:	40000400 	.word	0x40000400
 80045a8:	40000800 	.word	0x40000800
 80045ac:	40000c00 	.word	0x40000c00
 80045b0:	40010400 	.word	0x40010400
 80045b4:	40001800 	.word	0x40001800
 80045b8:	40014000 	.word	0x40014000
 80045bc:	4000e000 	.word	0x4000e000
 80045c0:	4000e400 	.word	0x4000e400
 80045c4:	00010007 	.word	0x00010007

080045c8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b082      	sub	sp, #8
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	691b      	ldr	r3, [r3, #16]
 80045d6:	f003 0302 	and.w	r3, r3, #2
 80045da:	2b02      	cmp	r3, #2
 80045dc:	d122      	bne.n	8004624 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	68db      	ldr	r3, [r3, #12]
 80045e4:	f003 0302 	and.w	r3, r3, #2
 80045e8:	2b02      	cmp	r3, #2
 80045ea:	d11b      	bne.n	8004624 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f06f 0202 	mvn.w	r2, #2
 80045f4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	2201      	movs	r2, #1
 80045fa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	699b      	ldr	r3, [r3, #24]
 8004602:	f003 0303 	and.w	r3, r3, #3
 8004606:	2b00      	cmp	r3, #0
 8004608:	d003      	beq.n	8004612 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800460a:	6878      	ldr	r0, [r7, #4]
 800460c:	f000 f905 	bl	800481a <HAL_TIM_IC_CaptureCallback>
 8004610:	e005      	b.n	800461e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004612:	6878      	ldr	r0, [r7, #4]
 8004614:	f000 f8f7 	bl	8004806 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004618:	6878      	ldr	r0, [r7, #4]
 800461a:	f000 f908 	bl	800482e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	2200      	movs	r2, #0
 8004622:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	691b      	ldr	r3, [r3, #16]
 800462a:	f003 0304 	and.w	r3, r3, #4
 800462e:	2b04      	cmp	r3, #4
 8004630:	d122      	bne.n	8004678 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	68db      	ldr	r3, [r3, #12]
 8004638:	f003 0304 	and.w	r3, r3, #4
 800463c:	2b04      	cmp	r3, #4
 800463e:	d11b      	bne.n	8004678 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f06f 0204 	mvn.w	r2, #4
 8004648:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	2202      	movs	r2, #2
 800464e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	699b      	ldr	r3, [r3, #24]
 8004656:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800465a:	2b00      	cmp	r3, #0
 800465c:	d003      	beq.n	8004666 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800465e:	6878      	ldr	r0, [r7, #4]
 8004660:	f000 f8db 	bl	800481a <HAL_TIM_IC_CaptureCallback>
 8004664:	e005      	b.n	8004672 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004666:	6878      	ldr	r0, [r7, #4]
 8004668:	f000 f8cd 	bl	8004806 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800466c:	6878      	ldr	r0, [r7, #4]
 800466e:	f000 f8de 	bl	800482e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2200      	movs	r2, #0
 8004676:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	691b      	ldr	r3, [r3, #16]
 800467e:	f003 0308 	and.w	r3, r3, #8
 8004682:	2b08      	cmp	r3, #8
 8004684:	d122      	bne.n	80046cc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	68db      	ldr	r3, [r3, #12]
 800468c:	f003 0308 	and.w	r3, r3, #8
 8004690:	2b08      	cmp	r3, #8
 8004692:	d11b      	bne.n	80046cc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f06f 0208 	mvn.w	r2, #8
 800469c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2204      	movs	r2, #4
 80046a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	69db      	ldr	r3, [r3, #28]
 80046aa:	f003 0303 	and.w	r3, r3, #3
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d003      	beq.n	80046ba <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80046b2:	6878      	ldr	r0, [r7, #4]
 80046b4:	f000 f8b1 	bl	800481a <HAL_TIM_IC_CaptureCallback>
 80046b8:	e005      	b.n	80046c6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80046ba:	6878      	ldr	r0, [r7, #4]
 80046bc:	f000 f8a3 	bl	8004806 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046c0:	6878      	ldr	r0, [r7, #4]
 80046c2:	f000 f8b4 	bl	800482e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	2200      	movs	r2, #0
 80046ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	691b      	ldr	r3, [r3, #16]
 80046d2:	f003 0310 	and.w	r3, r3, #16
 80046d6:	2b10      	cmp	r3, #16
 80046d8:	d122      	bne.n	8004720 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	68db      	ldr	r3, [r3, #12]
 80046e0:	f003 0310 	and.w	r3, r3, #16
 80046e4:	2b10      	cmp	r3, #16
 80046e6:	d11b      	bne.n	8004720 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f06f 0210 	mvn.w	r2, #16
 80046f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2208      	movs	r2, #8
 80046f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	69db      	ldr	r3, [r3, #28]
 80046fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004702:	2b00      	cmp	r3, #0
 8004704:	d003      	beq.n	800470e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004706:	6878      	ldr	r0, [r7, #4]
 8004708:	f000 f887 	bl	800481a <HAL_TIM_IC_CaptureCallback>
 800470c:	e005      	b.n	800471a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800470e:	6878      	ldr	r0, [r7, #4]
 8004710:	f000 f879 	bl	8004806 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004714:	6878      	ldr	r0, [r7, #4]
 8004716:	f000 f88a 	bl	800482e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	2200      	movs	r2, #0
 800471e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	691b      	ldr	r3, [r3, #16]
 8004726:	f003 0301 	and.w	r3, r3, #1
 800472a:	2b01      	cmp	r3, #1
 800472c:	d10e      	bne.n	800474c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	68db      	ldr	r3, [r3, #12]
 8004734:	f003 0301 	and.w	r3, r3, #1
 8004738:	2b01      	cmp	r3, #1
 800473a:	d107      	bne.n	800474c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f06f 0201 	mvn.w	r2, #1
 8004744:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004746:	6878      	ldr	r0, [r7, #4]
 8004748:	f7fc fa20 	bl	8000b8c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	691b      	ldr	r3, [r3, #16]
 8004752:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004756:	2b80      	cmp	r3, #128	; 0x80
 8004758:	d10e      	bne.n	8004778 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	68db      	ldr	r3, [r3, #12]
 8004760:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004764:	2b80      	cmp	r3, #128	; 0x80
 8004766:	d107      	bne.n	8004778 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004770:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004772:	6878      	ldr	r0, [r7, #4]
 8004774:	f000 f920 	bl	80049b8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	691b      	ldr	r3, [r3, #16]
 800477e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004782:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004786:	d10e      	bne.n	80047a6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	68db      	ldr	r3, [r3, #12]
 800478e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004792:	2b80      	cmp	r3, #128	; 0x80
 8004794:	d107      	bne.n	80047a6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800479e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80047a0:	6878      	ldr	r0, [r7, #4]
 80047a2:	f000 f913 	bl	80049cc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	691b      	ldr	r3, [r3, #16]
 80047ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047b0:	2b40      	cmp	r3, #64	; 0x40
 80047b2:	d10e      	bne.n	80047d2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	68db      	ldr	r3, [r3, #12]
 80047ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047be:	2b40      	cmp	r3, #64	; 0x40
 80047c0:	d107      	bne.n	80047d2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80047ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80047cc:	6878      	ldr	r0, [r7, #4]
 80047ce:	f000 f838 	bl	8004842 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	691b      	ldr	r3, [r3, #16]
 80047d8:	f003 0320 	and.w	r3, r3, #32
 80047dc:	2b20      	cmp	r3, #32
 80047de:	d10e      	bne.n	80047fe <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	68db      	ldr	r3, [r3, #12]
 80047e6:	f003 0320 	and.w	r3, r3, #32
 80047ea:	2b20      	cmp	r3, #32
 80047ec:	d107      	bne.n	80047fe <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f06f 0220 	mvn.w	r2, #32
 80047f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80047f8:	6878      	ldr	r0, [r7, #4]
 80047fa:	f000 f8d3 	bl	80049a4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80047fe:	bf00      	nop
 8004800:	3708      	adds	r7, #8
 8004802:	46bd      	mov	sp, r7
 8004804:	bd80      	pop	{r7, pc}

08004806 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004806:	b480      	push	{r7}
 8004808:	b083      	sub	sp, #12
 800480a:	af00      	add	r7, sp, #0
 800480c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800480e:	bf00      	nop
 8004810:	370c      	adds	r7, #12
 8004812:	46bd      	mov	sp, r7
 8004814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004818:	4770      	bx	lr

0800481a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800481a:	b480      	push	{r7}
 800481c:	b083      	sub	sp, #12
 800481e:	af00      	add	r7, sp, #0
 8004820:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004822:	bf00      	nop
 8004824:	370c      	adds	r7, #12
 8004826:	46bd      	mov	sp, r7
 8004828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482c:	4770      	bx	lr

0800482e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800482e:	b480      	push	{r7}
 8004830:	b083      	sub	sp, #12
 8004832:	af00      	add	r7, sp, #0
 8004834:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004836:	bf00      	nop
 8004838:	370c      	adds	r7, #12
 800483a:	46bd      	mov	sp, r7
 800483c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004840:	4770      	bx	lr

08004842 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004842:	b480      	push	{r7}
 8004844:	b083      	sub	sp, #12
 8004846:	af00      	add	r7, sp, #0
 8004848:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800484a:	bf00      	nop
 800484c:	370c      	adds	r7, #12
 800484e:	46bd      	mov	sp, r7
 8004850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004854:	4770      	bx	lr
	...

08004858 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004858:	b480      	push	{r7}
 800485a:	b085      	sub	sp, #20
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
 8004860:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	4a44      	ldr	r2, [pc, #272]	; (800497c <TIM_Base_SetConfig+0x124>)
 800486c:	4293      	cmp	r3, r2
 800486e:	d013      	beq.n	8004898 <TIM_Base_SetConfig+0x40>
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004876:	d00f      	beq.n	8004898 <TIM_Base_SetConfig+0x40>
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	4a41      	ldr	r2, [pc, #260]	; (8004980 <TIM_Base_SetConfig+0x128>)
 800487c:	4293      	cmp	r3, r2
 800487e:	d00b      	beq.n	8004898 <TIM_Base_SetConfig+0x40>
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	4a40      	ldr	r2, [pc, #256]	; (8004984 <TIM_Base_SetConfig+0x12c>)
 8004884:	4293      	cmp	r3, r2
 8004886:	d007      	beq.n	8004898 <TIM_Base_SetConfig+0x40>
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	4a3f      	ldr	r2, [pc, #252]	; (8004988 <TIM_Base_SetConfig+0x130>)
 800488c:	4293      	cmp	r3, r2
 800488e:	d003      	beq.n	8004898 <TIM_Base_SetConfig+0x40>
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	4a3e      	ldr	r2, [pc, #248]	; (800498c <TIM_Base_SetConfig+0x134>)
 8004894:	4293      	cmp	r3, r2
 8004896:	d108      	bne.n	80048aa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800489e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	685b      	ldr	r3, [r3, #4]
 80048a4:	68fa      	ldr	r2, [r7, #12]
 80048a6:	4313      	orrs	r3, r2
 80048a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	4a33      	ldr	r2, [pc, #204]	; (800497c <TIM_Base_SetConfig+0x124>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d027      	beq.n	8004902 <TIM_Base_SetConfig+0xaa>
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048b8:	d023      	beq.n	8004902 <TIM_Base_SetConfig+0xaa>
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	4a30      	ldr	r2, [pc, #192]	; (8004980 <TIM_Base_SetConfig+0x128>)
 80048be:	4293      	cmp	r3, r2
 80048c0:	d01f      	beq.n	8004902 <TIM_Base_SetConfig+0xaa>
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	4a2f      	ldr	r2, [pc, #188]	; (8004984 <TIM_Base_SetConfig+0x12c>)
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d01b      	beq.n	8004902 <TIM_Base_SetConfig+0xaa>
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	4a2e      	ldr	r2, [pc, #184]	; (8004988 <TIM_Base_SetConfig+0x130>)
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d017      	beq.n	8004902 <TIM_Base_SetConfig+0xaa>
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	4a2d      	ldr	r2, [pc, #180]	; (800498c <TIM_Base_SetConfig+0x134>)
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d013      	beq.n	8004902 <TIM_Base_SetConfig+0xaa>
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	4a2c      	ldr	r2, [pc, #176]	; (8004990 <TIM_Base_SetConfig+0x138>)
 80048de:	4293      	cmp	r3, r2
 80048e0:	d00f      	beq.n	8004902 <TIM_Base_SetConfig+0xaa>
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	4a2b      	ldr	r2, [pc, #172]	; (8004994 <TIM_Base_SetConfig+0x13c>)
 80048e6:	4293      	cmp	r3, r2
 80048e8:	d00b      	beq.n	8004902 <TIM_Base_SetConfig+0xaa>
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	4a2a      	ldr	r2, [pc, #168]	; (8004998 <TIM_Base_SetConfig+0x140>)
 80048ee:	4293      	cmp	r3, r2
 80048f0:	d007      	beq.n	8004902 <TIM_Base_SetConfig+0xaa>
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	4a29      	ldr	r2, [pc, #164]	; (800499c <TIM_Base_SetConfig+0x144>)
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d003      	beq.n	8004902 <TIM_Base_SetConfig+0xaa>
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	4a28      	ldr	r2, [pc, #160]	; (80049a0 <TIM_Base_SetConfig+0x148>)
 80048fe:	4293      	cmp	r3, r2
 8004900:	d108      	bne.n	8004914 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004908:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	68db      	ldr	r3, [r3, #12]
 800490e:	68fa      	ldr	r2, [r7, #12]
 8004910:	4313      	orrs	r3, r2
 8004912:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	695b      	ldr	r3, [r3, #20]
 800491e:	4313      	orrs	r3, r2
 8004920:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	68fa      	ldr	r2, [r7, #12]
 8004926:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	689a      	ldr	r2, [r3, #8]
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	681a      	ldr	r2, [r3, #0]
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	4a10      	ldr	r2, [pc, #64]	; (800497c <TIM_Base_SetConfig+0x124>)
 800493c:	4293      	cmp	r3, r2
 800493e:	d00f      	beq.n	8004960 <TIM_Base_SetConfig+0x108>
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	4a12      	ldr	r2, [pc, #72]	; (800498c <TIM_Base_SetConfig+0x134>)
 8004944:	4293      	cmp	r3, r2
 8004946:	d00b      	beq.n	8004960 <TIM_Base_SetConfig+0x108>
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	4a11      	ldr	r2, [pc, #68]	; (8004990 <TIM_Base_SetConfig+0x138>)
 800494c:	4293      	cmp	r3, r2
 800494e:	d007      	beq.n	8004960 <TIM_Base_SetConfig+0x108>
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	4a10      	ldr	r2, [pc, #64]	; (8004994 <TIM_Base_SetConfig+0x13c>)
 8004954:	4293      	cmp	r3, r2
 8004956:	d003      	beq.n	8004960 <TIM_Base_SetConfig+0x108>
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	4a0f      	ldr	r2, [pc, #60]	; (8004998 <TIM_Base_SetConfig+0x140>)
 800495c:	4293      	cmp	r3, r2
 800495e:	d103      	bne.n	8004968 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	691a      	ldr	r2, [r3, #16]
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2201      	movs	r2, #1
 800496c:	615a      	str	r2, [r3, #20]
}
 800496e:	bf00      	nop
 8004970:	3714      	adds	r7, #20
 8004972:	46bd      	mov	sp, r7
 8004974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004978:	4770      	bx	lr
 800497a:	bf00      	nop
 800497c:	40010000 	.word	0x40010000
 8004980:	40000400 	.word	0x40000400
 8004984:	40000800 	.word	0x40000800
 8004988:	40000c00 	.word	0x40000c00
 800498c:	40010400 	.word	0x40010400
 8004990:	40014000 	.word	0x40014000
 8004994:	40014400 	.word	0x40014400
 8004998:	40014800 	.word	0x40014800
 800499c:	4000e000 	.word	0x4000e000
 80049a0:	4000e400 	.word	0x4000e400

080049a4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80049a4:	b480      	push	{r7}
 80049a6:	b083      	sub	sp, #12
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80049ac:	bf00      	nop
 80049ae:	370c      	adds	r7, #12
 80049b0:	46bd      	mov	sp, r7
 80049b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b6:	4770      	bx	lr

080049b8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80049b8:	b480      	push	{r7}
 80049ba:	b083      	sub	sp, #12
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80049c0:	bf00      	nop
 80049c2:	370c      	adds	r7, #12
 80049c4:	46bd      	mov	sp, r7
 80049c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ca:	4770      	bx	lr

080049cc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80049cc:	b480      	push	{r7}
 80049ce:	b083      	sub	sp, #12
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80049d4:	bf00      	nop
 80049d6:	370c      	adds	r7, #12
 80049d8:	46bd      	mov	sp, r7
 80049da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049de:	4770      	bx	lr

080049e0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b082      	sub	sp, #8
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d101      	bne.n	80049f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80049ee:	2301      	movs	r3, #1
 80049f0:	e042      	b.n	8004a78 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d106      	bne.n	8004a0a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2200      	movs	r2, #0
 8004a00:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004a04:	6878      	ldr	r0, [r7, #4]
 8004a06:	f7fc fa3d 	bl	8000e84 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2224      	movs	r2, #36	; 0x24
 8004a0e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	681a      	ldr	r2, [r3, #0]
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f022 0201 	bic.w	r2, r2, #1
 8004a20:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004a22:	6878      	ldr	r0, [r7, #4]
 8004a24:	f000 f82c 	bl	8004a80 <UART_SetConfig>
 8004a28:	4603      	mov	r3, r0
 8004a2a:	2b01      	cmp	r3, #1
 8004a2c:	d101      	bne.n	8004a32 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004a2e:	2301      	movs	r3, #1
 8004a30:	e022      	b.n	8004a78 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d002      	beq.n	8004a40 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004a3a:	6878      	ldr	r0, [r7, #4]
 8004a3c:	f000 fe8c 	bl	8005758 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	685a      	ldr	r2, [r3, #4]
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004a4e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	689a      	ldr	r2, [r3, #8]
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004a5e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	681a      	ldr	r2, [r3, #0]
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f042 0201 	orr.w	r2, r2, #1
 8004a6e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004a70:	6878      	ldr	r0, [r7, #4]
 8004a72:	f000 ff13 	bl	800589c <UART_CheckIdleState>
 8004a76:	4603      	mov	r3, r0
}
 8004a78:	4618      	mov	r0, r3
 8004a7a:	3708      	adds	r7, #8
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	bd80      	pop	{r7, pc}

08004a80 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004a80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004a84:	b092      	sub	sp, #72	; 0x48
 8004a86:	af00      	add	r7, sp, #0
 8004a88:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004a90:	697b      	ldr	r3, [r7, #20]
 8004a92:	689a      	ldr	r2, [r3, #8]
 8004a94:	697b      	ldr	r3, [r7, #20]
 8004a96:	691b      	ldr	r3, [r3, #16]
 8004a98:	431a      	orrs	r2, r3
 8004a9a:	697b      	ldr	r3, [r7, #20]
 8004a9c:	695b      	ldr	r3, [r3, #20]
 8004a9e:	431a      	orrs	r2, r3
 8004aa0:	697b      	ldr	r3, [r7, #20]
 8004aa2:	69db      	ldr	r3, [r3, #28]
 8004aa4:	4313      	orrs	r3, r2
 8004aa6:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004aa8:	697b      	ldr	r3, [r7, #20]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	681a      	ldr	r2, [r3, #0]
 8004aae:	4bbe      	ldr	r3, [pc, #760]	; (8004da8 <UART_SetConfig+0x328>)
 8004ab0:	4013      	ands	r3, r2
 8004ab2:	697a      	ldr	r2, [r7, #20]
 8004ab4:	6812      	ldr	r2, [r2, #0]
 8004ab6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004ab8:	430b      	orrs	r3, r1
 8004aba:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004abc:	697b      	ldr	r3, [r7, #20]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	685b      	ldr	r3, [r3, #4]
 8004ac2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004ac6:	697b      	ldr	r3, [r7, #20]
 8004ac8:	68da      	ldr	r2, [r3, #12]
 8004aca:	697b      	ldr	r3, [r7, #20]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	430a      	orrs	r2, r1
 8004ad0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004ad2:	697b      	ldr	r3, [r7, #20]
 8004ad4:	699b      	ldr	r3, [r3, #24]
 8004ad6:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004ad8:	697b      	ldr	r3, [r7, #20]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	4ab3      	ldr	r2, [pc, #716]	; (8004dac <UART_SetConfig+0x32c>)
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d004      	beq.n	8004aec <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004ae2:	697b      	ldr	r3, [r7, #20]
 8004ae4:	6a1b      	ldr	r3, [r3, #32]
 8004ae6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004ae8:	4313      	orrs	r3, r2
 8004aea:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004aec:	697b      	ldr	r3, [r7, #20]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	689a      	ldr	r2, [r3, #8]
 8004af2:	4baf      	ldr	r3, [pc, #700]	; (8004db0 <UART_SetConfig+0x330>)
 8004af4:	4013      	ands	r3, r2
 8004af6:	697a      	ldr	r2, [r7, #20]
 8004af8:	6812      	ldr	r2, [r2, #0]
 8004afa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004afc:	430b      	orrs	r3, r1
 8004afe:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004b00:	697b      	ldr	r3, [r7, #20]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b06:	f023 010f 	bic.w	r1, r3, #15
 8004b0a:	697b      	ldr	r3, [r7, #20]
 8004b0c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004b0e:	697b      	ldr	r3, [r7, #20]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	430a      	orrs	r2, r1
 8004b14:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004b16:	697b      	ldr	r3, [r7, #20]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	4aa6      	ldr	r2, [pc, #664]	; (8004db4 <UART_SetConfig+0x334>)
 8004b1c:	4293      	cmp	r3, r2
 8004b1e:	d177      	bne.n	8004c10 <UART_SetConfig+0x190>
 8004b20:	4ba5      	ldr	r3, [pc, #660]	; (8004db8 <UART_SetConfig+0x338>)
 8004b22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b24:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004b28:	2b28      	cmp	r3, #40	; 0x28
 8004b2a:	d86d      	bhi.n	8004c08 <UART_SetConfig+0x188>
 8004b2c:	a201      	add	r2, pc, #4	; (adr r2, 8004b34 <UART_SetConfig+0xb4>)
 8004b2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b32:	bf00      	nop
 8004b34:	08004bd9 	.word	0x08004bd9
 8004b38:	08004c09 	.word	0x08004c09
 8004b3c:	08004c09 	.word	0x08004c09
 8004b40:	08004c09 	.word	0x08004c09
 8004b44:	08004c09 	.word	0x08004c09
 8004b48:	08004c09 	.word	0x08004c09
 8004b4c:	08004c09 	.word	0x08004c09
 8004b50:	08004c09 	.word	0x08004c09
 8004b54:	08004be1 	.word	0x08004be1
 8004b58:	08004c09 	.word	0x08004c09
 8004b5c:	08004c09 	.word	0x08004c09
 8004b60:	08004c09 	.word	0x08004c09
 8004b64:	08004c09 	.word	0x08004c09
 8004b68:	08004c09 	.word	0x08004c09
 8004b6c:	08004c09 	.word	0x08004c09
 8004b70:	08004c09 	.word	0x08004c09
 8004b74:	08004be9 	.word	0x08004be9
 8004b78:	08004c09 	.word	0x08004c09
 8004b7c:	08004c09 	.word	0x08004c09
 8004b80:	08004c09 	.word	0x08004c09
 8004b84:	08004c09 	.word	0x08004c09
 8004b88:	08004c09 	.word	0x08004c09
 8004b8c:	08004c09 	.word	0x08004c09
 8004b90:	08004c09 	.word	0x08004c09
 8004b94:	08004bf1 	.word	0x08004bf1
 8004b98:	08004c09 	.word	0x08004c09
 8004b9c:	08004c09 	.word	0x08004c09
 8004ba0:	08004c09 	.word	0x08004c09
 8004ba4:	08004c09 	.word	0x08004c09
 8004ba8:	08004c09 	.word	0x08004c09
 8004bac:	08004c09 	.word	0x08004c09
 8004bb0:	08004c09 	.word	0x08004c09
 8004bb4:	08004bf9 	.word	0x08004bf9
 8004bb8:	08004c09 	.word	0x08004c09
 8004bbc:	08004c09 	.word	0x08004c09
 8004bc0:	08004c09 	.word	0x08004c09
 8004bc4:	08004c09 	.word	0x08004c09
 8004bc8:	08004c09 	.word	0x08004c09
 8004bcc:	08004c09 	.word	0x08004c09
 8004bd0:	08004c09 	.word	0x08004c09
 8004bd4:	08004c01 	.word	0x08004c01
 8004bd8:	2301      	movs	r3, #1
 8004bda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004bde:	e326      	b.n	800522e <UART_SetConfig+0x7ae>
 8004be0:	2304      	movs	r3, #4
 8004be2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004be6:	e322      	b.n	800522e <UART_SetConfig+0x7ae>
 8004be8:	2308      	movs	r3, #8
 8004bea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004bee:	e31e      	b.n	800522e <UART_SetConfig+0x7ae>
 8004bf0:	2310      	movs	r3, #16
 8004bf2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004bf6:	e31a      	b.n	800522e <UART_SetConfig+0x7ae>
 8004bf8:	2320      	movs	r3, #32
 8004bfa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004bfe:	e316      	b.n	800522e <UART_SetConfig+0x7ae>
 8004c00:	2340      	movs	r3, #64	; 0x40
 8004c02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004c06:	e312      	b.n	800522e <UART_SetConfig+0x7ae>
 8004c08:	2380      	movs	r3, #128	; 0x80
 8004c0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004c0e:	e30e      	b.n	800522e <UART_SetConfig+0x7ae>
 8004c10:	697b      	ldr	r3, [r7, #20]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	4a69      	ldr	r2, [pc, #420]	; (8004dbc <UART_SetConfig+0x33c>)
 8004c16:	4293      	cmp	r3, r2
 8004c18:	d130      	bne.n	8004c7c <UART_SetConfig+0x1fc>
 8004c1a:	4b67      	ldr	r3, [pc, #412]	; (8004db8 <UART_SetConfig+0x338>)
 8004c1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c1e:	f003 0307 	and.w	r3, r3, #7
 8004c22:	2b05      	cmp	r3, #5
 8004c24:	d826      	bhi.n	8004c74 <UART_SetConfig+0x1f4>
 8004c26:	a201      	add	r2, pc, #4	; (adr r2, 8004c2c <UART_SetConfig+0x1ac>)
 8004c28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c2c:	08004c45 	.word	0x08004c45
 8004c30:	08004c4d 	.word	0x08004c4d
 8004c34:	08004c55 	.word	0x08004c55
 8004c38:	08004c5d 	.word	0x08004c5d
 8004c3c:	08004c65 	.word	0x08004c65
 8004c40:	08004c6d 	.word	0x08004c6d
 8004c44:	2300      	movs	r3, #0
 8004c46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004c4a:	e2f0      	b.n	800522e <UART_SetConfig+0x7ae>
 8004c4c:	2304      	movs	r3, #4
 8004c4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004c52:	e2ec      	b.n	800522e <UART_SetConfig+0x7ae>
 8004c54:	2308      	movs	r3, #8
 8004c56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004c5a:	e2e8      	b.n	800522e <UART_SetConfig+0x7ae>
 8004c5c:	2310      	movs	r3, #16
 8004c5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004c62:	e2e4      	b.n	800522e <UART_SetConfig+0x7ae>
 8004c64:	2320      	movs	r3, #32
 8004c66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004c6a:	e2e0      	b.n	800522e <UART_SetConfig+0x7ae>
 8004c6c:	2340      	movs	r3, #64	; 0x40
 8004c6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004c72:	e2dc      	b.n	800522e <UART_SetConfig+0x7ae>
 8004c74:	2380      	movs	r3, #128	; 0x80
 8004c76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004c7a:	e2d8      	b.n	800522e <UART_SetConfig+0x7ae>
 8004c7c:	697b      	ldr	r3, [r7, #20]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	4a4f      	ldr	r2, [pc, #316]	; (8004dc0 <UART_SetConfig+0x340>)
 8004c82:	4293      	cmp	r3, r2
 8004c84:	d130      	bne.n	8004ce8 <UART_SetConfig+0x268>
 8004c86:	4b4c      	ldr	r3, [pc, #304]	; (8004db8 <UART_SetConfig+0x338>)
 8004c88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c8a:	f003 0307 	and.w	r3, r3, #7
 8004c8e:	2b05      	cmp	r3, #5
 8004c90:	d826      	bhi.n	8004ce0 <UART_SetConfig+0x260>
 8004c92:	a201      	add	r2, pc, #4	; (adr r2, 8004c98 <UART_SetConfig+0x218>)
 8004c94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c98:	08004cb1 	.word	0x08004cb1
 8004c9c:	08004cb9 	.word	0x08004cb9
 8004ca0:	08004cc1 	.word	0x08004cc1
 8004ca4:	08004cc9 	.word	0x08004cc9
 8004ca8:	08004cd1 	.word	0x08004cd1
 8004cac:	08004cd9 	.word	0x08004cd9
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004cb6:	e2ba      	b.n	800522e <UART_SetConfig+0x7ae>
 8004cb8:	2304      	movs	r3, #4
 8004cba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004cbe:	e2b6      	b.n	800522e <UART_SetConfig+0x7ae>
 8004cc0:	2308      	movs	r3, #8
 8004cc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004cc6:	e2b2      	b.n	800522e <UART_SetConfig+0x7ae>
 8004cc8:	2310      	movs	r3, #16
 8004cca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004cce:	e2ae      	b.n	800522e <UART_SetConfig+0x7ae>
 8004cd0:	2320      	movs	r3, #32
 8004cd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004cd6:	e2aa      	b.n	800522e <UART_SetConfig+0x7ae>
 8004cd8:	2340      	movs	r3, #64	; 0x40
 8004cda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004cde:	e2a6      	b.n	800522e <UART_SetConfig+0x7ae>
 8004ce0:	2380      	movs	r3, #128	; 0x80
 8004ce2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004ce6:	e2a2      	b.n	800522e <UART_SetConfig+0x7ae>
 8004ce8:	697b      	ldr	r3, [r7, #20]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	4a35      	ldr	r2, [pc, #212]	; (8004dc4 <UART_SetConfig+0x344>)
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d130      	bne.n	8004d54 <UART_SetConfig+0x2d4>
 8004cf2:	4b31      	ldr	r3, [pc, #196]	; (8004db8 <UART_SetConfig+0x338>)
 8004cf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cf6:	f003 0307 	and.w	r3, r3, #7
 8004cfa:	2b05      	cmp	r3, #5
 8004cfc:	d826      	bhi.n	8004d4c <UART_SetConfig+0x2cc>
 8004cfe:	a201      	add	r2, pc, #4	; (adr r2, 8004d04 <UART_SetConfig+0x284>)
 8004d00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d04:	08004d1d 	.word	0x08004d1d
 8004d08:	08004d25 	.word	0x08004d25
 8004d0c:	08004d2d 	.word	0x08004d2d
 8004d10:	08004d35 	.word	0x08004d35
 8004d14:	08004d3d 	.word	0x08004d3d
 8004d18:	08004d45 	.word	0x08004d45
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004d22:	e284      	b.n	800522e <UART_SetConfig+0x7ae>
 8004d24:	2304      	movs	r3, #4
 8004d26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004d2a:	e280      	b.n	800522e <UART_SetConfig+0x7ae>
 8004d2c:	2308      	movs	r3, #8
 8004d2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004d32:	e27c      	b.n	800522e <UART_SetConfig+0x7ae>
 8004d34:	2310      	movs	r3, #16
 8004d36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004d3a:	e278      	b.n	800522e <UART_SetConfig+0x7ae>
 8004d3c:	2320      	movs	r3, #32
 8004d3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004d42:	e274      	b.n	800522e <UART_SetConfig+0x7ae>
 8004d44:	2340      	movs	r3, #64	; 0x40
 8004d46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004d4a:	e270      	b.n	800522e <UART_SetConfig+0x7ae>
 8004d4c:	2380      	movs	r3, #128	; 0x80
 8004d4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004d52:	e26c      	b.n	800522e <UART_SetConfig+0x7ae>
 8004d54:	697b      	ldr	r3, [r7, #20]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	4a1b      	ldr	r2, [pc, #108]	; (8004dc8 <UART_SetConfig+0x348>)
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d142      	bne.n	8004de4 <UART_SetConfig+0x364>
 8004d5e:	4b16      	ldr	r3, [pc, #88]	; (8004db8 <UART_SetConfig+0x338>)
 8004d60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d62:	f003 0307 	and.w	r3, r3, #7
 8004d66:	2b05      	cmp	r3, #5
 8004d68:	d838      	bhi.n	8004ddc <UART_SetConfig+0x35c>
 8004d6a:	a201      	add	r2, pc, #4	; (adr r2, 8004d70 <UART_SetConfig+0x2f0>)
 8004d6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d70:	08004d89 	.word	0x08004d89
 8004d74:	08004d91 	.word	0x08004d91
 8004d78:	08004d99 	.word	0x08004d99
 8004d7c:	08004da1 	.word	0x08004da1
 8004d80:	08004dcd 	.word	0x08004dcd
 8004d84:	08004dd5 	.word	0x08004dd5
 8004d88:	2300      	movs	r3, #0
 8004d8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004d8e:	e24e      	b.n	800522e <UART_SetConfig+0x7ae>
 8004d90:	2304      	movs	r3, #4
 8004d92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004d96:	e24a      	b.n	800522e <UART_SetConfig+0x7ae>
 8004d98:	2308      	movs	r3, #8
 8004d9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004d9e:	e246      	b.n	800522e <UART_SetConfig+0x7ae>
 8004da0:	2310      	movs	r3, #16
 8004da2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004da6:	e242      	b.n	800522e <UART_SetConfig+0x7ae>
 8004da8:	cfff69f3 	.word	0xcfff69f3
 8004dac:	58000c00 	.word	0x58000c00
 8004db0:	11fff4ff 	.word	0x11fff4ff
 8004db4:	40011000 	.word	0x40011000
 8004db8:	58024400 	.word	0x58024400
 8004dbc:	40004400 	.word	0x40004400
 8004dc0:	40004800 	.word	0x40004800
 8004dc4:	40004c00 	.word	0x40004c00
 8004dc8:	40005000 	.word	0x40005000
 8004dcc:	2320      	movs	r3, #32
 8004dce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004dd2:	e22c      	b.n	800522e <UART_SetConfig+0x7ae>
 8004dd4:	2340      	movs	r3, #64	; 0x40
 8004dd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004dda:	e228      	b.n	800522e <UART_SetConfig+0x7ae>
 8004ddc:	2380      	movs	r3, #128	; 0x80
 8004dde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004de2:	e224      	b.n	800522e <UART_SetConfig+0x7ae>
 8004de4:	697b      	ldr	r3, [r7, #20]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	4ab1      	ldr	r2, [pc, #708]	; (80050b0 <UART_SetConfig+0x630>)
 8004dea:	4293      	cmp	r3, r2
 8004dec:	d176      	bne.n	8004edc <UART_SetConfig+0x45c>
 8004dee:	4bb1      	ldr	r3, [pc, #708]	; (80050b4 <UART_SetConfig+0x634>)
 8004df0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004df2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004df6:	2b28      	cmp	r3, #40	; 0x28
 8004df8:	d86c      	bhi.n	8004ed4 <UART_SetConfig+0x454>
 8004dfa:	a201      	add	r2, pc, #4	; (adr r2, 8004e00 <UART_SetConfig+0x380>)
 8004dfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e00:	08004ea5 	.word	0x08004ea5
 8004e04:	08004ed5 	.word	0x08004ed5
 8004e08:	08004ed5 	.word	0x08004ed5
 8004e0c:	08004ed5 	.word	0x08004ed5
 8004e10:	08004ed5 	.word	0x08004ed5
 8004e14:	08004ed5 	.word	0x08004ed5
 8004e18:	08004ed5 	.word	0x08004ed5
 8004e1c:	08004ed5 	.word	0x08004ed5
 8004e20:	08004ead 	.word	0x08004ead
 8004e24:	08004ed5 	.word	0x08004ed5
 8004e28:	08004ed5 	.word	0x08004ed5
 8004e2c:	08004ed5 	.word	0x08004ed5
 8004e30:	08004ed5 	.word	0x08004ed5
 8004e34:	08004ed5 	.word	0x08004ed5
 8004e38:	08004ed5 	.word	0x08004ed5
 8004e3c:	08004ed5 	.word	0x08004ed5
 8004e40:	08004eb5 	.word	0x08004eb5
 8004e44:	08004ed5 	.word	0x08004ed5
 8004e48:	08004ed5 	.word	0x08004ed5
 8004e4c:	08004ed5 	.word	0x08004ed5
 8004e50:	08004ed5 	.word	0x08004ed5
 8004e54:	08004ed5 	.word	0x08004ed5
 8004e58:	08004ed5 	.word	0x08004ed5
 8004e5c:	08004ed5 	.word	0x08004ed5
 8004e60:	08004ebd 	.word	0x08004ebd
 8004e64:	08004ed5 	.word	0x08004ed5
 8004e68:	08004ed5 	.word	0x08004ed5
 8004e6c:	08004ed5 	.word	0x08004ed5
 8004e70:	08004ed5 	.word	0x08004ed5
 8004e74:	08004ed5 	.word	0x08004ed5
 8004e78:	08004ed5 	.word	0x08004ed5
 8004e7c:	08004ed5 	.word	0x08004ed5
 8004e80:	08004ec5 	.word	0x08004ec5
 8004e84:	08004ed5 	.word	0x08004ed5
 8004e88:	08004ed5 	.word	0x08004ed5
 8004e8c:	08004ed5 	.word	0x08004ed5
 8004e90:	08004ed5 	.word	0x08004ed5
 8004e94:	08004ed5 	.word	0x08004ed5
 8004e98:	08004ed5 	.word	0x08004ed5
 8004e9c:	08004ed5 	.word	0x08004ed5
 8004ea0:	08004ecd 	.word	0x08004ecd
 8004ea4:	2301      	movs	r3, #1
 8004ea6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004eaa:	e1c0      	b.n	800522e <UART_SetConfig+0x7ae>
 8004eac:	2304      	movs	r3, #4
 8004eae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004eb2:	e1bc      	b.n	800522e <UART_SetConfig+0x7ae>
 8004eb4:	2308      	movs	r3, #8
 8004eb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004eba:	e1b8      	b.n	800522e <UART_SetConfig+0x7ae>
 8004ebc:	2310      	movs	r3, #16
 8004ebe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004ec2:	e1b4      	b.n	800522e <UART_SetConfig+0x7ae>
 8004ec4:	2320      	movs	r3, #32
 8004ec6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004eca:	e1b0      	b.n	800522e <UART_SetConfig+0x7ae>
 8004ecc:	2340      	movs	r3, #64	; 0x40
 8004ece:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004ed2:	e1ac      	b.n	800522e <UART_SetConfig+0x7ae>
 8004ed4:	2380      	movs	r3, #128	; 0x80
 8004ed6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004eda:	e1a8      	b.n	800522e <UART_SetConfig+0x7ae>
 8004edc:	697b      	ldr	r3, [r7, #20]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	4a75      	ldr	r2, [pc, #468]	; (80050b8 <UART_SetConfig+0x638>)
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d130      	bne.n	8004f48 <UART_SetConfig+0x4c8>
 8004ee6:	4b73      	ldr	r3, [pc, #460]	; (80050b4 <UART_SetConfig+0x634>)
 8004ee8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004eea:	f003 0307 	and.w	r3, r3, #7
 8004eee:	2b05      	cmp	r3, #5
 8004ef0:	d826      	bhi.n	8004f40 <UART_SetConfig+0x4c0>
 8004ef2:	a201      	add	r2, pc, #4	; (adr r2, 8004ef8 <UART_SetConfig+0x478>)
 8004ef4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ef8:	08004f11 	.word	0x08004f11
 8004efc:	08004f19 	.word	0x08004f19
 8004f00:	08004f21 	.word	0x08004f21
 8004f04:	08004f29 	.word	0x08004f29
 8004f08:	08004f31 	.word	0x08004f31
 8004f0c:	08004f39 	.word	0x08004f39
 8004f10:	2300      	movs	r3, #0
 8004f12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f16:	e18a      	b.n	800522e <UART_SetConfig+0x7ae>
 8004f18:	2304      	movs	r3, #4
 8004f1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f1e:	e186      	b.n	800522e <UART_SetConfig+0x7ae>
 8004f20:	2308      	movs	r3, #8
 8004f22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f26:	e182      	b.n	800522e <UART_SetConfig+0x7ae>
 8004f28:	2310      	movs	r3, #16
 8004f2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f2e:	e17e      	b.n	800522e <UART_SetConfig+0x7ae>
 8004f30:	2320      	movs	r3, #32
 8004f32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f36:	e17a      	b.n	800522e <UART_SetConfig+0x7ae>
 8004f38:	2340      	movs	r3, #64	; 0x40
 8004f3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f3e:	e176      	b.n	800522e <UART_SetConfig+0x7ae>
 8004f40:	2380      	movs	r3, #128	; 0x80
 8004f42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f46:	e172      	b.n	800522e <UART_SetConfig+0x7ae>
 8004f48:	697b      	ldr	r3, [r7, #20]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	4a5b      	ldr	r2, [pc, #364]	; (80050bc <UART_SetConfig+0x63c>)
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d130      	bne.n	8004fb4 <UART_SetConfig+0x534>
 8004f52:	4b58      	ldr	r3, [pc, #352]	; (80050b4 <UART_SetConfig+0x634>)
 8004f54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f56:	f003 0307 	and.w	r3, r3, #7
 8004f5a:	2b05      	cmp	r3, #5
 8004f5c:	d826      	bhi.n	8004fac <UART_SetConfig+0x52c>
 8004f5e:	a201      	add	r2, pc, #4	; (adr r2, 8004f64 <UART_SetConfig+0x4e4>)
 8004f60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f64:	08004f7d 	.word	0x08004f7d
 8004f68:	08004f85 	.word	0x08004f85
 8004f6c:	08004f8d 	.word	0x08004f8d
 8004f70:	08004f95 	.word	0x08004f95
 8004f74:	08004f9d 	.word	0x08004f9d
 8004f78:	08004fa5 	.word	0x08004fa5
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f82:	e154      	b.n	800522e <UART_SetConfig+0x7ae>
 8004f84:	2304      	movs	r3, #4
 8004f86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f8a:	e150      	b.n	800522e <UART_SetConfig+0x7ae>
 8004f8c:	2308      	movs	r3, #8
 8004f8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f92:	e14c      	b.n	800522e <UART_SetConfig+0x7ae>
 8004f94:	2310      	movs	r3, #16
 8004f96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f9a:	e148      	b.n	800522e <UART_SetConfig+0x7ae>
 8004f9c:	2320      	movs	r3, #32
 8004f9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004fa2:	e144      	b.n	800522e <UART_SetConfig+0x7ae>
 8004fa4:	2340      	movs	r3, #64	; 0x40
 8004fa6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004faa:	e140      	b.n	800522e <UART_SetConfig+0x7ae>
 8004fac:	2380      	movs	r3, #128	; 0x80
 8004fae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004fb2:	e13c      	b.n	800522e <UART_SetConfig+0x7ae>
 8004fb4:	697b      	ldr	r3, [r7, #20]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	4a41      	ldr	r2, [pc, #260]	; (80050c0 <UART_SetConfig+0x640>)
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	f040 8082 	bne.w	80050c4 <UART_SetConfig+0x644>
 8004fc0:	4b3c      	ldr	r3, [pc, #240]	; (80050b4 <UART_SetConfig+0x634>)
 8004fc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fc4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004fc8:	2b28      	cmp	r3, #40	; 0x28
 8004fca:	d86d      	bhi.n	80050a8 <UART_SetConfig+0x628>
 8004fcc:	a201      	add	r2, pc, #4	; (adr r2, 8004fd4 <UART_SetConfig+0x554>)
 8004fce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fd2:	bf00      	nop
 8004fd4:	08005079 	.word	0x08005079
 8004fd8:	080050a9 	.word	0x080050a9
 8004fdc:	080050a9 	.word	0x080050a9
 8004fe0:	080050a9 	.word	0x080050a9
 8004fe4:	080050a9 	.word	0x080050a9
 8004fe8:	080050a9 	.word	0x080050a9
 8004fec:	080050a9 	.word	0x080050a9
 8004ff0:	080050a9 	.word	0x080050a9
 8004ff4:	08005081 	.word	0x08005081
 8004ff8:	080050a9 	.word	0x080050a9
 8004ffc:	080050a9 	.word	0x080050a9
 8005000:	080050a9 	.word	0x080050a9
 8005004:	080050a9 	.word	0x080050a9
 8005008:	080050a9 	.word	0x080050a9
 800500c:	080050a9 	.word	0x080050a9
 8005010:	080050a9 	.word	0x080050a9
 8005014:	08005089 	.word	0x08005089
 8005018:	080050a9 	.word	0x080050a9
 800501c:	080050a9 	.word	0x080050a9
 8005020:	080050a9 	.word	0x080050a9
 8005024:	080050a9 	.word	0x080050a9
 8005028:	080050a9 	.word	0x080050a9
 800502c:	080050a9 	.word	0x080050a9
 8005030:	080050a9 	.word	0x080050a9
 8005034:	08005091 	.word	0x08005091
 8005038:	080050a9 	.word	0x080050a9
 800503c:	080050a9 	.word	0x080050a9
 8005040:	080050a9 	.word	0x080050a9
 8005044:	080050a9 	.word	0x080050a9
 8005048:	080050a9 	.word	0x080050a9
 800504c:	080050a9 	.word	0x080050a9
 8005050:	080050a9 	.word	0x080050a9
 8005054:	08005099 	.word	0x08005099
 8005058:	080050a9 	.word	0x080050a9
 800505c:	080050a9 	.word	0x080050a9
 8005060:	080050a9 	.word	0x080050a9
 8005064:	080050a9 	.word	0x080050a9
 8005068:	080050a9 	.word	0x080050a9
 800506c:	080050a9 	.word	0x080050a9
 8005070:	080050a9 	.word	0x080050a9
 8005074:	080050a1 	.word	0x080050a1
 8005078:	2301      	movs	r3, #1
 800507a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800507e:	e0d6      	b.n	800522e <UART_SetConfig+0x7ae>
 8005080:	2304      	movs	r3, #4
 8005082:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005086:	e0d2      	b.n	800522e <UART_SetConfig+0x7ae>
 8005088:	2308      	movs	r3, #8
 800508a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800508e:	e0ce      	b.n	800522e <UART_SetConfig+0x7ae>
 8005090:	2310      	movs	r3, #16
 8005092:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005096:	e0ca      	b.n	800522e <UART_SetConfig+0x7ae>
 8005098:	2320      	movs	r3, #32
 800509a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800509e:	e0c6      	b.n	800522e <UART_SetConfig+0x7ae>
 80050a0:	2340      	movs	r3, #64	; 0x40
 80050a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80050a6:	e0c2      	b.n	800522e <UART_SetConfig+0x7ae>
 80050a8:	2380      	movs	r3, #128	; 0x80
 80050aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80050ae:	e0be      	b.n	800522e <UART_SetConfig+0x7ae>
 80050b0:	40011400 	.word	0x40011400
 80050b4:	58024400 	.word	0x58024400
 80050b8:	40007800 	.word	0x40007800
 80050bc:	40007c00 	.word	0x40007c00
 80050c0:	40011800 	.word	0x40011800
 80050c4:	697b      	ldr	r3, [r7, #20]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	4aad      	ldr	r2, [pc, #692]	; (8005380 <UART_SetConfig+0x900>)
 80050ca:	4293      	cmp	r3, r2
 80050cc:	d176      	bne.n	80051bc <UART_SetConfig+0x73c>
 80050ce:	4bad      	ldr	r3, [pc, #692]	; (8005384 <UART_SetConfig+0x904>)
 80050d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050d2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80050d6:	2b28      	cmp	r3, #40	; 0x28
 80050d8:	d86c      	bhi.n	80051b4 <UART_SetConfig+0x734>
 80050da:	a201      	add	r2, pc, #4	; (adr r2, 80050e0 <UART_SetConfig+0x660>)
 80050dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050e0:	08005185 	.word	0x08005185
 80050e4:	080051b5 	.word	0x080051b5
 80050e8:	080051b5 	.word	0x080051b5
 80050ec:	080051b5 	.word	0x080051b5
 80050f0:	080051b5 	.word	0x080051b5
 80050f4:	080051b5 	.word	0x080051b5
 80050f8:	080051b5 	.word	0x080051b5
 80050fc:	080051b5 	.word	0x080051b5
 8005100:	0800518d 	.word	0x0800518d
 8005104:	080051b5 	.word	0x080051b5
 8005108:	080051b5 	.word	0x080051b5
 800510c:	080051b5 	.word	0x080051b5
 8005110:	080051b5 	.word	0x080051b5
 8005114:	080051b5 	.word	0x080051b5
 8005118:	080051b5 	.word	0x080051b5
 800511c:	080051b5 	.word	0x080051b5
 8005120:	08005195 	.word	0x08005195
 8005124:	080051b5 	.word	0x080051b5
 8005128:	080051b5 	.word	0x080051b5
 800512c:	080051b5 	.word	0x080051b5
 8005130:	080051b5 	.word	0x080051b5
 8005134:	080051b5 	.word	0x080051b5
 8005138:	080051b5 	.word	0x080051b5
 800513c:	080051b5 	.word	0x080051b5
 8005140:	0800519d 	.word	0x0800519d
 8005144:	080051b5 	.word	0x080051b5
 8005148:	080051b5 	.word	0x080051b5
 800514c:	080051b5 	.word	0x080051b5
 8005150:	080051b5 	.word	0x080051b5
 8005154:	080051b5 	.word	0x080051b5
 8005158:	080051b5 	.word	0x080051b5
 800515c:	080051b5 	.word	0x080051b5
 8005160:	080051a5 	.word	0x080051a5
 8005164:	080051b5 	.word	0x080051b5
 8005168:	080051b5 	.word	0x080051b5
 800516c:	080051b5 	.word	0x080051b5
 8005170:	080051b5 	.word	0x080051b5
 8005174:	080051b5 	.word	0x080051b5
 8005178:	080051b5 	.word	0x080051b5
 800517c:	080051b5 	.word	0x080051b5
 8005180:	080051ad 	.word	0x080051ad
 8005184:	2301      	movs	r3, #1
 8005186:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800518a:	e050      	b.n	800522e <UART_SetConfig+0x7ae>
 800518c:	2304      	movs	r3, #4
 800518e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005192:	e04c      	b.n	800522e <UART_SetConfig+0x7ae>
 8005194:	2308      	movs	r3, #8
 8005196:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800519a:	e048      	b.n	800522e <UART_SetConfig+0x7ae>
 800519c:	2310      	movs	r3, #16
 800519e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80051a2:	e044      	b.n	800522e <UART_SetConfig+0x7ae>
 80051a4:	2320      	movs	r3, #32
 80051a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80051aa:	e040      	b.n	800522e <UART_SetConfig+0x7ae>
 80051ac:	2340      	movs	r3, #64	; 0x40
 80051ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80051b2:	e03c      	b.n	800522e <UART_SetConfig+0x7ae>
 80051b4:	2380      	movs	r3, #128	; 0x80
 80051b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80051ba:	e038      	b.n	800522e <UART_SetConfig+0x7ae>
 80051bc:	697b      	ldr	r3, [r7, #20]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	4a71      	ldr	r2, [pc, #452]	; (8005388 <UART_SetConfig+0x908>)
 80051c2:	4293      	cmp	r3, r2
 80051c4:	d130      	bne.n	8005228 <UART_SetConfig+0x7a8>
 80051c6:	4b6f      	ldr	r3, [pc, #444]	; (8005384 <UART_SetConfig+0x904>)
 80051c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051ca:	f003 0307 	and.w	r3, r3, #7
 80051ce:	2b05      	cmp	r3, #5
 80051d0:	d826      	bhi.n	8005220 <UART_SetConfig+0x7a0>
 80051d2:	a201      	add	r2, pc, #4	; (adr r2, 80051d8 <UART_SetConfig+0x758>)
 80051d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051d8:	080051f1 	.word	0x080051f1
 80051dc:	080051f9 	.word	0x080051f9
 80051e0:	08005201 	.word	0x08005201
 80051e4:	08005209 	.word	0x08005209
 80051e8:	08005211 	.word	0x08005211
 80051ec:	08005219 	.word	0x08005219
 80051f0:	2302      	movs	r3, #2
 80051f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80051f6:	e01a      	b.n	800522e <UART_SetConfig+0x7ae>
 80051f8:	2304      	movs	r3, #4
 80051fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80051fe:	e016      	b.n	800522e <UART_SetConfig+0x7ae>
 8005200:	2308      	movs	r3, #8
 8005202:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005206:	e012      	b.n	800522e <UART_SetConfig+0x7ae>
 8005208:	2310      	movs	r3, #16
 800520a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800520e:	e00e      	b.n	800522e <UART_SetConfig+0x7ae>
 8005210:	2320      	movs	r3, #32
 8005212:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005216:	e00a      	b.n	800522e <UART_SetConfig+0x7ae>
 8005218:	2340      	movs	r3, #64	; 0x40
 800521a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800521e:	e006      	b.n	800522e <UART_SetConfig+0x7ae>
 8005220:	2380      	movs	r3, #128	; 0x80
 8005222:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005226:	e002      	b.n	800522e <UART_SetConfig+0x7ae>
 8005228:	2380      	movs	r3, #128	; 0x80
 800522a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800522e:	697b      	ldr	r3, [r7, #20]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	4a55      	ldr	r2, [pc, #340]	; (8005388 <UART_SetConfig+0x908>)
 8005234:	4293      	cmp	r3, r2
 8005236:	f040 80f8 	bne.w	800542a <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800523a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800523e:	2b20      	cmp	r3, #32
 8005240:	dc46      	bgt.n	80052d0 <UART_SetConfig+0x850>
 8005242:	2b02      	cmp	r3, #2
 8005244:	db75      	blt.n	8005332 <UART_SetConfig+0x8b2>
 8005246:	3b02      	subs	r3, #2
 8005248:	2b1e      	cmp	r3, #30
 800524a:	d872      	bhi.n	8005332 <UART_SetConfig+0x8b2>
 800524c:	a201      	add	r2, pc, #4	; (adr r2, 8005254 <UART_SetConfig+0x7d4>)
 800524e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005252:	bf00      	nop
 8005254:	080052d7 	.word	0x080052d7
 8005258:	08005333 	.word	0x08005333
 800525c:	080052df 	.word	0x080052df
 8005260:	08005333 	.word	0x08005333
 8005264:	08005333 	.word	0x08005333
 8005268:	08005333 	.word	0x08005333
 800526c:	080052ef 	.word	0x080052ef
 8005270:	08005333 	.word	0x08005333
 8005274:	08005333 	.word	0x08005333
 8005278:	08005333 	.word	0x08005333
 800527c:	08005333 	.word	0x08005333
 8005280:	08005333 	.word	0x08005333
 8005284:	08005333 	.word	0x08005333
 8005288:	08005333 	.word	0x08005333
 800528c:	080052ff 	.word	0x080052ff
 8005290:	08005333 	.word	0x08005333
 8005294:	08005333 	.word	0x08005333
 8005298:	08005333 	.word	0x08005333
 800529c:	08005333 	.word	0x08005333
 80052a0:	08005333 	.word	0x08005333
 80052a4:	08005333 	.word	0x08005333
 80052a8:	08005333 	.word	0x08005333
 80052ac:	08005333 	.word	0x08005333
 80052b0:	08005333 	.word	0x08005333
 80052b4:	08005333 	.word	0x08005333
 80052b8:	08005333 	.word	0x08005333
 80052bc:	08005333 	.word	0x08005333
 80052c0:	08005333 	.word	0x08005333
 80052c4:	08005333 	.word	0x08005333
 80052c8:	08005333 	.word	0x08005333
 80052cc:	08005325 	.word	0x08005325
 80052d0:	2b40      	cmp	r3, #64	; 0x40
 80052d2:	d02a      	beq.n	800532a <UART_SetConfig+0x8aa>
 80052d4:	e02d      	b.n	8005332 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80052d6:	f7fe fc6d 	bl	8003bb4 <HAL_RCCEx_GetD3PCLK1Freq>
 80052da:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80052dc:	e02f      	b.n	800533e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80052de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80052e2:	4618      	mov	r0, r3
 80052e4:	f7fe fc7c 	bl	8003be0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80052e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80052ec:	e027      	b.n	800533e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80052ee:	f107 0318 	add.w	r3, r7, #24
 80052f2:	4618      	mov	r0, r3
 80052f4:	f7fe fdc8 	bl	8003e88 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80052f8:	69fb      	ldr	r3, [r7, #28]
 80052fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80052fc:	e01f      	b.n	800533e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80052fe:	4b21      	ldr	r3, [pc, #132]	; (8005384 <UART_SetConfig+0x904>)
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f003 0320 	and.w	r3, r3, #32
 8005306:	2b00      	cmp	r3, #0
 8005308:	d009      	beq.n	800531e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800530a:	4b1e      	ldr	r3, [pc, #120]	; (8005384 <UART_SetConfig+0x904>)
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	08db      	lsrs	r3, r3, #3
 8005310:	f003 0303 	and.w	r3, r3, #3
 8005314:	4a1d      	ldr	r2, [pc, #116]	; (800538c <UART_SetConfig+0x90c>)
 8005316:	fa22 f303 	lsr.w	r3, r2, r3
 800531a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800531c:	e00f      	b.n	800533e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800531e:	4b1b      	ldr	r3, [pc, #108]	; (800538c <UART_SetConfig+0x90c>)
 8005320:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005322:	e00c      	b.n	800533e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005324:	4b1a      	ldr	r3, [pc, #104]	; (8005390 <UART_SetConfig+0x910>)
 8005326:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005328:	e009      	b.n	800533e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800532a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800532e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005330:	e005      	b.n	800533e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8005332:	2300      	movs	r3, #0
 8005334:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8005336:	2301      	movs	r3, #1
 8005338:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800533c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800533e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005340:	2b00      	cmp	r3, #0
 8005342:	f000 81ee 	beq.w	8005722 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005346:	697b      	ldr	r3, [r7, #20]
 8005348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800534a:	4a12      	ldr	r2, [pc, #72]	; (8005394 <UART_SetConfig+0x914>)
 800534c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005350:	461a      	mov	r2, r3
 8005352:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005354:	fbb3 f3f2 	udiv	r3, r3, r2
 8005358:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800535a:	697b      	ldr	r3, [r7, #20]
 800535c:	685a      	ldr	r2, [r3, #4]
 800535e:	4613      	mov	r3, r2
 8005360:	005b      	lsls	r3, r3, #1
 8005362:	4413      	add	r3, r2
 8005364:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005366:	429a      	cmp	r2, r3
 8005368:	d305      	bcc.n	8005376 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800536a:	697b      	ldr	r3, [r7, #20]
 800536c:	685b      	ldr	r3, [r3, #4]
 800536e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005370:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005372:	429a      	cmp	r2, r3
 8005374:	d910      	bls.n	8005398 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8005376:	2301      	movs	r3, #1
 8005378:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800537c:	e1d1      	b.n	8005722 <UART_SetConfig+0xca2>
 800537e:	bf00      	nop
 8005380:	40011c00 	.word	0x40011c00
 8005384:	58024400 	.word	0x58024400
 8005388:	58000c00 	.word	0x58000c00
 800538c:	03d09000 	.word	0x03d09000
 8005390:	003d0900 	.word	0x003d0900
 8005394:	08008ab8 	.word	0x08008ab8
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005398:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800539a:	2200      	movs	r2, #0
 800539c:	60bb      	str	r3, [r7, #8]
 800539e:	60fa      	str	r2, [r7, #12]
 80053a0:	697b      	ldr	r3, [r7, #20]
 80053a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053a4:	4ac0      	ldr	r2, [pc, #768]	; (80056a8 <UART_SetConfig+0xc28>)
 80053a6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80053aa:	b29b      	uxth	r3, r3
 80053ac:	2200      	movs	r2, #0
 80053ae:	603b      	str	r3, [r7, #0]
 80053b0:	607a      	str	r2, [r7, #4]
 80053b2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80053b6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80053ba:	f7fa ffa9 	bl	8000310 <__aeabi_uldivmod>
 80053be:	4602      	mov	r2, r0
 80053c0:	460b      	mov	r3, r1
 80053c2:	4610      	mov	r0, r2
 80053c4:	4619      	mov	r1, r3
 80053c6:	f04f 0200 	mov.w	r2, #0
 80053ca:	f04f 0300 	mov.w	r3, #0
 80053ce:	020b      	lsls	r3, r1, #8
 80053d0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80053d4:	0202      	lsls	r2, r0, #8
 80053d6:	6979      	ldr	r1, [r7, #20]
 80053d8:	6849      	ldr	r1, [r1, #4]
 80053da:	0849      	lsrs	r1, r1, #1
 80053dc:	2000      	movs	r0, #0
 80053de:	460c      	mov	r4, r1
 80053e0:	4605      	mov	r5, r0
 80053e2:	eb12 0804 	adds.w	r8, r2, r4
 80053e6:	eb43 0905 	adc.w	r9, r3, r5
 80053ea:	697b      	ldr	r3, [r7, #20]
 80053ec:	685b      	ldr	r3, [r3, #4]
 80053ee:	2200      	movs	r2, #0
 80053f0:	469a      	mov	sl, r3
 80053f2:	4693      	mov	fp, r2
 80053f4:	4652      	mov	r2, sl
 80053f6:	465b      	mov	r3, fp
 80053f8:	4640      	mov	r0, r8
 80053fa:	4649      	mov	r1, r9
 80053fc:	f7fa ff88 	bl	8000310 <__aeabi_uldivmod>
 8005400:	4602      	mov	r2, r0
 8005402:	460b      	mov	r3, r1
 8005404:	4613      	mov	r3, r2
 8005406:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005408:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800540a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800540e:	d308      	bcc.n	8005422 <UART_SetConfig+0x9a2>
 8005410:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005412:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005416:	d204      	bcs.n	8005422 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8005418:	697b      	ldr	r3, [r7, #20]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800541e:	60da      	str	r2, [r3, #12]
 8005420:	e17f      	b.n	8005722 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8005422:	2301      	movs	r3, #1
 8005424:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8005428:	e17b      	b.n	8005722 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800542a:	697b      	ldr	r3, [r7, #20]
 800542c:	69db      	ldr	r3, [r3, #28]
 800542e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005432:	f040 80bd 	bne.w	80055b0 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8005436:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800543a:	2b20      	cmp	r3, #32
 800543c:	dc48      	bgt.n	80054d0 <UART_SetConfig+0xa50>
 800543e:	2b00      	cmp	r3, #0
 8005440:	db7b      	blt.n	800553a <UART_SetConfig+0xaba>
 8005442:	2b20      	cmp	r3, #32
 8005444:	d879      	bhi.n	800553a <UART_SetConfig+0xaba>
 8005446:	a201      	add	r2, pc, #4	; (adr r2, 800544c <UART_SetConfig+0x9cc>)
 8005448:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800544c:	080054d7 	.word	0x080054d7
 8005450:	080054df 	.word	0x080054df
 8005454:	0800553b 	.word	0x0800553b
 8005458:	0800553b 	.word	0x0800553b
 800545c:	080054e7 	.word	0x080054e7
 8005460:	0800553b 	.word	0x0800553b
 8005464:	0800553b 	.word	0x0800553b
 8005468:	0800553b 	.word	0x0800553b
 800546c:	080054f7 	.word	0x080054f7
 8005470:	0800553b 	.word	0x0800553b
 8005474:	0800553b 	.word	0x0800553b
 8005478:	0800553b 	.word	0x0800553b
 800547c:	0800553b 	.word	0x0800553b
 8005480:	0800553b 	.word	0x0800553b
 8005484:	0800553b 	.word	0x0800553b
 8005488:	0800553b 	.word	0x0800553b
 800548c:	08005507 	.word	0x08005507
 8005490:	0800553b 	.word	0x0800553b
 8005494:	0800553b 	.word	0x0800553b
 8005498:	0800553b 	.word	0x0800553b
 800549c:	0800553b 	.word	0x0800553b
 80054a0:	0800553b 	.word	0x0800553b
 80054a4:	0800553b 	.word	0x0800553b
 80054a8:	0800553b 	.word	0x0800553b
 80054ac:	0800553b 	.word	0x0800553b
 80054b0:	0800553b 	.word	0x0800553b
 80054b4:	0800553b 	.word	0x0800553b
 80054b8:	0800553b 	.word	0x0800553b
 80054bc:	0800553b 	.word	0x0800553b
 80054c0:	0800553b 	.word	0x0800553b
 80054c4:	0800553b 	.word	0x0800553b
 80054c8:	0800553b 	.word	0x0800553b
 80054cc:	0800552d 	.word	0x0800552d
 80054d0:	2b40      	cmp	r3, #64	; 0x40
 80054d2:	d02e      	beq.n	8005532 <UART_SetConfig+0xab2>
 80054d4:	e031      	b.n	800553a <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80054d6:	f7fd fc05 	bl	8002ce4 <HAL_RCC_GetPCLK1Freq>
 80054da:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80054dc:	e033      	b.n	8005546 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80054de:	f7fd fc17 	bl	8002d10 <HAL_RCC_GetPCLK2Freq>
 80054e2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80054e4:	e02f      	b.n	8005546 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80054e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80054ea:	4618      	mov	r0, r3
 80054ec:	f7fe fb78 	bl	8003be0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80054f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80054f4:	e027      	b.n	8005546 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80054f6:	f107 0318 	add.w	r3, r7, #24
 80054fa:	4618      	mov	r0, r3
 80054fc:	f7fe fcc4 	bl	8003e88 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005500:	69fb      	ldr	r3, [r7, #28]
 8005502:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005504:	e01f      	b.n	8005546 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005506:	4b69      	ldr	r3, [pc, #420]	; (80056ac <UART_SetConfig+0xc2c>)
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f003 0320 	and.w	r3, r3, #32
 800550e:	2b00      	cmp	r3, #0
 8005510:	d009      	beq.n	8005526 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005512:	4b66      	ldr	r3, [pc, #408]	; (80056ac <UART_SetConfig+0xc2c>)
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	08db      	lsrs	r3, r3, #3
 8005518:	f003 0303 	and.w	r3, r3, #3
 800551c:	4a64      	ldr	r2, [pc, #400]	; (80056b0 <UART_SetConfig+0xc30>)
 800551e:	fa22 f303 	lsr.w	r3, r2, r3
 8005522:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005524:	e00f      	b.n	8005546 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8005526:	4b62      	ldr	r3, [pc, #392]	; (80056b0 <UART_SetConfig+0xc30>)
 8005528:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800552a:	e00c      	b.n	8005546 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800552c:	4b61      	ldr	r3, [pc, #388]	; (80056b4 <UART_SetConfig+0xc34>)
 800552e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005530:	e009      	b.n	8005546 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005532:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005536:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005538:	e005      	b.n	8005546 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800553a:	2300      	movs	r3, #0
 800553c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800553e:	2301      	movs	r3, #1
 8005540:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8005544:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005546:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005548:	2b00      	cmp	r3, #0
 800554a:	f000 80ea 	beq.w	8005722 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800554e:	697b      	ldr	r3, [r7, #20]
 8005550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005552:	4a55      	ldr	r2, [pc, #340]	; (80056a8 <UART_SetConfig+0xc28>)
 8005554:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005558:	461a      	mov	r2, r3
 800555a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800555c:	fbb3 f3f2 	udiv	r3, r3, r2
 8005560:	005a      	lsls	r2, r3, #1
 8005562:	697b      	ldr	r3, [r7, #20]
 8005564:	685b      	ldr	r3, [r3, #4]
 8005566:	085b      	lsrs	r3, r3, #1
 8005568:	441a      	add	r2, r3
 800556a:	697b      	ldr	r3, [r7, #20]
 800556c:	685b      	ldr	r3, [r3, #4]
 800556e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005572:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005574:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005576:	2b0f      	cmp	r3, #15
 8005578:	d916      	bls.n	80055a8 <UART_SetConfig+0xb28>
 800557a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800557c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005580:	d212      	bcs.n	80055a8 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005582:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005584:	b29b      	uxth	r3, r3
 8005586:	f023 030f 	bic.w	r3, r3, #15
 800558a:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800558c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800558e:	085b      	lsrs	r3, r3, #1
 8005590:	b29b      	uxth	r3, r3
 8005592:	f003 0307 	and.w	r3, r3, #7
 8005596:	b29a      	uxth	r2, r3
 8005598:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800559a:	4313      	orrs	r3, r2
 800559c:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800559e:	697b      	ldr	r3, [r7, #20]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80055a4:	60da      	str	r2, [r3, #12]
 80055a6:	e0bc      	b.n	8005722 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 80055a8:	2301      	movs	r3, #1
 80055aa:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80055ae:	e0b8      	b.n	8005722 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 80055b0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80055b4:	2b20      	cmp	r3, #32
 80055b6:	dc4b      	bgt.n	8005650 <UART_SetConfig+0xbd0>
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	f2c0 8087 	blt.w	80056cc <UART_SetConfig+0xc4c>
 80055be:	2b20      	cmp	r3, #32
 80055c0:	f200 8084 	bhi.w	80056cc <UART_SetConfig+0xc4c>
 80055c4:	a201      	add	r2, pc, #4	; (adr r2, 80055cc <UART_SetConfig+0xb4c>)
 80055c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055ca:	bf00      	nop
 80055cc:	08005657 	.word	0x08005657
 80055d0:	0800565f 	.word	0x0800565f
 80055d4:	080056cd 	.word	0x080056cd
 80055d8:	080056cd 	.word	0x080056cd
 80055dc:	08005667 	.word	0x08005667
 80055e0:	080056cd 	.word	0x080056cd
 80055e4:	080056cd 	.word	0x080056cd
 80055e8:	080056cd 	.word	0x080056cd
 80055ec:	08005677 	.word	0x08005677
 80055f0:	080056cd 	.word	0x080056cd
 80055f4:	080056cd 	.word	0x080056cd
 80055f8:	080056cd 	.word	0x080056cd
 80055fc:	080056cd 	.word	0x080056cd
 8005600:	080056cd 	.word	0x080056cd
 8005604:	080056cd 	.word	0x080056cd
 8005608:	080056cd 	.word	0x080056cd
 800560c:	08005687 	.word	0x08005687
 8005610:	080056cd 	.word	0x080056cd
 8005614:	080056cd 	.word	0x080056cd
 8005618:	080056cd 	.word	0x080056cd
 800561c:	080056cd 	.word	0x080056cd
 8005620:	080056cd 	.word	0x080056cd
 8005624:	080056cd 	.word	0x080056cd
 8005628:	080056cd 	.word	0x080056cd
 800562c:	080056cd 	.word	0x080056cd
 8005630:	080056cd 	.word	0x080056cd
 8005634:	080056cd 	.word	0x080056cd
 8005638:	080056cd 	.word	0x080056cd
 800563c:	080056cd 	.word	0x080056cd
 8005640:	080056cd 	.word	0x080056cd
 8005644:	080056cd 	.word	0x080056cd
 8005648:	080056cd 	.word	0x080056cd
 800564c:	080056bf 	.word	0x080056bf
 8005650:	2b40      	cmp	r3, #64	; 0x40
 8005652:	d037      	beq.n	80056c4 <UART_SetConfig+0xc44>
 8005654:	e03a      	b.n	80056cc <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005656:	f7fd fb45 	bl	8002ce4 <HAL_RCC_GetPCLK1Freq>
 800565a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800565c:	e03c      	b.n	80056d8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800565e:	f7fd fb57 	bl	8002d10 <HAL_RCC_GetPCLK2Freq>
 8005662:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005664:	e038      	b.n	80056d8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005666:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800566a:	4618      	mov	r0, r3
 800566c:	f7fe fab8 	bl	8003be0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005670:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005672:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005674:	e030      	b.n	80056d8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005676:	f107 0318 	add.w	r3, r7, #24
 800567a:	4618      	mov	r0, r3
 800567c:	f7fe fc04 	bl	8003e88 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005680:	69fb      	ldr	r3, [r7, #28]
 8005682:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005684:	e028      	b.n	80056d8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005686:	4b09      	ldr	r3, [pc, #36]	; (80056ac <UART_SetConfig+0xc2c>)
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f003 0320 	and.w	r3, r3, #32
 800568e:	2b00      	cmp	r3, #0
 8005690:	d012      	beq.n	80056b8 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005692:	4b06      	ldr	r3, [pc, #24]	; (80056ac <UART_SetConfig+0xc2c>)
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	08db      	lsrs	r3, r3, #3
 8005698:	f003 0303 	and.w	r3, r3, #3
 800569c:	4a04      	ldr	r2, [pc, #16]	; (80056b0 <UART_SetConfig+0xc30>)
 800569e:	fa22 f303 	lsr.w	r3, r2, r3
 80056a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80056a4:	e018      	b.n	80056d8 <UART_SetConfig+0xc58>
 80056a6:	bf00      	nop
 80056a8:	08008ab8 	.word	0x08008ab8
 80056ac:	58024400 	.word	0x58024400
 80056b0:	03d09000 	.word	0x03d09000
 80056b4:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 80056b8:	4b24      	ldr	r3, [pc, #144]	; (800574c <UART_SetConfig+0xccc>)
 80056ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80056bc:	e00c      	b.n	80056d8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80056be:	4b24      	ldr	r3, [pc, #144]	; (8005750 <UART_SetConfig+0xcd0>)
 80056c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80056c2:	e009      	b.n	80056d8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80056c4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80056c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80056ca:	e005      	b.n	80056d8 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 80056cc:	2300      	movs	r3, #0
 80056ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80056d0:	2301      	movs	r3, #1
 80056d2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80056d6:	bf00      	nop
    }

    if (pclk != 0U)
 80056d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d021      	beq.n	8005722 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80056de:	697b      	ldr	r3, [r7, #20]
 80056e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056e2:	4a1c      	ldr	r2, [pc, #112]	; (8005754 <UART_SetConfig+0xcd4>)
 80056e4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80056e8:	461a      	mov	r2, r3
 80056ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056ec:	fbb3 f2f2 	udiv	r2, r3, r2
 80056f0:	697b      	ldr	r3, [r7, #20]
 80056f2:	685b      	ldr	r3, [r3, #4]
 80056f4:	085b      	lsrs	r3, r3, #1
 80056f6:	441a      	add	r2, r3
 80056f8:	697b      	ldr	r3, [r7, #20]
 80056fa:	685b      	ldr	r3, [r3, #4]
 80056fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005700:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005702:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005704:	2b0f      	cmp	r3, #15
 8005706:	d909      	bls.n	800571c <UART_SetConfig+0xc9c>
 8005708:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800570a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800570e:	d205      	bcs.n	800571c <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005710:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005712:	b29a      	uxth	r2, r3
 8005714:	697b      	ldr	r3, [r7, #20]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	60da      	str	r2, [r3, #12]
 800571a:	e002      	b.n	8005722 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800571c:	2301      	movs	r3, #1
 800571e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005722:	697b      	ldr	r3, [r7, #20]
 8005724:	2201      	movs	r2, #1
 8005726:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800572a:	697b      	ldr	r3, [r7, #20]
 800572c:	2201      	movs	r2, #1
 800572e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005732:	697b      	ldr	r3, [r7, #20]
 8005734:	2200      	movs	r2, #0
 8005736:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8005738:	697b      	ldr	r3, [r7, #20]
 800573a:	2200      	movs	r2, #0
 800573c:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800573e:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8005742:	4618      	mov	r0, r3
 8005744:	3748      	adds	r7, #72	; 0x48
 8005746:	46bd      	mov	sp, r7
 8005748:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800574c:	03d09000 	.word	0x03d09000
 8005750:	003d0900 	.word	0x003d0900
 8005754:	08008ab8 	.word	0x08008ab8

08005758 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005758:	b480      	push	{r7}
 800575a:	b083      	sub	sp, #12
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005764:	f003 0301 	and.w	r3, r3, #1
 8005768:	2b00      	cmp	r3, #0
 800576a:	d00a      	beq.n	8005782 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	685b      	ldr	r3, [r3, #4]
 8005772:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	430a      	orrs	r2, r1
 8005780:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005786:	f003 0302 	and.w	r3, r3, #2
 800578a:	2b00      	cmp	r3, #0
 800578c:	d00a      	beq.n	80057a4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	685b      	ldr	r3, [r3, #4]
 8005794:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	430a      	orrs	r2, r1
 80057a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057a8:	f003 0304 	and.w	r3, r3, #4
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d00a      	beq.n	80057c6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	685b      	ldr	r3, [r3, #4]
 80057b6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	430a      	orrs	r2, r1
 80057c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057ca:	f003 0308 	and.w	r3, r3, #8
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d00a      	beq.n	80057e8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	685b      	ldr	r3, [r3, #4]
 80057d8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	430a      	orrs	r2, r1
 80057e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057ec:	f003 0310 	and.w	r3, r3, #16
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d00a      	beq.n	800580a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	689b      	ldr	r3, [r3, #8]
 80057fa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	430a      	orrs	r2, r1
 8005808:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800580e:	f003 0320 	and.w	r3, r3, #32
 8005812:	2b00      	cmp	r3, #0
 8005814:	d00a      	beq.n	800582c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	689b      	ldr	r3, [r3, #8]
 800581c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	430a      	orrs	r2, r1
 800582a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005830:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005834:	2b00      	cmp	r3, #0
 8005836:	d01a      	beq.n	800586e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	685b      	ldr	r3, [r3, #4]
 800583e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	430a      	orrs	r2, r1
 800584c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005852:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005856:	d10a      	bne.n	800586e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	685b      	ldr	r3, [r3, #4]
 800585e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	430a      	orrs	r2, r1
 800586c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005872:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005876:	2b00      	cmp	r3, #0
 8005878:	d00a      	beq.n	8005890 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	685b      	ldr	r3, [r3, #4]
 8005880:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	430a      	orrs	r2, r1
 800588e:	605a      	str	r2, [r3, #4]
  }
}
 8005890:	bf00      	nop
 8005892:	370c      	adds	r7, #12
 8005894:	46bd      	mov	sp, r7
 8005896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589a:	4770      	bx	lr

0800589c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800589c:	b580      	push	{r7, lr}
 800589e:	b086      	sub	sp, #24
 80058a0:	af02      	add	r7, sp, #8
 80058a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2200      	movs	r2, #0
 80058a8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80058ac:	f7fb fbd2 	bl	8001054 <HAL_GetTick>
 80058b0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f003 0308 	and.w	r3, r3, #8
 80058bc:	2b08      	cmp	r3, #8
 80058be:	d10e      	bne.n	80058de <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80058c0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80058c4:	9300      	str	r3, [sp, #0]
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	2200      	movs	r2, #0
 80058ca:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80058ce:	6878      	ldr	r0, [r7, #4]
 80058d0:	f000 f82f 	bl	8005932 <UART_WaitOnFlagUntilTimeout>
 80058d4:	4603      	mov	r3, r0
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d001      	beq.n	80058de <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80058da:	2303      	movs	r3, #3
 80058dc:	e025      	b.n	800592a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f003 0304 	and.w	r3, r3, #4
 80058e8:	2b04      	cmp	r3, #4
 80058ea:	d10e      	bne.n	800590a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80058ec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80058f0:	9300      	str	r3, [sp, #0]
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	2200      	movs	r2, #0
 80058f6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80058fa:	6878      	ldr	r0, [r7, #4]
 80058fc:	f000 f819 	bl	8005932 <UART_WaitOnFlagUntilTimeout>
 8005900:	4603      	mov	r3, r0
 8005902:	2b00      	cmp	r3, #0
 8005904:	d001      	beq.n	800590a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005906:	2303      	movs	r3, #3
 8005908:	e00f      	b.n	800592a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	2220      	movs	r2, #32
 800590e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	2220      	movs	r2, #32
 8005916:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	2200      	movs	r2, #0
 800591e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2200      	movs	r2, #0
 8005924:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005928:	2300      	movs	r3, #0
}
 800592a:	4618      	mov	r0, r3
 800592c:	3710      	adds	r7, #16
 800592e:	46bd      	mov	sp, r7
 8005930:	bd80      	pop	{r7, pc}

08005932 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005932:	b580      	push	{r7, lr}
 8005934:	b09c      	sub	sp, #112	; 0x70
 8005936:	af00      	add	r7, sp, #0
 8005938:	60f8      	str	r0, [r7, #12]
 800593a:	60b9      	str	r1, [r7, #8]
 800593c:	603b      	str	r3, [r7, #0]
 800593e:	4613      	mov	r3, r2
 8005940:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005942:	e0a9      	b.n	8005a98 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005944:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005946:	f1b3 3fff 	cmp.w	r3, #4294967295
 800594a:	f000 80a5 	beq.w	8005a98 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800594e:	f7fb fb81 	bl	8001054 <HAL_GetTick>
 8005952:	4602      	mov	r2, r0
 8005954:	683b      	ldr	r3, [r7, #0]
 8005956:	1ad3      	subs	r3, r2, r3
 8005958:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800595a:	429a      	cmp	r2, r3
 800595c:	d302      	bcc.n	8005964 <UART_WaitOnFlagUntilTimeout+0x32>
 800595e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005960:	2b00      	cmp	r3, #0
 8005962:	d140      	bne.n	80059e6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800596a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800596c:	e853 3f00 	ldrex	r3, [r3]
 8005970:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005972:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005974:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005978:	667b      	str	r3, [r7, #100]	; 0x64
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	461a      	mov	r2, r3
 8005980:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005982:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005984:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005986:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005988:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800598a:	e841 2300 	strex	r3, r2, [r1]
 800598e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005990:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005992:	2b00      	cmp	r3, #0
 8005994:	d1e6      	bne.n	8005964 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	3308      	adds	r3, #8
 800599c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800599e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059a0:	e853 3f00 	ldrex	r3, [r3]
 80059a4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80059a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059a8:	f023 0301 	bic.w	r3, r3, #1
 80059ac:	663b      	str	r3, [r7, #96]	; 0x60
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	3308      	adds	r3, #8
 80059b4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80059b6:	64ba      	str	r2, [r7, #72]	; 0x48
 80059b8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059ba:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80059bc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80059be:	e841 2300 	strex	r3, r2, [r1]
 80059c2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80059c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d1e5      	bne.n	8005996 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	2220      	movs	r2, #32
 80059ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	2220      	movs	r2, #32
 80059d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	2200      	movs	r2, #0
 80059de:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80059e2:	2303      	movs	r3, #3
 80059e4:	e069      	b.n	8005aba <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f003 0304 	and.w	r3, r3, #4
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d051      	beq.n	8005a98 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	69db      	ldr	r3, [r3, #28]
 80059fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80059fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a02:	d149      	bne.n	8005a98 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005a0c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a16:	e853 3f00 	ldrex	r3, [r3]
 8005a1a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a1e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005a22:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	461a      	mov	r2, r3
 8005a2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a2c:	637b      	str	r3, [r7, #52]	; 0x34
 8005a2e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a30:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005a32:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005a34:	e841 2300 	strex	r3, r2, [r1]
 8005a38:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005a3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d1e6      	bne.n	8005a0e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	3308      	adds	r3, #8
 8005a46:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a48:	697b      	ldr	r3, [r7, #20]
 8005a4a:	e853 3f00 	ldrex	r3, [r3]
 8005a4e:	613b      	str	r3, [r7, #16]
   return(result);
 8005a50:	693b      	ldr	r3, [r7, #16]
 8005a52:	f023 0301 	bic.w	r3, r3, #1
 8005a56:	66bb      	str	r3, [r7, #104]	; 0x68
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	3308      	adds	r3, #8
 8005a5e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005a60:	623a      	str	r2, [r7, #32]
 8005a62:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a64:	69f9      	ldr	r1, [r7, #28]
 8005a66:	6a3a      	ldr	r2, [r7, #32]
 8005a68:	e841 2300 	strex	r3, r2, [r1]
 8005a6c:	61bb      	str	r3, [r7, #24]
   return(result);
 8005a6e:	69bb      	ldr	r3, [r7, #24]
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d1e5      	bne.n	8005a40 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	2220      	movs	r2, #32
 8005a78:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	2220      	movs	r2, #32
 8005a80:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	2220      	movs	r2, #32
 8005a88:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	2200      	movs	r2, #0
 8005a90:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8005a94:	2303      	movs	r3, #3
 8005a96:	e010      	b.n	8005aba <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	69da      	ldr	r2, [r3, #28]
 8005a9e:	68bb      	ldr	r3, [r7, #8]
 8005aa0:	4013      	ands	r3, r2
 8005aa2:	68ba      	ldr	r2, [r7, #8]
 8005aa4:	429a      	cmp	r2, r3
 8005aa6:	bf0c      	ite	eq
 8005aa8:	2301      	moveq	r3, #1
 8005aaa:	2300      	movne	r3, #0
 8005aac:	b2db      	uxtb	r3, r3
 8005aae:	461a      	mov	r2, r3
 8005ab0:	79fb      	ldrb	r3, [r7, #7]
 8005ab2:	429a      	cmp	r2, r3
 8005ab4:	f43f af46 	beq.w	8005944 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005ab8:	2300      	movs	r3, #0
}
 8005aba:	4618      	mov	r0, r3
 8005abc:	3770      	adds	r7, #112	; 0x70
 8005abe:	46bd      	mov	sp, r7
 8005ac0:	bd80      	pop	{r7, pc}

08005ac2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005ac2:	b480      	push	{r7}
 8005ac4:	b085      	sub	sp, #20
 8005ac6:	af00      	add	r7, sp, #0
 8005ac8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005ad0:	2b01      	cmp	r3, #1
 8005ad2:	d101      	bne.n	8005ad8 <HAL_UARTEx_DisableFifoMode+0x16>
 8005ad4:	2302      	movs	r3, #2
 8005ad6:	e027      	b.n	8005b28 <HAL_UARTEx_DisableFifoMode+0x66>
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2201      	movs	r2, #1
 8005adc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2224      	movs	r2, #36	; 0x24
 8005ae4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	681a      	ldr	r2, [r3, #0]
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f022 0201 	bic.w	r2, r2, #1
 8005afe:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005b06:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	68fa      	ldr	r2, [r7, #12]
 8005b14:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	2220      	movs	r2, #32
 8005b1a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	2200      	movs	r2, #0
 8005b22:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005b26:	2300      	movs	r3, #0
}
 8005b28:	4618      	mov	r0, r3
 8005b2a:	3714      	adds	r7, #20
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b32:	4770      	bx	lr

08005b34 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005b34:	b580      	push	{r7, lr}
 8005b36:	b084      	sub	sp, #16
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	6078      	str	r0, [r7, #4]
 8005b3c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005b44:	2b01      	cmp	r3, #1
 8005b46:	d101      	bne.n	8005b4c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005b48:	2302      	movs	r3, #2
 8005b4a:	e02d      	b.n	8005ba8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2201      	movs	r2, #1
 8005b50:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2224      	movs	r2, #36	; 0x24
 8005b58:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	681a      	ldr	r2, [r3, #0]
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f022 0201 	bic.w	r2, r2, #1
 8005b72:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	689b      	ldr	r3, [r3, #8]
 8005b7a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	683a      	ldr	r2, [r7, #0]
 8005b84:	430a      	orrs	r2, r1
 8005b86:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005b88:	6878      	ldr	r0, [r7, #4]
 8005b8a:	f000 f84f 	bl	8005c2c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	68fa      	ldr	r2, [r7, #12]
 8005b94:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	2220      	movs	r2, #32
 8005b9a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005ba6:	2300      	movs	r3, #0
}
 8005ba8:	4618      	mov	r0, r3
 8005baa:	3710      	adds	r7, #16
 8005bac:	46bd      	mov	sp, r7
 8005bae:	bd80      	pop	{r7, pc}

08005bb0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005bb0:	b580      	push	{r7, lr}
 8005bb2:	b084      	sub	sp, #16
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	6078      	str	r0, [r7, #4]
 8005bb8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005bc0:	2b01      	cmp	r3, #1
 8005bc2:	d101      	bne.n	8005bc8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005bc4:	2302      	movs	r3, #2
 8005bc6:	e02d      	b.n	8005c24 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2201      	movs	r2, #1
 8005bcc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2224      	movs	r2, #36	; 0x24
 8005bd4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	681a      	ldr	r2, [r3, #0]
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	f022 0201 	bic.w	r2, r2, #1
 8005bee:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	689b      	ldr	r3, [r3, #8]
 8005bf6:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	683a      	ldr	r2, [r7, #0]
 8005c00:	430a      	orrs	r2, r1
 8005c02:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005c04:	6878      	ldr	r0, [r7, #4]
 8005c06:	f000 f811 	bl	8005c2c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	68fa      	ldr	r2, [r7, #12]
 8005c10:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	2220      	movs	r2, #32
 8005c16:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005c22:	2300      	movs	r3, #0
}
 8005c24:	4618      	mov	r0, r3
 8005c26:	3710      	adds	r7, #16
 8005c28:	46bd      	mov	sp, r7
 8005c2a:	bd80      	pop	{r7, pc}

08005c2c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005c2c:	b480      	push	{r7}
 8005c2e:	b085      	sub	sp, #20
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d108      	bne.n	8005c4e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2201      	movs	r2, #1
 8005c40:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2201      	movs	r2, #1
 8005c48:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005c4c:	e031      	b.n	8005cb2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005c4e:	2310      	movs	r3, #16
 8005c50:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005c52:	2310      	movs	r3, #16
 8005c54:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	689b      	ldr	r3, [r3, #8]
 8005c5c:	0e5b      	lsrs	r3, r3, #25
 8005c5e:	b2db      	uxtb	r3, r3
 8005c60:	f003 0307 	and.w	r3, r3, #7
 8005c64:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	689b      	ldr	r3, [r3, #8]
 8005c6c:	0f5b      	lsrs	r3, r3, #29
 8005c6e:	b2db      	uxtb	r3, r3
 8005c70:	f003 0307 	and.w	r3, r3, #7
 8005c74:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005c76:	7bbb      	ldrb	r3, [r7, #14]
 8005c78:	7b3a      	ldrb	r2, [r7, #12]
 8005c7a:	4911      	ldr	r1, [pc, #68]	; (8005cc0 <UARTEx_SetNbDataToProcess+0x94>)
 8005c7c:	5c8a      	ldrb	r2, [r1, r2]
 8005c7e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005c82:	7b3a      	ldrb	r2, [r7, #12]
 8005c84:	490f      	ldr	r1, [pc, #60]	; (8005cc4 <UARTEx_SetNbDataToProcess+0x98>)
 8005c86:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005c88:	fb93 f3f2 	sdiv	r3, r3, r2
 8005c8c:	b29a      	uxth	r2, r3
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005c94:	7bfb      	ldrb	r3, [r7, #15]
 8005c96:	7b7a      	ldrb	r2, [r7, #13]
 8005c98:	4909      	ldr	r1, [pc, #36]	; (8005cc0 <UARTEx_SetNbDataToProcess+0x94>)
 8005c9a:	5c8a      	ldrb	r2, [r1, r2]
 8005c9c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005ca0:	7b7a      	ldrb	r2, [r7, #13]
 8005ca2:	4908      	ldr	r1, [pc, #32]	; (8005cc4 <UARTEx_SetNbDataToProcess+0x98>)
 8005ca4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005ca6:	fb93 f3f2 	sdiv	r3, r3, r2
 8005caa:	b29a      	uxth	r2, r3
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8005cb2:	bf00      	nop
 8005cb4:	3714      	adds	r7, #20
 8005cb6:	46bd      	mov	sp, r7
 8005cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cbc:	4770      	bx	lr
 8005cbe:	bf00      	nop
 8005cc0:	08008ad0 	.word	0x08008ad0
 8005cc4:	08008ad8 	.word	0x08008ad8

08005cc8 <__NVIC_SetPriority>:
{
 8005cc8:	b480      	push	{r7}
 8005cca:	b083      	sub	sp, #12
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	4603      	mov	r3, r0
 8005cd0:	6039      	str	r1, [r7, #0]
 8005cd2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005cd4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	db0a      	blt.n	8005cf2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	b2da      	uxtb	r2, r3
 8005ce0:	490c      	ldr	r1, [pc, #48]	; (8005d14 <__NVIC_SetPriority+0x4c>)
 8005ce2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005ce6:	0112      	lsls	r2, r2, #4
 8005ce8:	b2d2      	uxtb	r2, r2
 8005cea:	440b      	add	r3, r1
 8005cec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005cf0:	e00a      	b.n	8005d08 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005cf2:	683b      	ldr	r3, [r7, #0]
 8005cf4:	b2da      	uxtb	r2, r3
 8005cf6:	4908      	ldr	r1, [pc, #32]	; (8005d18 <__NVIC_SetPriority+0x50>)
 8005cf8:	88fb      	ldrh	r3, [r7, #6]
 8005cfa:	f003 030f 	and.w	r3, r3, #15
 8005cfe:	3b04      	subs	r3, #4
 8005d00:	0112      	lsls	r2, r2, #4
 8005d02:	b2d2      	uxtb	r2, r2
 8005d04:	440b      	add	r3, r1
 8005d06:	761a      	strb	r2, [r3, #24]
}
 8005d08:	bf00      	nop
 8005d0a:	370c      	adds	r7, #12
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d12:	4770      	bx	lr
 8005d14:	e000e100 	.word	0xe000e100
 8005d18:	e000ed00 	.word	0xe000ed00

08005d1c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8005d1c:	b580      	push	{r7, lr}
 8005d1e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8005d20:	4b05      	ldr	r3, [pc, #20]	; (8005d38 <SysTick_Handler+0x1c>)
 8005d22:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8005d24:	f001 fd28 	bl	8007778 <xTaskGetSchedulerState>
 8005d28:	4603      	mov	r3, r0
 8005d2a:	2b01      	cmp	r3, #1
 8005d2c:	d001      	beq.n	8005d32 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8005d2e:	f002 fb13 	bl	8008358 <xPortSysTickHandler>
  }
}
 8005d32:	bf00      	nop
 8005d34:	bd80      	pop	{r7, pc}
 8005d36:	bf00      	nop
 8005d38:	e000e010 	.word	0xe000e010

08005d3c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005d3c:	b580      	push	{r7, lr}
 8005d3e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8005d40:	2100      	movs	r1, #0
 8005d42:	f06f 0004 	mvn.w	r0, #4
 8005d46:	f7ff ffbf 	bl	8005cc8 <__NVIC_SetPriority>
#endif
}
 8005d4a:	bf00      	nop
 8005d4c:	bd80      	pop	{r7, pc}
	...

08005d50 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005d50:	b480      	push	{r7}
 8005d52:	b083      	sub	sp, #12
 8005d54:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005d56:	f3ef 8305 	mrs	r3, IPSR
 8005d5a:	603b      	str	r3, [r7, #0]
  return(result);
 8005d5c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d003      	beq.n	8005d6a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8005d62:	f06f 0305 	mvn.w	r3, #5
 8005d66:	607b      	str	r3, [r7, #4]
 8005d68:	e00c      	b.n	8005d84 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005d6a:	4b0a      	ldr	r3, [pc, #40]	; (8005d94 <osKernelInitialize+0x44>)
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d105      	bne.n	8005d7e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8005d72:	4b08      	ldr	r3, [pc, #32]	; (8005d94 <osKernelInitialize+0x44>)
 8005d74:	2201      	movs	r2, #1
 8005d76:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005d78:	2300      	movs	r3, #0
 8005d7a:	607b      	str	r3, [r7, #4]
 8005d7c:	e002      	b.n	8005d84 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8005d7e:	f04f 33ff 	mov.w	r3, #4294967295
 8005d82:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005d84:	687b      	ldr	r3, [r7, #4]
}
 8005d86:	4618      	mov	r0, r3
 8005d88:	370c      	adds	r7, #12
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d90:	4770      	bx	lr
 8005d92:	bf00      	nop
 8005d94:	24000328 	.word	0x24000328

08005d98 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	b082      	sub	sp, #8
 8005d9c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005d9e:	f3ef 8305 	mrs	r3, IPSR
 8005da2:	603b      	str	r3, [r7, #0]
  return(result);
 8005da4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d003      	beq.n	8005db2 <osKernelStart+0x1a>
    stat = osErrorISR;
 8005daa:	f06f 0305 	mvn.w	r3, #5
 8005dae:	607b      	str	r3, [r7, #4]
 8005db0:	e010      	b.n	8005dd4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005db2:	4b0b      	ldr	r3, [pc, #44]	; (8005de0 <osKernelStart+0x48>)
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	2b01      	cmp	r3, #1
 8005db8:	d109      	bne.n	8005dce <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8005dba:	f7ff ffbf 	bl	8005d3c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005dbe:	4b08      	ldr	r3, [pc, #32]	; (8005de0 <osKernelStart+0x48>)
 8005dc0:	2202      	movs	r2, #2
 8005dc2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005dc4:	f001 f87c 	bl	8006ec0 <vTaskStartScheduler>
      stat = osOK;
 8005dc8:	2300      	movs	r3, #0
 8005dca:	607b      	str	r3, [r7, #4]
 8005dcc:	e002      	b.n	8005dd4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8005dce:	f04f 33ff 	mov.w	r3, #4294967295
 8005dd2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005dd4:	687b      	ldr	r3, [r7, #4]
}
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	3708      	adds	r7, #8
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	bd80      	pop	{r7, pc}
 8005dde:	bf00      	nop
 8005de0:	24000328 	.word	0x24000328

08005de4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005de4:	b580      	push	{r7, lr}
 8005de6:	b08e      	sub	sp, #56	; 0x38
 8005de8:	af04      	add	r7, sp, #16
 8005dea:	60f8      	str	r0, [r7, #12]
 8005dec:	60b9      	str	r1, [r7, #8]
 8005dee:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005df0:	2300      	movs	r3, #0
 8005df2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005df4:	f3ef 8305 	mrs	r3, IPSR
 8005df8:	617b      	str	r3, [r7, #20]
  return(result);
 8005dfa:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d17e      	bne.n	8005efe <osThreadNew+0x11a>
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d07b      	beq.n	8005efe <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8005e06:	2380      	movs	r3, #128	; 0x80
 8005e08:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8005e0a:	2318      	movs	r3, #24
 8005e0c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8005e0e:	2300      	movs	r3, #0
 8005e10:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8005e12:	f04f 33ff 	mov.w	r3, #4294967295
 8005e16:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d045      	beq.n	8005eaa <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d002      	beq.n	8005e2c <osThreadNew+0x48>
        name = attr->name;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	699b      	ldr	r3, [r3, #24]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d002      	beq.n	8005e3a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	699b      	ldr	r3, [r3, #24]
 8005e38:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005e3a:	69fb      	ldr	r3, [r7, #28]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d008      	beq.n	8005e52 <osThreadNew+0x6e>
 8005e40:	69fb      	ldr	r3, [r7, #28]
 8005e42:	2b38      	cmp	r3, #56	; 0x38
 8005e44:	d805      	bhi.n	8005e52 <osThreadNew+0x6e>
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	685b      	ldr	r3, [r3, #4]
 8005e4a:	f003 0301 	and.w	r3, r3, #1
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d001      	beq.n	8005e56 <osThreadNew+0x72>
        return (NULL);
 8005e52:	2300      	movs	r3, #0
 8005e54:	e054      	b.n	8005f00 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	695b      	ldr	r3, [r3, #20]
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d003      	beq.n	8005e66 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	695b      	ldr	r3, [r3, #20]
 8005e62:	089b      	lsrs	r3, r3, #2
 8005e64:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	689b      	ldr	r3, [r3, #8]
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d00e      	beq.n	8005e8c <osThreadNew+0xa8>
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	68db      	ldr	r3, [r3, #12]
 8005e72:	2bbb      	cmp	r3, #187	; 0xbb
 8005e74:	d90a      	bls.n	8005e8c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d006      	beq.n	8005e8c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	695b      	ldr	r3, [r3, #20]
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d002      	beq.n	8005e8c <osThreadNew+0xa8>
        mem = 1;
 8005e86:	2301      	movs	r3, #1
 8005e88:	61bb      	str	r3, [r7, #24]
 8005e8a:	e010      	b.n	8005eae <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	689b      	ldr	r3, [r3, #8]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d10c      	bne.n	8005eae <osThreadNew+0xca>
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	68db      	ldr	r3, [r3, #12]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d108      	bne.n	8005eae <osThreadNew+0xca>
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	691b      	ldr	r3, [r3, #16]
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d104      	bne.n	8005eae <osThreadNew+0xca>
          mem = 0;
 8005ea4:	2300      	movs	r3, #0
 8005ea6:	61bb      	str	r3, [r7, #24]
 8005ea8:	e001      	b.n	8005eae <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8005eaa:	2300      	movs	r3, #0
 8005eac:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005eae:	69bb      	ldr	r3, [r7, #24]
 8005eb0:	2b01      	cmp	r3, #1
 8005eb2:	d110      	bne.n	8005ed6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8005eb8:	687a      	ldr	r2, [r7, #4]
 8005eba:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005ebc:	9202      	str	r2, [sp, #8]
 8005ebe:	9301      	str	r3, [sp, #4]
 8005ec0:	69fb      	ldr	r3, [r7, #28]
 8005ec2:	9300      	str	r3, [sp, #0]
 8005ec4:	68bb      	ldr	r3, [r7, #8]
 8005ec6:	6a3a      	ldr	r2, [r7, #32]
 8005ec8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005eca:	68f8      	ldr	r0, [r7, #12]
 8005ecc:	f000 fe0c 	bl	8006ae8 <xTaskCreateStatic>
 8005ed0:	4603      	mov	r3, r0
 8005ed2:	613b      	str	r3, [r7, #16]
 8005ed4:	e013      	b.n	8005efe <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8005ed6:	69bb      	ldr	r3, [r7, #24]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d110      	bne.n	8005efe <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005edc:	6a3b      	ldr	r3, [r7, #32]
 8005ede:	b29a      	uxth	r2, r3
 8005ee0:	f107 0310 	add.w	r3, r7, #16
 8005ee4:	9301      	str	r3, [sp, #4]
 8005ee6:	69fb      	ldr	r3, [r7, #28]
 8005ee8:	9300      	str	r3, [sp, #0]
 8005eea:	68bb      	ldr	r3, [r7, #8]
 8005eec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005eee:	68f8      	ldr	r0, [r7, #12]
 8005ef0:	f000 fe57 	bl	8006ba2 <xTaskCreate>
 8005ef4:	4603      	mov	r3, r0
 8005ef6:	2b01      	cmp	r3, #1
 8005ef8:	d001      	beq.n	8005efe <osThreadNew+0x11a>
            hTask = NULL;
 8005efa:	2300      	movs	r3, #0
 8005efc:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005efe:	693b      	ldr	r3, [r7, #16]
}
 8005f00:	4618      	mov	r0, r3
 8005f02:	3728      	adds	r7, #40	; 0x28
 8005f04:	46bd      	mov	sp, r7
 8005f06:	bd80      	pop	{r7, pc}

08005f08 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8005f08:	b580      	push	{r7, lr}
 8005f0a:	b084      	sub	sp, #16
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005f10:	f3ef 8305 	mrs	r3, IPSR
 8005f14:	60bb      	str	r3, [r7, #8]
  return(result);
 8005f16:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d003      	beq.n	8005f24 <osDelay+0x1c>
    stat = osErrorISR;
 8005f1c:	f06f 0305 	mvn.w	r3, #5
 8005f20:	60fb      	str	r3, [r7, #12]
 8005f22:	e007      	b.n	8005f34 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8005f24:	2300      	movs	r3, #0
 8005f26:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d002      	beq.n	8005f34 <osDelay+0x2c>
      vTaskDelay(ticks);
 8005f2e:	6878      	ldr	r0, [r7, #4]
 8005f30:	f000 ff92 	bl	8006e58 <vTaskDelay>
    }
  }

  return (stat);
 8005f34:	68fb      	ldr	r3, [r7, #12]
}
 8005f36:	4618      	mov	r0, r3
 8005f38:	3710      	adds	r7, #16
 8005f3a:	46bd      	mov	sp, r7
 8005f3c:	bd80      	pop	{r7, pc}
	...

08005f40 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005f40:	b480      	push	{r7}
 8005f42:	b085      	sub	sp, #20
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	60f8      	str	r0, [r7, #12]
 8005f48:	60b9      	str	r1, [r7, #8]
 8005f4a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	4a07      	ldr	r2, [pc, #28]	; (8005f6c <vApplicationGetIdleTaskMemory+0x2c>)
 8005f50:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005f52:	68bb      	ldr	r3, [r7, #8]
 8005f54:	4a06      	ldr	r2, [pc, #24]	; (8005f70 <vApplicationGetIdleTaskMemory+0x30>)
 8005f56:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2280      	movs	r2, #128	; 0x80
 8005f5c:	601a      	str	r2, [r3, #0]
}
 8005f5e:	bf00      	nop
 8005f60:	3714      	adds	r7, #20
 8005f62:	46bd      	mov	sp, r7
 8005f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f68:	4770      	bx	lr
 8005f6a:	bf00      	nop
 8005f6c:	2400032c 	.word	0x2400032c
 8005f70:	240003e8 	.word	0x240003e8

08005f74 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005f74:	b480      	push	{r7}
 8005f76:	b085      	sub	sp, #20
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	60f8      	str	r0, [r7, #12]
 8005f7c:	60b9      	str	r1, [r7, #8]
 8005f7e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	4a07      	ldr	r2, [pc, #28]	; (8005fa0 <vApplicationGetTimerTaskMemory+0x2c>)
 8005f84:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005f86:	68bb      	ldr	r3, [r7, #8]
 8005f88:	4a06      	ldr	r2, [pc, #24]	; (8005fa4 <vApplicationGetTimerTaskMemory+0x30>)
 8005f8a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005f92:	601a      	str	r2, [r3, #0]
}
 8005f94:	bf00      	nop
 8005f96:	3714      	adds	r7, #20
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9e:	4770      	bx	lr
 8005fa0:	240005e8 	.word	0x240005e8
 8005fa4:	240006a4 	.word	0x240006a4

08005fa8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005fa8:	b480      	push	{r7}
 8005faa:	b083      	sub	sp, #12
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	f103 0208 	add.w	r2, r3, #8
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	f04f 32ff 	mov.w	r2, #4294967295
 8005fc0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	f103 0208 	add.w	r2, r3, #8
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	f103 0208 	add.w	r2, r3, #8
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	2200      	movs	r2, #0
 8005fda:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005fdc:	bf00      	nop
 8005fde:	370c      	adds	r7, #12
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe6:	4770      	bx	lr

08005fe8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005fe8:	b480      	push	{r7}
 8005fea:	b083      	sub	sp, #12
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005ff6:	bf00      	nop
 8005ff8:	370c      	adds	r7, #12
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006000:	4770      	bx	lr

08006002 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006002:	b480      	push	{r7}
 8006004:	b085      	sub	sp, #20
 8006006:	af00      	add	r7, sp, #0
 8006008:	6078      	str	r0, [r7, #4]
 800600a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	685b      	ldr	r3, [r3, #4]
 8006010:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006012:	683b      	ldr	r3, [r7, #0]
 8006014:	68fa      	ldr	r2, [r7, #12]
 8006016:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	689a      	ldr	r2, [r3, #8]
 800601c:	683b      	ldr	r3, [r7, #0]
 800601e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	689b      	ldr	r3, [r3, #8]
 8006024:	683a      	ldr	r2, [r7, #0]
 8006026:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	683a      	ldr	r2, [r7, #0]
 800602c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800602e:	683b      	ldr	r3, [r7, #0]
 8006030:	687a      	ldr	r2, [r7, #4]
 8006032:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	1c5a      	adds	r2, r3, #1
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	601a      	str	r2, [r3, #0]
}
 800603e:	bf00      	nop
 8006040:	3714      	adds	r7, #20
 8006042:	46bd      	mov	sp, r7
 8006044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006048:	4770      	bx	lr

0800604a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800604a:	b480      	push	{r7}
 800604c:	b085      	sub	sp, #20
 800604e:	af00      	add	r7, sp, #0
 8006050:	6078      	str	r0, [r7, #4]
 8006052:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006054:	683b      	ldr	r3, [r7, #0]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800605a:	68bb      	ldr	r3, [r7, #8]
 800605c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006060:	d103      	bne.n	800606a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	691b      	ldr	r3, [r3, #16]
 8006066:	60fb      	str	r3, [r7, #12]
 8006068:	e00c      	b.n	8006084 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	3308      	adds	r3, #8
 800606e:	60fb      	str	r3, [r7, #12]
 8006070:	e002      	b.n	8006078 <vListInsert+0x2e>
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	685b      	ldr	r3, [r3, #4]
 8006076:	60fb      	str	r3, [r7, #12]
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	685b      	ldr	r3, [r3, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	68ba      	ldr	r2, [r7, #8]
 8006080:	429a      	cmp	r2, r3
 8006082:	d2f6      	bcs.n	8006072 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	685a      	ldr	r2, [r3, #4]
 8006088:	683b      	ldr	r3, [r7, #0]
 800608a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800608c:	683b      	ldr	r3, [r7, #0]
 800608e:	685b      	ldr	r3, [r3, #4]
 8006090:	683a      	ldr	r2, [r7, #0]
 8006092:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006094:	683b      	ldr	r3, [r7, #0]
 8006096:	68fa      	ldr	r2, [r7, #12]
 8006098:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	683a      	ldr	r2, [r7, #0]
 800609e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80060a0:	683b      	ldr	r3, [r7, #0]
 80060a2:	687a      	ldr	r2, [r7, #4]
 80060a4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	1c5a      	adds	r2, r3, #1
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	601a      	str	r2, [r3, #0]
}
 80060b0:	bf00      	nop
 80060b2:	3714      	adds	r7, #20
 80060b4:	46bd      	mov	sp, r7
 80060b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ba:	4770      	bx	lr

080060bc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80060bc:	b480      	push	{r7}
 80060be:	b085      	sub	sp, #20
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	691b      	ldr	r3, [r3, #16]
 80060c8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	685b      	ldr	r3, [r3, #4]
 80060ce:	687a      	ldr	r2, [r7, #4]
 80060d0:	6892      	ldr	r2, [r2, #8]
 80060d2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	689b      	ldr	r3, [r3, #8]
 80060d8:	687a      	ldr	r2, [r7, #4]
 80060da:	6852      	ldr	r2, [r2, #4]
 80060dc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	685b      	ldr	r3, [r3, #4]
 80060e2:	687a      	ldr	r2, [r7, #4]
 80060e4:	429a      	cmp	r2, r3
 80060e6:	d103      	bne.n	80060f0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	689a      	ldr	r2, [r3, #8]
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	2200      	movs	r2, #0
 80060f4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	1e5a      	subs	r2, r3, #1
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	681b      	ldr	r3, [r3, #0]
}
 8006104:	4618      	mov	r0, r3
 8006106:	3714      	adds	r7, #20
 8006108:	46bd      	mov	sp, r7
 800610a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610e:	4770      	bx	lr

08006110 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006110:	b580      	push	{r7, lr}
 8006112:	b084      	sub	sp, #16
 8006114:	af00      	add	r7, sp, #0
 8006116:	6078      	str	r0, [r7, #4]
 8006118:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	2b00      	cmp	r3, #0
 8006122:	d10a      	bne.n	800613a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006124:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006128:	f383 8811 	msr	BASEPRI, r3
 800612c:	f3bf 8f6f 	isb	sy
 8006130:	f3bf 8f4f 	dsb	sy
 8006134:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006136:	bf00      	nop
 8006138:	e7fe      	b.n	8006138 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800613a:	f002 f87b 	bl	8008234 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	681a      	ldr	r2, [r3, #0]
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006146:	68f9      	ldr	r1, [r7, #12]
 8006148:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800614a:	fb01 f303 	mul.w	r3, r1, r3
 800614e:	441a      	add	r2, r3
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	2200      	movs	r2, #0
 8006158:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	681a      	ldr	r2, [r3, #0]
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	681a      	ldr	r2, [r3, #0]
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800616a:	3b01      	subs	r3, #1
 800616c:	68f9      	ldr	r1, [r7, #12]
 800616e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006170:	fb01 f303 	mul.w	r3, r1, r3
 8006174:	441a      	add	r2, r3
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	22ff      	movs	r2, #255	; 0xff
 800617e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	22ff      	movs	r2, #255	; 0xff
 8006186:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800618a:	683b      	ldr	r3, [r7, #0]
 800618c:	2b00      	cmp	r3, #0
 800618e:	d114      	bne.n	80061ba <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	691b      	ldr	r3, [r3, #16]
 8006194:	2b00      	cmp	r3, #0
 8006196:	d01a      	beq.n	80061ce <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	3310      	adds	r3, #16
 800619c:	4618      	mov	r0, r3
 800619e:	f001 f929 	bl	80073f4 <xTaskRemoveFromEventList>
 80061a2:	4603      	mov	r3, r0
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d012      	beq.n	80061ce <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80061a8:	4b0c      	ldr	r3, [pc, #48]	; (80061dc <xQueueGenericReset+0xcc>)
 80061aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80061ae:	601a      	str	r2, [r3, #0]
 80061b0:	f3bf 8f4f 	dsb	sy
 80061b4:	f3bf 8f6f 	isb	sy
 80061b8:	e009      	b.n	80061ce <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	3310      	adds	r3, #16
 80061be:	4618      	mov	r0, r3
 80061c0:	f7ff fef2 	bl	8005fa8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	3324      	adds	r3, #36	; 0x24
 80061c8:	4618      	mov	r0, r3
 80061ca:	f7ff feed 	bl	8005fa8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80061ce:	f002 f861 	bl	8008294 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80061d2:	2301      	movs	r3, #1
}
 80061d4:	4618      	mov	r0, r3
 80061d6:	3710      	adds	r7, #16
 80061d8:	46bd      	mov	sp, r7
 80061da:	bd80      	pop	{r7, pc}
 80061dc:	e000ed04 	.word	0xe000ed04

080061e0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80061e0:	b580      	push	{r7, lr}
 80061e2:	b08e      	sub	sp, #56	; 0x38
 80061e4:	af02      	add	r7, sp, #8
 80061e6:	60f8      	str	r0, [r7, #12]
 80061e8:	60b9      	str	r1, [r7, #8]
 80061ea:	607a      	str	r2, [r7, #4]
 80061ec:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d10a      	bne.n	800620a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80061f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061f8:	f383 8811 	msr	BASEPRI, r3
 80061fc:	f3bf 8f6f 	isb	sy
 8006200:	f3bf 8f4f 	dsb	sy
 8006204:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006206:	bf00      	nop
 8006208:	e7fe      	b.n	8006208 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800620a:	683b      	ldr	r3, [r7, #0]
 800620c:	2b00      	cmp	r3, #0
 800620e:	d10a      	bne.n	8006226 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8006210:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006214:	f383 8811 	msr	BASEPRI, r3
 8006218:	f3bf 8f6f 	isb	sy
 800621c:	f3bf 8f4f 	dsb	sy
 8006220:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006222:	bf00      	nop
 8006224:	e7fe      	b.n	8006224 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	2b00      	cmp	r3, #0
 800622a:	d002      	beq.n	8006232 <xQueueGenericCreateStatic+0x52>
 800622c:	68bb      	ldr	r3, [r7, #8]
 800622e:	2b00      	cmp	r3, #0
 8006230:	d001      	beq.n	8006236 <xQueueGenericCreateStatic+0x56>
 8006232:	2301      	movs	r3, #1
 8006234:	e000      	b.n	8006238 <xQueueGenericCreateStatic+0x58>
 8006236:	2300      	movs	r3, #0
 8006238:	2b00      	cmp	r3, #0
 800623a:	d10a      	bne.n	8006252 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800623c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006240:	f383 8811 	msr	BASEPRI, r3
 8006244:	f3bf 8f6f 	isb	sy
 8006248:	f3bf 8f4f 	dsb	sy
 800624c:	623b      	str	r3, [r7, #32]
}
 800624e:	bf00      	nop
 8006250:	e7fe      	b.n	8006250 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	2b00      	cmp	r3, #0
 8006256:	d102      	bne.n	800625e <xQueueGenericCreateStatic+0x7e>
 8006258:	68bb      	ldr	r3, [r7, #8]
 800625a:	2b00      	cmp	r3, #0
 800625c:	d101      	bne.n	8006262 <xQueueGenericCreateStatic+0x82>
 800625e:	2301      	movs	r3, #1
 8006260:	e000      	b.n	8006264 <xQueueGenericCreateStatic+0x84>
 8006262:	2300      	movs	r3, #0
 8006264:	2b00      	cmp	r3, #0
 8006266:	d10a      	bne.n	800627e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8006268:	f04f 0350 	mov.w	r3, #80	; 0x50
 800626c:	f383 8811 	msr	BASEPRI, r3
 8006270:	f3bf 8f6f 	isb	sy
 8006274:	f3bf 8f4f 	dsb	sy
 8006278:	61fb      	str	r3, [r7, #28]
}
 800627a:	bf00      	nop
 800627c:	e7fe      	b.n	800627c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800627e:	2350      	movs	r3, #80	; 0x50
 8006280:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006282:	697b      	ldr	r3, [r7, #20]
 8006284:	2b50      	cmp	r3, #80	; 0x50
 8006286:	d00a      	beq.n	800629e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8006288:	f04f 0350 	mov.w	r3, #80	; 0x50
 800628c:	f383 8811 	msr	BASEPRI, r3
 8006290:	f3bf 8f6f 	isb	sy
 8006294:	f3bf 8f4f 	dsb	sy
 8006298:	61bb      	str	r3, [r7, #24]
}
 800629a:	bf00      	nop
 800629c:	e7fe      	b.n	800629c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800629e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80062a0:	683b      	ldr	r3, [r7, #0]
 80062a2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80062a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d00d      	beq.n	80062c6 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80062aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062ac:	2201      	movs	r2, #1
 80062ae:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80062b2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80062b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062b8:	9300      	str	r3, [sp, #0]
 80062ba:	4613      	mov	r3, r2
 80062bc:	687a      	ldr	r2, [r7, #4]
 80062be:	68b9      	ldr	r1, [r7, #8]
 80062c0:	68f8      	ldr	r0, [r7, #12]
 80062c2:	f000 f805 	bl	80062d0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80062c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80062c8:	4618      	mov	r0, r3
 80062ca:	3730      	adds	r7, #48	; 0x30
 80062cc:	46bd      	mov	sp, r7
 80062ce:	bd80      	pop	{r7, pc}

080062d0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80062d0:	b580      	push	{r7, lr}
 80062d2:	b084      	sub	sp, #16
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	60f8      	str	r0, [r7, #12]
 80062d8:	60b9      	str	r1, [r7, #8]
 80062da:	607a      	str	r2, [r7, #4]
 80062dc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80062de:	68bb      	ldr	r3, [r7, #8]
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d103      	bne.n	80062ec <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80062e4:	69bb      	ldr	r3, [r7, #24]
 80062e6:	69ba      	ldr	r2, [r7, #24]
 80062e8:	601a      	str	r2, [r3, #0]
 80062ea:	e002      	b.n	80062f2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80062ec:	69bb      	ldr	r3, [r7, #24]
 80062ee:	687a      	ldr	r2, [r7, #4]
 80062f0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80062f2:	69bb      	ldr	r3, [r7, #24]
 80062f4:	68fa      	ldr	r2, [r7, #12]
 80062f6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80062f8:	69bb      	ldr	r3, [r7, #24]
 80062fa:	68ba      	ldr	r2, [r7, #8]
 80062fc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80062fe:	2101      	movs	r1, #1
 8006300:	69b8      	ldr	r0, [r7, #24]
 8006302:	f7ff ff05 	bl	8006110 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006306:	69bb      	ldr	r3, [r7, #24]
 8006308:	78fa      	ldrb	r2, [r7, #3]
 800630a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800630e:	bf00      	nop
 8006310:	3710      	adds	r7, #16
 8006312:	46bd      	mov	sp, r7
 8006314:	bd80      	pop	{r7, pc}
	...

08006318 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006318:	b580      	push	{r7, lr}
 800631a:	b08e      	sub	sp, #56	; 0x38
 800631c:	af00      	add	r7, sp, #0
 800631e:	60f8      	str	r0, [r7, #12]
 8006320:	60b9      	str	r1, [r7, #8]
 8006322:	607a      	str	r2, [r7, #4]
 8006324:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006326:	2300      	movs	r3, #0
 8006328:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800632e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006330:	2b00      	cmp	r3, #0
 8006332:	d10a      	bne.n	800634a <xQueueGenericSend+0x32>
	__asm volatile
 8006334:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006338:	f383 8811 	msr	BASEPRI, r3
 800633c:	f3bf 8f6f 	isb	sy
 8006340:	f3bf 8f4f 	dsb	sy
 8006344:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006346:	bf00      	nop
 8006348:	e7fe      	b.n	8006348 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800634a:	68bb      	ldr	r3, [r7, #8]
 800634c:	2b00      	cmp	r3, #0
 800634e:	d103      	bne.n	8006358 <xQueueGenericSend+0x40>
 8006350:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006352:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006354:	2b00      	cmp	r3, #0
 8006356:	d101      	bne.n	800635c <xQueueGenericSend+0x44>
 8006358:	2301      	movs	r3, #1
 800635a:	e000      	b.n	800635e <xQueueGenericSend+0x46>
 800635c:	2300      	movs	r3, #0
 800635e:	2b00      	cmp	r3, #0
 8006360:	d10a      	bne.n	8006378 <xQueueGenericSend+0x60>
	__asm volatile
 8006362:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006366:	f383 8811 	msr	BASEPRI, r3
 800636a:	f3bf 8f6f 	isb	sy
 800636e:	f3bf 8f4f 	dsb	sy
 8006372:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006374:	bf00      	nop
 8006376:	e7fe      	b.n	8006376 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006378:	683b      	ldr	r3, [r7, #0]
 800637a:	2b02      	cmp	r3, #2
 800637c:	d103      	bne.n	8006386 <xQueueGenericSend+0x6e>
 800637e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006380:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006382:	2b01      	cmp	r3, #1
 8006384:	d101      	bne.n	800638a <xQueueGenericSend+0x72>
 8006386:	2301      	movs	r3, #1
 8006388:	e000      	b.n	800638c <xQueueGenericSend+0x74>
 800638a:	2300      	movs	r3, #0
 800638c:	2b00      	cmp	r3, #0
 800638e:	d10a      	bne.n	80063a6 <xQueueGenericSend+0x8e>
	__asm volatile
 8006390:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006394:	f383 8811 	msr	BASEPRI, r3
 8006398:	f3bf 8f6f 	isb	sy
 800639c:	f3bf 8f4f 	dsb	sy
 80063a0:	623b      	str	r3, [r7, #32]
}
 80063a2:	bf00      	nop
 80063a4:	e7fe      	b.n	80063a4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80063a6:	f001 f9e7 	bl	8007778 <xTaskGetSchedulerState>
 80063aa:	4603      	mov	r3, r0
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d102      	bne.n	80063b6 <xQueueGenericSend+0x9e>
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d101      	bne.n	80063ba <xQueueGenericSend+0xa2>
 80063b6:	2301      	movs	r3, #1
 80063b8:	e000      	b.n	80063bc <xQueueGenericSend+0xa4>
 80063ba:	2300      	movs	r3, #0
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d10a      	bne.n	80063d6 <xQueueGenericSend+0xbe>
	__asm volatile
 80063c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063c4:	f383 8811 	msr	BASEPRI, r3
 80063c8:	f3bf 8f6f 	isb	sy
 80063cc:	f3bf 8f4f 	dsb	sy
 80063d0:	61fb      	str	r3, [r7, #28]
}
 80063d2:	bf00      	nop
 80063d4:	e7fe      	b.n	80063d4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80063d6:	f001 ff2d 	bl	8008234 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80063da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80063de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063e2:	429a      	cmp	r2, r3
 80063e4:	d302      	bcc.n	80063ec <xQueueGenericSend+0xd4>
 80063e6:	683b      	ldr	r3, [r7, #0]
 80063e8:	2b02      	cmp	r3, #2
 80063ea:	d129      	bne.n	8006440 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80063ec:	683a      	ldr	r2, [r7, #0]
 80063ee:	68b9      	ldr	r1, [r7, #8]
 80063f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80063f2:	f000 fa0b 	bl	800680c <prvCopyDataToQueue>
 80063f6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80063f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d010      	beq.n	8006422 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006400:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006402:	3324      	adds	r3, #36	; 0x24
 8006404:	4618      	mov	r0, r3
 8006406:	f000 fff5 	bl	80073f4 <xTaskRemoveFromEventList>
 800640a:	4603      	mov	r3, r0
 800640c:	2b00      	cmp	r3, #0
 800640e:	d013      	beq.n	8006438 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006410:	4b3f      	ldr	r3, [pc, #252]	; (8006510 <xQueueGenericSend+0x1f8>)
 8006412:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006416:	601a      	str	r2, [r3, #0]
 8006418:	f3bf 8f4f 	dsb	sy
 800641c:	f3bf 8f6f 	isb	sy
 8006420:	e00a      	b.n	8006438 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006422:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006424:	2b00      	cmp	r3, #0
 8006426:	d007      	beq.n	8006438 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006428:	4b39      	ldr	r3, [pc, #228]	; (8006510 <xQueueGenericSend+0x1f8>)
 800642a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800642e:	601a      	str	r2, [r3, #0]
 8006430:	f3bf 8f4f 	dsb	sy
 8006434:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006438:	f001 ff2c 	bl	8008294 <vPortExitCritical>
				return pdPASS;
 800643c:	2301      	movs	r3, #1
 800643e:	e063      	b.n	8006508 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	2b00      	cmp	r3, #0
 8006444:	d103      	bne.n	800644e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006446:	f001 ff25 	bl	8008294 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800644a:	2300      	movs	r3, #0
 800644c:	e05c      	b.n	8006508 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800644e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006450:	2b00      	cmp	r3, #0
 8006452:	d106      	bne.n	8006462 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006454:	f107 0314 	add.w	r3, r7, #20
 8006458:	4618      	mov	r0, r3
 800645a:	f001 f82f 	bl	80074bc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800645e:	2301      	movs	r3, #1
 8006460:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006462:	f001 ff17 	bl	8008294 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006466:	f000 fd9b 	bl	8006fa0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800646a:	f001 fee3 	bl	8008234 <vPortEnterCritical>
 800646e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006470:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006474:	b25b      	sxtb	r3, r3
 8006476:	f1b3 3fff 	cmp.w	r3, #4294967295
 800647a:	d103      	bne.n	8006484 <xQueueGenericSend+0x16c>
 800647c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800647e:	2200      	movs	r2, #0
 8006480:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006484:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006486:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800648a:	b25b      	sxtb	r3, r3
 800648c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006490:	d103      	bne.n	800649a <xQueueGenericSend+0x182>
 8006492:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006494:	2200      	movs	r2, #0
 8006496:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800649a:	f001 fefb 	bl	8008294 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800649e:	1d3a      	adds	r2, r7, #4
 80064a0:	f107 0314 	add.w	r3, r7, #20
 80064a4:	4611      	mov	r1, r2
 80064a6:	4618      	mov	r0, r3
 80064a8:	f001 f81e 	bl	80074e8 <xTaskCheckForTimeOut>
 80064ac:	4603      	mov	r3, r0
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d124      	bne.n	80064fc <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80064b2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80064b4:	f000 faa2 	bl	80069fc <prvIsQueueFull>
 80064b8:	4603      	mov	r3, r0
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d018      	beq.n	80064f0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80064be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064c0:	3310      	adds	r3, #16
 80064c2:	687a      	ldr	r2, [r7, #4]
 80064c4:	4611      	mov	r1, r2
 80064c6:	4618      	mov	r0, r3
 80064c8:	f000 ff44 	bl	8007354 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80064cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80064ce:	f000 fa2d 	bl	800692c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80064d2:	f000 fd73 	bl	8006fbc <xTaskResumeAll>
 80064d6:	4603      	mov	r3, r0
 80064d8:	2b00      	cmp	r3, #0
 80064da:	f47f af7c 	bne.w	80063d6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80064de:	4b0c      	ldr	r3, [pc, #48]	; (8006510 <xQueueGenericSend+0x1f8>)
 80064e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80064e4:	601a      	str	r2, [r3, #0]
 80064e6:	f3bf 8f4f 	dsb	sy
 80064ea:	f3bf 8f6f 	isb	sy
 80064ee:	e772      	b.n	80063d6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80064f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80064f2:	f000 fa1b 	bl	800692c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80064f6:	f000 fd61 	bl	8006fbc <xTaskResumeAll>
 80064fa:	e76c      	b.n	80063d6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80064fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80064fe:	f000 fa15 	bl	800692c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006502:	f000 fd5b 	bl	8006fbc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006506:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006508:	4618      	mov	r0, r3
 800650a:	3738      	adds	r7, #56	; 0x38
 800650c:	46bd      	mov	sp, r7
 800650e:	bd80      	pop	{r7, pc}
 8006510:	e000ed04 	.word	0xe000ed04

08006514 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006514:	b580      	push	{r7, lr}
 8006516:	b090      	sub	sp, #64	; 0x40
 8006518:	af00      	add	r7, sp, #0
 800651a:	60f8      	str	r0, [r7, #12]
 800651c:	60b9      	str	r1, [r7, #8]
 800651e:	607a      	str	r2, [r7, #4]
 8006520:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8006526:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006528:	2b00      	cmp	r3, #0
 800652a:	d10a      	bne.n	8006542 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800652c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006530:	f383 8811 	msr	BASEPRI, r3
 8006534:	f3bf 8f6f 	isb	sy
 8006538:	f3bf 8f4f 	dsb	sy
 800653c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800653e:	bf00      	nop
 8006540:	e7fe      	b.n	8006540 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006542:	68bb      	ldr	r3, [r7, #8]
 8006544:	2b00      	cmp	r3, #0
 8006546:	d103      	bne.n	8006550 <xQueueGenericSendFromISR+0x3c>
 8006548:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800654a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800654c:	2b00      	cmp	r3, #0
 800654e:	d101      	bne.n	8006554 <xQueueGenericSendFromISR+0x40>
 8006550:	2301      	movs	r3, #1
 8006552:	e000      	b.n	8006556 <xQueueGenericSendFromISR+0x42>
 8006554:	2300      	movs	r3, #0
 8006556:	2b00      	cmp	r3, #0
 8006558:	d10a      	bne.n	8006570 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800655a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800655e:	f383 8811 	msr	BASEPRI, r3
 8006562:	f3bf 8f6f 	isb	sy
 8006566:	f3bf 8f4f 	dsb	sy
 800656a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800656c:	bf00      	nop
 800656e:	e7fe      	b.n	800656e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006570:	683b      	ldr	r3, [r7, #0]
 8006572:	2b02      	cmp	r3, #2
 8006574:	d103      	bne.n	800657e <xQueueGenericSendFromISR+0x6a>
 8006576:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006578:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800657a:	2b01      	cmp	r3, #1
 800657c:	d101      	bne.n	8006582 <xQueueGenericSendFromISR+0x6e>
 800657e:	2301      	movs	r3, #1
 8006580:	e000      	b.n	8006584 <xQueueGenericSendFromISR+0x70>
 8006582:	2300      	movs	r3, #0
 8006584:	2b00      	cmp	r3, #0
 8006586:	d10a      	bne.n	800659e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8006588:	f04f 0350 	mov.w	r3, #80	; 0x50
 800658c:	f383 8811 	msr	BASEPRI, r3
 8006590:	f3bf 8f6f 	isb	sy
 8006594:	f3bf 8f4f 	dsb	sy
 8006598:	623b      	str	r3, [r7, #32]
}
 800659a:	bf00      	nop
 800659c:	e7fe      	b.n	800659c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800659e:	f001 ff2b 	bl	80083f8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80065a2:	f3ef 8211 	mrs	r2, BASEPRI
 80065a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065aa:	f383 8811 	msr	BASEPRI, r3
 80065ae:	f3bf 8f6f 	isb	sy
 80065b2:	f3bf 8f4f 	dsb	sy
 80065b6:	61fa      	str	r2, [r7, #28]
 80065b8:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80065ba:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80065bc:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80065be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80065c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065c6:	429a      	cmp	r2, r3
 80065c8:	d302      	bcc.n	80065d0 <xQueueGenericSendFromISR+0xbc>
 80065ca:	683b      	ldr	r3, [r7, #0]
 80065cc:	2b02      	cmp	r3, #2
 80065ce:	d12f      	bne.n	8006630 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80065d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065d2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80065d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80065da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065de:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80065e0:	683a      	ldr	r2, [r7, #0]
 80065e2:	68b9      	ldr	r1, [r7, #8]
 80065e4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80065e6:	f000 f911 	bl	800680c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80065ea:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80065ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065f2:	d112      	bne.n	800661a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80065f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d016      	beq.n	800662a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80065fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065fe:	3324      	adds	r3, #36	; 0x24
 8006600:	4618      	mov	r0, r3
 8006602:	f000 fef7 	bl	80073f4 <xTaskRemoveFromEventList>
 8006606:	4603      	mov	r3, r0
 8006608:	2b00      	cmp	r3, #0
 800660a:	d00e      	beq.n	800662a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	2b00      	cmp	r3, #0
 8006610:	d00b      	beq.n	800662a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	2201      	movs	r2, #1
 8006616:	601a      	str	r2, [r3, #0]
 8006618:	e007      	b.n	800662a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800661a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800661e:	3301      	adds	r3, #1
 8006620:	b2db      	uxtb	r3, r3
 8006622:	b25a      	sxtb	r2, r3
 8006624:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006626:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800662a:	2301      	movs	r3, #1
 800662c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800662e:	e001      	b.n	8006634 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006630:	2300      	movs	r3, #0
 8006632:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006634:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006636:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006638:	697b      	ldr	r3, [r7, #20]
 800663a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800663e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006640:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8006642:	4618      	mov	r0, r3
 8006644:	3740      	adds	r7, #64	; 0x40
 8006646:	46bd      	mov	sp, r7
 8006648:	bd80      	pop	{r7, pc}
	...

0800664c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800664c:	b580      	push	{r7, lr}
 800664e:	b08c      	sub	sp, #48	; 0x30
 8006650:	af00      	add	r7, sp, #0
 8006652:	60f8      	str	r0, [r7, #12]
 8006654:	60b9      	str	r1, [r7, #8]
 8006656:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006658:	2300      	movs	r3, #0
 800665a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006660:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006662:	2b00      	cmp	r3, #0
 8006664:	d10a      	bne.n	800667c <xQueueReceive+0x30>
	__asm volatile
 8006666:	f04f 0350 	mov.w	r3, #80	; 0x50
 800666a:	f383 8811 	msr	BASEPRI, r3
 800666e:	f3bf 8f6f 	isb	sy
 8006672:	f3bf 8f4f 	dsb	sy
 8006676:	623b      	str	r3, [r7, #32]
}
 8006678:	bf00      	nop
 800667a:	e7fe      	b.n	800667a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800667c:	68bb      	ldr	r3, [r7, #8]
 800667e:	2b00      	cmp	r3, #0
 8006680:	d103      	bne.n	800668a <xQueueReceive+0x3e>
 8006682:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006686:	2b00      	cmp	r3, #0
 8006688:	d101      	bne.n	800668e <xQueueReceive+0x42>
 800668a:	2301      	movs	r3, #1
 800668c:	e000      	b.n	8006690 <xQueueReceive+0x44>
 800668e:	2300      	movs	r3, #0
 8006690:	2b00      	cmp	r3, #0
 8006692:	d10a      	bne.n	80066aa <xQueueReceive+0x5e>
	__asm volatile
 8006694:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006698:	f383 8811 	msr	BASEPRI, r3
 800669c:	f3bf 8f6f 	isb	sy
 80066a0:	f3bf 8f4f 	dsb	sy
 80066a4:	61fb      	str	r3, [r7, #28]
}
 80066a6:	bf00      	nop
 80066a8:	e7fe      	b.n	80066a8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80066aa:	f001 f865 	bl	8007778 <xTaskGetSchedulerState>
 80066ae:	4603      	mov	r3, r0
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d102      	bne.n	80066ba <xQueueReceive+0x6e>
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d101      	bne.n	80066be <xQueueReceive+0x72>
 80066ba:	2301      	movs	r3, #1
 80066bc:	e000      	b.n	80066c0 <xQueueReceive+0x74>
 80066be:	2300      	movs	r3, #0
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d10a      	bne.n	80066da <xQueueReceive+0x8e>
	__asm volatile
 80066c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066c8:	f383 8811 	msr	BASEPRI, r3
 80066cc:	f3bf 8f6f 	isb	sy
 80066d0:	f3bf 8f4f 	dsb	sy
 80066d4:	61bb      	str	r3, [r7, #24]
}
 80066d6:	bf00      	nop
 80066d8:	e7fe      	b.n	80066d8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80066da:	f001 fdab 	bl	8008234 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80066de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066e2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80066e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d01f      	beq.n	800672a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80066ea:	68b9      	ldr	r1, [r7, #8]
 80066ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80066ee:	f000 f8f7 	bl	80068e0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80066f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066f4:	1e5a      	subs	r2, r3, #1
 80066f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066f8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80066fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066fc:	691b      	ldr	r3, [r3, #16]
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d00f      	beq.n	8006722 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006702:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006704:	3310      	adds	r3, #16
 8006706:	4618      	mov	r0, r3
 8006708:	f000 fe74 	bl	80073f4 <xTaskRemoveFromEventList>
 800670c:	4603      	mov	r3, r0
 800670e:	2b00      	cmp	r3, #0
 8006710:	d007      	beq.n	8006722 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006712:	4b3d      	ldr	r3, [pc, #244]	; (8006808 <xQueueReceive+0x1bc>)
 8006714:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006718:	601a      	str	r2, [r3, #0]
 800671a:	f3bf 8f4f 	dsb	sy
 800671e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006722:	f001 fdb7 	bl	8008294 <vPortExitCritical>
				return pdPASS;
 8006726:	2301      	movs	r3, #1
 8006728:	e069      	b.n	80067fe <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	2b00      	cmp	r3, #0
 800672e:	d103      	bne.n	8006738 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006730:	f001 fdb0 	bl	8008294 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006734:	2300      	movs	r3, #0
 8006736:	e062      	b.n	80067fe <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006738:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800673a:	2b00      	cmp	r3, #0
 800673c:	d106      	bne.n	800674c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800673e:	f107 0310 	add.w	r3, r7, #16
 8006742:	4618      	mov	r0, r3
 8006744:	f000 feba 	bl	80074bc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006748:	2301      	movs	r3, #1
 800674a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800674c:	f001 fda2 	bl	8008294 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006750:	f000 fc26 	bl	8006fa0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006754:	f001 fd6e 	bl	8008234 <vPortEnterCritical>
 8006758:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800675a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800675e:	b25b      	sxtb	r3, r3
 8006760:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006764:	d103      	bne.n	800676e <xQueueReceive+0x122>
 8006766:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006768:	2200      	movs	r2, #0
 800676a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800676e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006770:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006774:	b25b      	sxtb	r3, r3
 8006776:	f1b3 3fff 	cmp.w	r3, #4294967295
 800677a:	d103      	bne.n	8006784 <xQueueReceive+0x138>
 800677c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800677e:	2200      	movs	r2, #0
 8006780:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006784:	f001 fd86 	bl	8008294 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006788:	1d3a      	adds	r2, r7, #4
 800678a:	f107 0310 	add.w	r3, r7, #16
 800678e:	4611      	mov	r1, r2
 8006790:	4618      	mov	r0, r3
 8006792:	f000 fea9 	bl	80074e8 <xTaskCheckForTimeOut>
 8006796:	4603      	mov	r3, r0
 8006798:	2b00      	cmp	r3, #0
 800679a:	d123      	bne.n	80067e4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800679c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800679e:	f000 f917 	bl	80069d0 <prvIsQueueEmpty>
 80067a2:	4603      	mov	r3, r0
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d017      	beq.n	80067d8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80067a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067aa:	3324      	adds	r3, #36	; 0x24
 80067ac:	687a      	ldr	r2, [r7, #4]
 80067ae:	4611      	mov	r1, r2
 80067b0:	4618      	mov	r0, r3
 80067b2:	f000 fdcf 	bl	8007354 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80067b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80067b8:	f000 f8b8 	bl	800692c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80067bc:	f000 fbfe 	bl	8006fbc <xTaskResumeAll>
 80067c0:	4603      	mov	r3, r0
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d189      	bne.n	80066da <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80067c6:	4b10      	ldr	r3, [pc, #64]	; (8006808 <xQueueReceive+0x1bc>)
 80067c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80067cc:	601a      	str	r2, [r3, #0]
 80067ce:	f3bf 8f4f 	dsb	sy
 80067d2:	f3bf 8f6f 	isb	sy
 80067d6:	e780      	b.n	80066da <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80067d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80067da:	f000 f8a7 	bl	800692c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80067de:	f000 fbed 	bl	8006fbc <xTaskResumeAll>
 80067e2:	e77a      	b.n	80066da <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80067e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80067e6:	f000 f8a1 	bl	800692c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80067ea:	f000 fbe7 	bl	8006fbc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80067ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80067f0:	f000 f8ee 	bl	80069d0 <prvIsQueueEmpty>
 80067f4:	4603      	mov	r3, r0
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	f43f af6f 	beq.w	80066da <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80067fc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80067fe:	4618      	mov	r0, r3
 8006800:	3730      	adds	r7, #48	; 0x30
 8006802:	46bd      	mov	sp, r7
 8006804:	bd80      	pop	{r7, pc}
 8006806:	bf00      	nop
 8006808:	e000ed04 	.word	0xe000ed04

0800680c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800680c:	b580      	push	{r7, lr}
 800680e:	b086      	sub	sp, #24
 8006810:	af00      	add	r7, sp, #0
 8006812:	60f8      	str	r0, [r7, #12]
 8006814:	60b9      	str	r1, [r7, #8]
 8006816:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006818:	2300      	movs	r3, #0
 800681a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006820:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006826:	2b00      	cmp	r3, #0
 8006828:	d10d      	bne.n	8006846 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	2b00      	cmp	r3, #0
 8006830:	d14d      	bne.n	80068ce <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	689b      	ldr	r3, [r3, #8]
 8006836:	4618      	mov	r0, r3
 8006838:	f000 ffbc 	bl	80077b4 <xTaskPriorityDisinherit>
 800683c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	2200      	movs	r2, #0
 8006842:	609a      	str	r2, [r3, #8]
 8006844:	e043      	b.n	80068ce <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	2b00      	cmp	r3, #0
 800684a:	d119      	bne.n	8006880 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	6858      	ldr	r0, [r3, #4]
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006854:	461a      	mov	r2, r3
 8006856:	68b9      	ldr	r1, [r7, #8]
 8006858:	f002 f81e 	bl	8008898 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	685a      	ldr	r2, [r3, #4]
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006864:	441a      	add	r2, r3
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	685a      	ldr	r2, [r3, #4]
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	689b      	ldr	r3, [r3, #8]
 8006872:	429a      	cmp	r2, r3
 8006874:	d32b      	bcc.n	80068ce <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	681a      	ldr	r2, [r3, #0]
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	605a      	str	r2, [r3, #4]
 800687e:	e026      	b.n	80068ce <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	68d8      	ldr	r0, [r3, #12]
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006888:	461a      	mov	r2, r3
 800688a:	68b9      	ldr	r1, [r7, #8]
 800688c:	f002 f804 	bl	8008898 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	68da      	ldr	r2, [r3, #12]
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006898:	425b      	negs	r3, r3
 800689a:	441a      	add	r2, r3
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	68da      	ldr	r2, [r3, #12]
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	429a      	cmp	r2, r3
 80068aa:	d207      	bcs.n	80068bc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	689a      	ldr	r2, [r3, #8]
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068b4:	425b      	negs	r3, r3
 80068b6:	441a      	add	r2, r3
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	2b02      	cmp	r3, #2
 80068c0:	d105      	bne.n	80068ce <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80068c2:	693b      	ldr	r3, [r7, #16]
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d002      	beq.n	80068ce <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80068c8:	693b      	ldr	r3, [r7, #16]
 80068ca:	3b01      	subs	r3, #1
 80068cc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80068ce:	693b      	ldr	r3, [r7, #16]
 80068d0:	1c5a      	adds	r2, r3, #1
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80068d6:	697b      	ldr	r3, [r7, #20]
}
 80068d8:	4618      	mov	r0, r3
 80068da:	3718      	adds	r7, #24
 80068dc:	46bd      	mov	sp, r7
 80068de:	bd80      	pop	{r7, pc}

080068e0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80068e0:	b580      	push	{r7, lr}
 80068e2:	b082      	sub	sp, #8
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	6078      	str	r0, [r7, #4]
 80068e8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d018      	beq.n	8006924 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	68da      	ldr	r2, [r3, #12]
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068fa:	441a      	add	r2, r3
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	68da      	ldr	r2, [r3, #12]
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	689b      	ldr	r3, [r3, #8]
 8006908:	429a      	cmp	r2, r3
 800690a:	d303      	bcc.n	8006914 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681a      	ldr	r2, [r3, #0]
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	68d9      	ldr	r1, [r3, #12]
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800691c:	461a      	mov	r2, r3
 800691e:	6838      	ldr	r0, [r7, #0]
 8006920:	f001 ffba 	bl	8008898 <memcpy>
	}
}
 8006924:	bf00      	nop
 8006926:	3708      	adds	r7, #8
 8006928:	46bd      	mov	sp, r7
 800692a:	bd80      	pop	{r7, pc}

0800692c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800692c:	b580      	push	{r7, lr}
 800692e:	b084      	sub	sp, #16
 8006930:	af00      	add	r7, sp, #0
 8006932:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006934:	f001 fc7e 	bl	8008234 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800693e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006940:	e011      	b.n	8006966 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006946:	2b00      	cmp	r3, #0
 8006948:	d012      	beq.n	8006970 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	3324      	adds	r3, #36	; 0x24
 800694e:	4618      	mov	r0, r3
 8006950:	f000 fd50 	bl	80073f4 <xTaskRemoveFromEventList>
 8006954:	4603      	mov	r3, r0
 8006956:	2b00      	cmp	r3, #0
 8006958:	d001      	beq.n	800695e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800695a:	f000 fe27 	bl	80075ac <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800695e:	7bfb      	ldrb	r3, [r7, #15]
 8006960:	3b01      	subs	r3, #1
 8006962:	b2db      	uxtb	r3, r3
 8006964:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006966:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800696a:	2b00      	cmp	r3, #0
 800696c:	dce9      	bgt.n	8006942 <prvUnlockQueue+0x16>
 800696e:	e000      	b.n	8006972 <prvUnlockQueue+0x46>
					break;
 8006970:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	22ff      	movs	r2, #255	; 0xff
 8006976:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800697a:	f001 fc8b 	bl	8008294 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800697e:	f001 fc59 	bl	8008234 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006988:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800698a:	e011      	b.n	80069b0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	691b      	ldr	r3, [r3, #16]
 8006990:	2b00      	cmp	r3, #0
 8006992:	d012      	beq.n	80069ba <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	3310      	adds	r3, #16
 8006998:	4618      	mov	r0, r3
 800699a:	f000 fd2b 	bl	80073f4 <xTaskRemoveFromEventList>
 800699e:	4603      	mov	r3, r0
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d001      	beq.n	80069a8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80069a4:	f000 fe02 	bl	80075ac <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80069a8:	7bbb      	ldrb	r3, [r7, #14]
 80069aa:	3b01      	subs	r3, #1
 80069ac:	b2db      	uxtb	r3, r3
 80069ae:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80069b0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	dce9      	bgt.n	800698c <prvUnlockQueue+0x60>
 80069b8:	e000      	b.n	80069bc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80069ba:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	22ff      	movs	r2, #255	; 0xff
 80069c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80069c4:	f001 fc66 	bl	8008294 <vPortExitCritical>
}
 80069c8:	bf00      	nop
 80069ca:	3710      	adds	r7, #16
 80069cc:	46bd      	mov	sp, r7
 80069ce:	bd80      	pop	{r7, pc}

080069d0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80069d0:	b580      	push	{r7, lr}
 80069d2:	b084      	sub	sp, #16
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80069d8:	f001 fc2c 	bl	8008234 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d102      	bne.n	80069ea <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80069e4:	2301      	movs	r3, #1
 80069e6:	60fb      	str	r3, [r7, #12]
 80069e8:	e001      	b.n	80069ee <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80069ea:	2300      	movs	r3, #0
 80069ec:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80069ee:	f001 fc51 	bl	8008294 <vPortExitCritical>

	return xReturn;
 80069f2:	68fb      	ldr	r3, [r7, #12]
}
 80069f4:	4618      	mov	r0, r3
 80069f6:	3710      	adds	r7, #16
 80069f8:	46bd      	mov	sp, r7
 80069fa:	bd80      	pop	{r7, pc}

080069fc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80069fc:	b580      	push	{r7, lr}
 80069fe:	b084      	sub	sp, #16
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006a04:	f001 fc16 	bl	8008234 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a10:	429a      	cmp	r2, r3
 8006a12:	d102      	bne.n	8006a1a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006a14:	2301      	movs	r3, #1
 8006a16:	60fb      	str	r3, [r7, #12]
 8006a18:	e001      	b.n	8006a1e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006a1a:	2300      	movs	r3, #0
 8006a1c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006a1e:	f001 fc39 	bl	8008294 <vPortExitCritical>

	return xReturn;
 8006a22:	68fb      	ldr	r3, [r7, #12]
}
 8006a24:	4618      	mov	r0, r3
 8006a26:	3710      	adds	r7, #16
 8006a28:	46bd      	mov	sp, r7
 8006a2a:	bd80      	pop	{r7, pc}

08006a2c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006a2c:	b480      	push	{r7}
 8006a2e:	b085      	sub	sp, #20
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	6078      	str	r0, [r7, #4]
 8006a34:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006a36:	2300      	movs	r3, #0
 8006a38:	60fb      	str	r3, [r7, #12]
 8006a3a:	e014      	b.n	8006a66 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006a3c:	4a0f      	ldr	r2, [pc, #60]	; (8006a7c <vQueueAddToRegistry+0x50>)
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d10b      	bne.n	8006a60 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006a48:	490c      	ldr	r1, [pc, #48]	; (8006a7c <vQueueAddToRegistry+0x50>)
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	683a      	ldr	r2, [r7, #0]
 8006a4e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006a52:	4a0a      	ldr	r2, [pc, #40]	; (8006a7c <vQueueAddToRegistry+0x50>)
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	00db      	lsls	r3, r3, #3
 8006a58:	4413      	add	r3, r2
 8006a5a:	687a      	ldr	r2, [r7, #4]
 8006a5c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006a5e:	e006      	b.n	8006a6e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	3301      	adds	r3, #1
 8006a64:	60fb      	str	r3, [r7, #12]
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	2b07      	cmp	r3, #7
 8006a6a:	d9e7      	bls.n	8006a3c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006a6c:	bf00      	nop
 8006a6e:	bf00      	nop
 8006a70:	3714      	adds	r7, #20
 8006a72:	46bd      	mov	sp, r7
 8006a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a78:	4770      	bx	lr
 8006a7a:	bf00      	nop
 8006a7c:	24000aa4 	.word	0x24000aa4

08006a80 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006a80:	b580      	push	{r7, lr}
 8006a82:	b086      	sub	sp, #24
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	60f8      	str	r0, [r7, #12]
 8006a88:	60b9      	str	r1, [r7, #8]
 8006a8a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006a90:	f001 fbd0 	bl	8008234 <vPortEnterCritical>
 8006a94:	697b      	ldr	r3, [r7, #20]
 8006a96:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006a9a:	b25b      	sxtb	r3, r3
 8006a9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006aa0:	d103      	bne.n	8006aaa <vQueueWaitForMessageRestricted+0x2a>
 8006aa2:	697b      	ldr	r3, [r7, #20]
 8006aa4:	2200      	movs	r2, #0
 8006aa6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006aaa:	697b      	ldr	r3, [r7, #20]
 8006aac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006ab0:	b25b      	sxtb	r3, r3
 8006ab2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ab6:	d103      	bne.n	8006ac0 <vQueueWaitForMessageRestricted+0x40>
 8006ab8:	697b      	ldr	r3, [r7, #20]
 8006aba:	2200      	movs	r2, #0
 8006abc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006ac0:	f001 fbe8 	bl	8008294 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006ac4:	697b      	ldr	r3, [r7, #20]
 8006ac6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d106      	bne.n	8006ada <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006acc:	697b      	ldr	r3, [r7, #20]
 8006ace:	3324      	adds	r3, #36	; 0x24
 8006ad0:	687a      	ldr	r2, [r7, #4]
 8006ad2:	68b9      	ldr	r1, [r7, #8]
 8006ad4:	4618      	mov	r0, r3
 8006ad6:	f000 fc61 	bl	800739c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006ada:	6978      	ldr	r0, [r7, #20]
 8006adc:	f7ff ff26 	bl	800692c <prvUnlockQueue>
	}
 8006ae0:	bf00      	nop
 8006ae2:	3718      	adds	r7, #24
 8006ae4:	46bd      	mov	sp, r7
 8006ae6:	bd80      	pop	{r7, pc}

08006ae8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006ae8:	b580      	push	{r7, lr}
 8006aea:	b08e      	sub	sp, #56	; 0x38
 8006aec:	af04      	add	r7, sp, #16
 8006aee:	60f8      	str	r0, [r7, #12]
 8006af0:	60b9      	str	r1, [r7, #8]
 8006af2:	607a      	str	r2, [r7, #4]
 8006af4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006af6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d10a      	bne.n	8006b12 <xTaskCreateStatic+0x2a>
	__asm volatile
 8006afc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b00:	f383 8811 	msr	BASEPRI, r3
 8006b04:	f3bf 8f6f 	isb	sy
 8006b08:	f3bf 8f4f 	dsb	sy
 8006b0c:	623b      	str	r3, [r7, #32]
}
 8006b0e:	bf00      	nop
 8006b10:	e7fe      	b.n	8006b10 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006b12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d10a      	bne.n	8006b2e <xTaskCreateStatic+0x46>
	__asm volatile
 8006b18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b1c:	f383 8811 	msr	BASEPRI, r3
 8006b20:	f3bf 8f6f 	isb	sy
 8006b24:	f3bf 8f4f 	dsb	sy
 8006b28:	61fb      	str	r3, [r7, #28]
}
 8006b2a:	bf00      	nop
 8006b2c:	e7fe      	b.n	8006b2c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006b2e:	23bc      	movs	r3, #188	; 0xbc
 8006b30:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006b32:	693b      	ldr	r3, [r7, #16]
 8006b34:	2bbc      	cmp	r3, #188	; 0xbc
 8006b36:	d00a      	beq.n	8006b4e <xTaskCreateStatic+0x66>
	__asm volatile
 8006b38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b3c:	f383 8811 	msr	BASEPRI, r3
 8006b40:	f3bf 8f6f 	isb	sy
 8006b44:	f3bf 8f4f 	dsb	sy
 8006b48:	61bb      	str	r3, [r7, #24]
}
 8006b4a:	bf00      	nop
 8006b4c:	e7fe      	b.n	8006b4c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006b4e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006b50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d01e      	beq.n	8006b94 <xTaskCreateStatic+0xac>
 8006b56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d01b      	beq.n	8006b94 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006b5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b5e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b62:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006b64:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b68:	2202      	movs	r2, #2
 8006b6a:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006b6e:	2300      	movs	r3, #0
 8006b70:	9303      	str	r3, [sp, #12]
 8006b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b74:	9302      	str	r3, [sp, #8]
 8006b76:	f107 0314 	add.w	r3, r7, #20
 8006b7a:	9301      	str	r3, [sp, #4]
 8006b7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b7e:	9300      	str	r3, [sp, #0]
 8006b80:	683b      	ldr	r3, [r7, #0]
 8006b82:	687a      	ldr	r2, [r7, #4]
 8006b84:	68b9      	ldr	r1, [r7, #8]
 8006b86:	68f8      	ldr	r0, [r7, #12]
 8006b88:	f000 f850 	bl	8006c2c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006b8c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006b8e:	f000 f8f3 	bl	8006d78 <prvAddNewTaskToReadyList>
 8006b92:	e001      	b.n	8006b98 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8006b94:	2300      	movs	r3, #0
 8006b96:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006b98:	697b      	ldr	r3, [r7, #20]
	}
 8006b9a:	4618      	mov	r0, r3
 8006b9c:	3728      	adds	r7, #40	; 0x28
 8006b9e:	46bd      	mov	sp, r7
 8006ba0:	bd80      	pop	{r7, pc}

08006ba2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006ba2:	b580      	push	{r7, lr}
 8006ba4:	b08c      	sub	sp, #48	; 0x30
 8006ba6:	af04      	add	r7, sp, #16
 8006ba8:	60f8      	str	r0, [r7, #12]
 8006baa:	60b9      	str	r1, [r7, #8]
 8006bac:	603b      	str	r3, [r7, #0]
 8006bae:	4613      	mov	r3, r2
 8006bb0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006bb2:	88fb      	ldrh	r3, [r7, #6]
 8006bb4:	009b      	lsls	r3, r3, #2
 8006bb6:	4618      	mov	r0, r3
 8006bb8:	f001 fc5e 	bl	8008478 <pvPortMalloc>
 8006bbc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006bbe:	697b      	ldr	r3, [r7, #20]
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d00e      	beq.n	8006be2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006bc4:	20bc      	movs	r0, #188	; 0xbc
 8006bc6:	f001 fc57 	bl	8008478 <pvPortMalloc>
 8006bca:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006bcc:	69fb      	ldr	r3, [r7, #28]
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d003      	beq.n	8006bda <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006bd2:	69fb      	ldr	r3, [r7, #28]
 8006bd4:	697a      	ldr	r2, [r7, #20]
 8006bd6:	631a      	str	r2, [r3, #48]	; 0x30
 8006bd8:	e005      	b.n	8006be6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006bda:	6978      	ldr	r0, [r7, #20]
 8006bdc:	f001 fd18 	bl	8008610 <vPortFree>
 8006be0:	e001      	b.n	8006be6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006be2:	2300      	movs	r3, #0
 8006be4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006be6:	69fb      	ldr	r3, [r7, #28]
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d017      	beq.n	8006c1c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006bec:	69fb      	ldr	r3, [r7, #28]
 8006bee:	2200      	movs	r2, #0
 8006bf0:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006bf4:	88fa      	ldrh	r2, [r7, #6]
 8006bf6:	2300      	movs	r3, #0
 8006bf8:	9303      	str	r3, [sp, #12]
 8006bfa:	69fb      	ldr	r3, [r7, #28]
 8006bfc:	9302      	str	r3, [sp, #8]
 8006bfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c00:	9301      	str	r3, [sp, #4]
 8006c02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c04:	9300      	str	r3, [sp, #0]
 8006c06:	683b      	ldr	r3, [r7, #0]
 8006c08:	68b9      	ldr	r1, [r7, #8]
 8006c0a:	68f8      	ldr	r0, [r7, #12]
 8006c0c:	f000 f80e 	bl	8006c2c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006c10:	69f8      	ldr	r0, [r7, #28]
 8006c12:	f000 f8b1 	bl	8006d78 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006c16:	2301      	movs	r3, #1
 8006c18:	61bb      	str	r3, [r7, #24]
 8006c1a:	e002      	b.n	8006c22 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006c1c:	f04f 33ff 	mov.w	r3, #4294967295
 8006c20:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006c22:	69bb      	ldr	r3, [r7, #24]
	}
 8006c24:	4618      	mov	r0, r3
 8006c26:	3720      	adds	r7, #32
 8006c28:	46bd      	mov	sp, r7
 8006c2a:	bd80      	pop	{r7, pc}

08006c2c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006c2c:	b580      	push	{r7, lr}
 8006c2e:	b088      	sub	sp, #32
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	60f8      	str	r0, [r7, #12]
 8006c34:	60b9      	str	r1, [r7, #8]
 8006c36:	607a      	str	r2, [r7, #4]
 8006c38:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006c3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c3c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	009b      	lsls	r3, r3, #2
 8006c42:	461a      	mov	r2, r3
 8006c44:	21a5      	movs	r1, #165	; 0xa5
 8006c46:	f001 fe35 	bl	80088b4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006c4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c4c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006c4e:	6879      	ldr	r1, [r7, #4]
 8006c50:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8006c54:	440b      	add	r3, r1
 8006c56:	009b      	lsls	r3, r3, #2
 8006c58:	4413      	add	r3, r2
 8006c5a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006c5c:	69bb      	ldr	r3, [r7, #24]
 8006c5e:	f023 0307 	bic.w	r3, r3, #7
 8006c62:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006c64:	69bb      	ldr	r3, [r7, #24]
 8006c66:	f003 0307 	and.w	r3, r3, #7
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d00a      	beq.n	8006c84 <prvInitialiseNewTask+0x58>
	__asm volatile
 8006c6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c72:	f383 8811 	msr	BASEPRI, r3
 8006c76:	f3bf 8f6f 	isb	sy
 8006c7a:	f3bf 8f4f 	dsb	sy
 8006c7e:	617b      	str	r3, [r7, #20]
}
 8006c80:	bf00      	nop
 8006c82:	e7fe      	b.n	8006c82 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006c84:	68bb      	ldr	r3, [r7, #8]
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d01f      	beq.n	8006cca <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006c8a:	2300      	movs	r3, #0
 8006c8c:	61fb      	str	r3, [r7, #28]
 8006c8e:	e012      	b.n	8006cb6 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006c90:	68ba      	ldr	r2, [r7, #8]
 8006c92:	69fb      	ldr	r3, [r7, #28]
 8006c94:	4413      	add	r3, r2
 8006c96:	7819      	ldrb	r1, [r3, #0]
 8006c98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c9a:	69fb      	ldr	r3, [r7, #28]
 8006c9c:	4413      	add	r3, r2
 8006c9e:	3334      	adds	r3, #52	; 0x34
 8006ca0:	460a      	mov	r2, r1
 8006ca2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006ca4:	68ba      	ldr	r2, [r7, #8]
 8006ca6:	69fb      	ldr	r3, [r7, #28]
 8006ca8:	4413      	add	r3, r2
 8006caa:	781b      	ldrb	r3, [r3, #0]
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d006      	beq.n	8006cbe <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006cb0:	69fb      	ldr	r3, [r7, #28]
 8006cb2:	3301      	adds	r3, #1
 8006cb4:	61fb      	str	r3, [r7, #28]
 8006cb6:	69fb      	ldr	r3, [r7, #28]
 8006cb8:	2b0f      	cmp	r3, #15
 8006cba:	d9e9      	bls.n	8006c90 <prvInitialiseNewTask+0x64>
 8006cbc:	e000      	b.n	8006cc0 <prvInitialiseNewTask+0x94>
			{
				break;
 8006cbe:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006cc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cc2:	2200      	movs	r2, #0
 8006cc4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006cc8:	e003      	b.n	8006cd2 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006cca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ccc:	2200      	movs	r2, #0
 8006cce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006cd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cd4:	2b37      	cmp	r3, #55	; 0x37
 8006cd6:	d901      	bls.n	8006cdc <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006cd8:	2337      	movs	r3, #55	; 0x37
 8006cda:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006cdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cde:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006ce0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006ce2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ce4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006ce6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006ce8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cea:	2200      	movs	r2, #0
 8006cec:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006cee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cf0:	3304      	adds	r3, #4
 8006cf2:	4618      	mov	r0, r3
 8006cf4:	f7ff f978 	bl	8005fe8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006cf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cfa:	3318      	adds	r3, #24
 8006cfc:	4618      	mov	r0, r3
 8006cfe:	f7ff f973 	bl	8005fe8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006d02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d06:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006d08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d0a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006d0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d10:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006d12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d16:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006d18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006d20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d22:	2200      	movs	r2, #0
 8006d24:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006d28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d2a:	3354      	adds	r3, #84	; 0x54
 8006d2c:	2260      	movs	r2, #96	; 0x60
 8006d2e:	2100      	movs	r1, #0
 8006d30:	4618      	mov	r0, r3
 8006d32:	f001 fdbf 	bl	80088b4 <memset>
 8006d36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d38:	4a0c      	ldr	r2, [pc, #48]	; (8006d6c <prvInitialiseNewTask+0x140>)
 8006d3a:	659a      	str	r2, [r3, #88]	; 0x58
 8006d3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d3e:	4a0c      	ldr	r2, [pc, #48]	; (8006d70 <prvInitialiseNewTask+0x144>)
 8006d40:	65da      	str	r2, [r3, #92]	; 0x5c
 8006d42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d44:	4a0b      	ldr	r2, [pc, #44]	; (8006d74 <prvInitialiseNewTask+0x148>)
 8006d46:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006d48:	683a      	ldr	r2, [r7, #0]
 8006d4a:	68f9      	ldr	r1, [r7, #12]
 8006d4c:	69b8      	ldr	r0, [r7, #24]
 8006d4e:	f001 f941 	bl	8007fd4 <pxPortInitialiseStack>
 8006d52:	4602      	mov	r2, r0
 8006d54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d56:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006d58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d002      	beq.n	8006d64 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006d5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d62:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006d64:	bf00      	nop
 8006d66:	3720      	adds	r7, #32
 8006d68:	46bd      	mov	sp, r7
 8006d6a:	bd80      	pop	{r7, pc}
 8006d6c:	08008b00 	.word	0x08008b00
 8006d70:	08008b20 	.word	0x08008b20
 8006d74:	08008ae0 	.word	0x08008ae0

08006d78 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006d78:	b580      	push	{r7, lr}
 8006d7a:	b082      	sub	sp, #8
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006d80:	f001 fa58 	bl	8008234 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006d84:	4b2d      	ldr	r3, [pc, #180]	; (8006e3c <prvAddNewTaskToReadyList+0xc4>)
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	3301      	adds	r3, #1
 8006d8a:	4a2c      	ldr	r2, [pc, #176]	; (8006e3c <prvAddNewTaskToReadyList+0xc4>)
 8006d8c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006d8e:	4b2c      	ldr	r3, [pc, #176]	; (8006e40 <prvAddNewTaskToReadyList+0xc8>)
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d109      	bne.n	8006daa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006d96:	4a2a      	ldr	r2, [pc, #168]	; (8006e40 <prvAddNewTaskToReadyList+0xc8>)
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006d9c:	4b27      	ldr	r3, [pc, #156]	; (8006e3c <prvAddNewTaskToReadyList+0xc4>)
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	2b01      	cmp	r3, #1
 8006da2:	d110      	bne.n	8006dc6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006da4:	f000 fc26 	bl	80075f4 <prvInitialiseTaskLists>
 8006da8:	e00d      	b.n	8006dc6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006daa:	4b26      	ldr	r3, [pc, #152]	; (8006e44 <prvAddNewTaskToReadyList+0xcc>)
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d109      	bne.n	8006dc6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006db2:	4b23      	ldr	r3, [pc, #140]	; (8006e40 <prvAddNewTaskToReadyList+0xc8>)
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dbc:	429a      	cmp	r2, r3
 8006dbe:	d802      	bhi.n	8006dc6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006dc0:	4a1f      	ldr	r2, [pc, #124]	; (8006e40 <prvAddNewTaskToReadyList+0xc8>)
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006dc6:	4b20      	ldr	r3, [pc, #128]	; (8006e48 <prvAddNewTaskToReadyList+0xd0>)
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	3301      	adds	r3, #1
 8006dcc:	4a1e      	ldr	r2, [pc, #120]	; (8006e48 <prvAddNewTaskToReadyList+0xd0>)
 8006dce:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006dd0:	4b1d      	ldr	r3, [pc, #116]	; (8006e48 <prvAddNewTaskToReadyList+0xd0>)
 8006dd2:	681a      	ldr	r2, [r3, #0]
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ddc:	4b1b      	ldr	r3, [pc, #108]	; (8006e4c <prvAddNewTaskToReadyList+0xd4>)
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	429a      	cmp	r2, r3
 8006de2:	d903      	bls.n	8006dec <prvAddNewTaskToReadyList+0x74>
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006de8:	4a18      	ldr	r2, [pc, #96]	; (8006e4c <prvAddNewTaskToReadyList+0xd4>)
 8006dea:	6013      	str	r3, [r2, #0]
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006df0:	4613      	mov	r3, r2
 8006df2:	009b      	lsls	r3, r3, #2
 8006df4:	4413      	add	r3, r2
 8006df6:	009b      	lsls	r3, r3, #2
 8006df8:	4a15      	ldr	r2, [pc, #84]	; (8006e50 <prvAddNewTaskToReadyList+0xd8>)
 8006dfa:	441a      	add	r2, r3
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	3304      	adds	r3, #4
 8006e00:	4619      	mov	r1, r3
 8006e02:	4610      	mov	r0, r2
 8006e04:	f7ff f8fd 	bl	8006002 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006e08:	f001 fa44 	bl	8008294 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006e0c:	4b0d      	ldr	r3, [pc, #52]	; (8006e44 <prvAddNewTaskToReadyList+0xcc>)
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d00e      	beq.n	8006e32 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006e14:	4b0a      	ldr	r3, [pc, #40]	; (8006e40 <prvAddNewTaskToReadyList+0xc8>)
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e1e:	429a      	cmp	r2, r3
 8006e20:	d207      	bcs.n	8006e32 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006e22:	4b0c      	ldr	r3, [pc, #48]	; (8006e54 <prvAddNewTaskToReadyList+0xdc>)
 8006e24:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e28:	601a      	str	r2, [r3, #0]
 8006e2a:	f3bf 8f4f 	dsb	sy
 8006e2e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006e32:	bf00      	nop
 8006e34:	3708      	adds	r7, #8
 8006e36:	46bd      	mov	sp, r7
 8006e38:	bd80      	pop	{r7, pc}
 8006e3a:	bf00      	nop
 8006e3c:	24000fb8 	.word	0x24000fb8
 8006e40:	24000ae4 	.word	0x24000ae4
 8006e44:	24000fc4 	.word	0x24000fc4
 8006e48:	24000fd4 	.word	0x24000fd4
 8006e4c:	24000fc0 	.word	0x24000fc0
 8006e50:	24000ae8 	.word	0x24000ae8
 8006e54:	e000ed04 	.word	0xe000ed04

08006e58 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006e58:	b580      	push	{r7, lr}
 8006e5a:	b084      	sub	sp, #16
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006e60:	2300      	movs	r3, #0
 8006e62:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d017      	beq.n	8006e9a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006e6a:	4b13      	ldr	r3, [pc, #76]	; (8006eb8 <vTaskDelay+0x60>)
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d00a      	beq.n	8006e88 <vTaskDelay+0x30>
	__asm volatile
 8006e72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e76:	f383 8811 	msr	BASEPRI, r3
 8006e7a:	f3bf 8f6f 	isb	sy
 8006e7e:	f3bf 8f4f 	dsb	sy
 8006e82:	60bb      	str	r3, [r7, #8]
}
 8006e84:	bf00      	nop
 8006e86:	e7fe      	b.n	8006e86 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006e88:	f000 f88a 	bl	8006fa0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006e8c:	2100      	movs	r1, #0
 8006e8e:	6878      	ldr	r0, [r7, #4]
 8006e90:	f000 fcfe 	bl	8007890 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006e94:	f000 f892 	bl	8006fbc <xTaskResumeAll>
 8006e98:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d107      	bne.n	8006eb0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006ea0:	4b06      	ldr	r3, [pc, #24]	; (8006ebc <vTaskDelay+0x64>)
 8006ea2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ea6:	601a      	str	r2, [r3, #0]
 8006ea8:	f3bf 8f4f 	dsb	sy
 8006eac:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006eb0:	bf00      	nop
 8006eb2:	3710      	adds	r7, #16
 8006eb4:	46bd      	mov	sp, r7
 8006eb6:	bd80      	pop	{r7, pc}
 8006eb8:	24000fe0 	.word	0x24000fe0
 8006ebc:	e000ed04 	.word	0xe000ed04

08006ec0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006ec0:	b580      	push	{r7, lr}
 8006ec2:	b08a      	sub	sp, #40	; 0x28
 8006ec4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006ec6:	2300      	movs	r3, #0
 8006ec8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006eca:	2300      	movs	r3, #0
 8006ecc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006ece:	463a      	mov	r2, r7
 8006ed0:	1d39      	adds	r1, r7, #4
 8006ed2:	f107 0308 	add.w	r3, r7, #8
 8006ed6:	4618      	mov	r0, r3
 8006ed8:	f7ff f832 	bl	8005f40 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006edc:	6839      	ldr	r1, [r7, #0]
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	68ba      	ldr	r2, [r7, #8]
 8006ee2:	9202      	str	r2, [sp, #8]
 8006ee4:	9301      	str	r3, [sp, #4]
 8006ee6:	2300      	movs	r3, #0
 8006ee8:	9300      	str	r3, [sp, #0]
 8006eea:	2300      	movs	r3, #0
 8006eec:	460a      	mov	r2, r1
 8006eee:	4924      	ldr	r1, [pc, #144]	; (8006f80 <vTaskStartScheduler+0xc0>)
 8006ef0:	4824      	ldr	r0, [pc, #144]	; (8006f84 <vTaskStartScheduler+0xc4>)
 8006ef2:	f7ff fdf9 	bl	8006ae8 <xTaskCreateStatic>
 8006ef6:	4603      	mov	r3, r0
 8006ef8:	4a23      	ldr	r2, [pc, #140]	; (8006f88 <vTaskStartScheduler+0xc8>)
 8006efa:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006efc:	4b22      	ldr	r3, [pc, #136]	; (8006f88 <vTaskStartScheduler+0xc8>)
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d002      	beq.n	8006f0a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006f04:	2301      	movs	r3, #1
 8006f06:	617b      	str	r3, [r7, #20]
 8006f08:	e001      	b.n	8006f0e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006f0a:	2300      	movs	r3, #0
 8006f0c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006f0e:	697b      	ldr	r3, [r7, #20]
 8006f10:	2b01      	cmp	r3, #1
 8006f12:	d102      	bne.n	8006f1a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006f14:	f000 fd10 	bl	8007938 <xTimerCreateTimerTask>
 8006f18:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006f1a:	697b      	ldr	r3, [r7, #20]
 8006f1c:	2b01      	cmp	r3, #1
 8006f1e:	d11b      	bne.n	8006f58 <vTaskStartScheduler+0x98>
	__asm volatile
 8006f20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f24:	f383 8811 	msr	BASEPRI, r3
 8006f28:	f3bf 8f6f 	isb	sy
 8006f2c:	f3bf 8f4f 	dsb	sy
 8006f30:	613b      	str	r3, [r7, #16]
}
 8006f32:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006f34:	4b15      	ldr	r3, [pc, #84]	; (8006f8c <vTaskStartScheduler+0xcc>)
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	3354      	adds	r3, #84	; 0x54
 8006f3a:	4a15      	ldr	r2, [pc, #84]	; (8006f90 <vTaskStartScheduler+0xd0>)
 8006f3c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006f3e:	4b15      	ldr	r3, [pc, #84]	; (8006f94 <vTaskStartScheduler+0xd4>)
 8006f40:	f04f 32ff 	mov.w	r2, #4294967295
 8006f44:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006f46:	4b14      	ldr	r3, [pc, #80]	; (8006f98 <vTaskStartScheduler+0xd8>)
 8006f48:	2201      	movs	r2, #1
 8006f4a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006f4c:	4b13      	ldr	r3, [pc, #76]	; (8006f9c <vTaskStartScheduler+0xdc>)
 8006f4e:	2200      	movs	r2, #0
 8006f50:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006f52:	f001 f8cd 	bl	80080f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006f56:	e00e      	b.n	8006f76 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006f58:	697b      	ldr	r3, [r7, #20]
 8006f5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f5e:	d10a      	bne.n	8006f76 <vTaskStartScheduler+0xb6>
	__asm volatile
 8006f60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f64:	f383 8811 	msr	BASEPRI, r3
 8006f68:	f3bf 8f6f 	isb	sy
 8006f6c:	f3bf 8f4f 	dsb	sy
 8006f70:	60fb      	str	r3, [r7, #12]
}
 8006f72:	bf00      	nop
 8006f74:	e7fe      	b.n	8006f74 <vTaskStartScheduler+0xb4>
}
 8006f76:	bf00      	nop
 8006f78:	3718      	adds	r7, #24
 8006f7a:	46bd      	mov	sp, r7
 8006f7c:	bd80      	pop	{r7, pc}
 8006f7e:	bf00      	nop
 8006f80:	08008a6c 	.word	0x08008a6c
 8006f84:	080075c5 	.word	0x080075c5
 8006f88:	24000fdc 	.word	0x24000fdc
 8006f8c:	24000ae4 	.word	0x24000ae4
 8006f90:	24000014 	.word	0x24000014
 8006f94:	24000fd8 	.word	0x24000fd8
 8006f98:	24000fc4 	.word	0x24000fc4
 8006f9c:	24000fbc 	.word	0x24000fbc

08006fa0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006fa0:	b480      	push	{r7}
 8006fa2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006fa4:	4b04      	ldr	r3, [pc, #16]	; (8006fb8 <vTaskSuspendAll+0x18>)
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	3301      	adds	r3, #1
 8006faa:	4a03      	ldr	r2, [pc, #12]	; (8006fb8 <vTaskSuspendAll+0x18>)
 8006fac:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006fae:	bf00      	nop
 8006fb0:	46bd      	mov	sp, r7
 8006fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb6:	4770      	bx	lr
 8006fb8:	24000fe0 	.word	0x24000fe0

08006fbc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006fbc:	b580      	push	{r7, lr}
 8006fbe:	b084      	sub	sp, #16
 8006fc0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006fc2:	2300      	movs	r3, #0
 8006fc4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006fc6:	2300      	movs	r3, #0
 8006fc8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006fca:	4b42      	ldr	r3, [pc, #264]	; (80070d4 <xTaskResumeAll+0x118>)
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d10a      	bne.n	8006fe8 <xTaskResumeAll+0x2c>
	__asm volatile
 8006fd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fd6:	f383 8811 	msr	BASEPRI, r3
 8006fda:	f3bf 8f6f 	isb	sy
 8006fde:	f3bf 8f4f 	dsb	sy
 8006fe2:	603b      	str	r3, [r7, #0]
}
 8006fe4:	bf00      	nop
 8006fe6:	e7fe      	b.n	8006fe6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006fe8:	f001 f924 	bl	8008234 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006fec:	4b39      	ldr	r3, [pc, #228]	; (80070d4 <xTaskResumeAll+0x118>)
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	3b01      	subs	r3, #1
 8006ff2:	4a38      	ldr	r2, [pc, #224]	; (80070d4 <xTaskResumeAll+0x118>)
 8006ff4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006ff6:	4b37      	ldr	r3, [pc, #220]	; (80070d4 <xTaskResumeAll+0x118>)
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d162      	bne.n	80070c4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006ffe:	4b36      	ldr	r3, [pc, #216]	; (80070d8 <xTaskResumeAll+0x11c>)
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	2b00      	cmp	r3, #0
 8007004:	d05e      	beq.n	80070c4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007006:	e02f      	b.n	8007068 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007008:	4b34      	ldr	r3, [pc, #208]	; (80070dc <xTaskResumeAll+0x120>)
 800700a:	68db      	ldr	r3, [r3, #12]
 800700c:	68db      	ldr	r3, [r3, #12]
 800700e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	3318      	adds	r3, #24
 8007014:	4618      	mov	r0, r3
 8007016:	f7ff f851 	bl	80060bc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	3304      	adds	r3, #4
 800701e:	4618      	mov	r0, r3
 8007020:	f7ff f84c 	bl	80060bc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007028:	4b2d      	ldr	r3, [pc, #180]	; (80070e0 <xTaskResumeAll+0x124>)
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	429a      	cmp	r2, r3
 800702e:	d903      	bls.n	8007038 <xTaskResumeAll+0x7c>
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007034:	4a2a      	ldr	r2, [pc, #168]	; (80070e0 <xTaskResumeAll+0x124>)
 8007036:	6013      	str	r3, [r2, #0]
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800703c:	4613      	mov	r3, r2
 800703e:	009b      	lsls	r3, r3, #2
 8007040:	4413      	add	r3, r2
 8007042:	009b      	lsls	r3, r3, #2
 8007044:	4a27      	ldr	r2, [pc, #156]	; (80070e4 <xTaskResumeAll+0x128>)
 8007046:	441a      	add	r2, r3
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	3304      	adds	r3, #4
 800704c:	4619      	mov	r1, r3
 800704e:	4610      	mov	r0, r2
 8007050:	f7fe ffd7 	bl	8006002 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007058:	4b23      	ldr	r3, [pc, #140]	; (80070e8 <xTaskResumeAll+0x12c>)
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800705e:	429a      	cmp	r2, r3
 8007060:	d302      	bcc.n	8007068 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8007062:	4b22      	ldr	r3, [pc, #136]	; (80070ec <xTaskResumeAll+0x130>)
 8007064:	2201      	movs	r2, #1
 8007066:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007068:	4b1c      	ldr	r3, [pc, #112]	; (80070dc <xTaskResumeAll+0x120>)
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	2b00      	cmp	r3, #0
 800706e:	d1cb      	bne.n	8007008 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	2b00      	cmp	r3, #0
 8007074:	d001      	beq.n	800707a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007076:	f000 fb5f 	bl	8007738 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800707a:	4b1d      	ldr	r3, [pc, #116]	; (80070f0 <xTaskResumeAll+0x134>)
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	2b00      	cmp	r3, #0
 8007084:	d010      	beq.n	80070a8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007086:	f000 f847 	bl	8007118 <xTaskIncrementTick>
 800708a:	4603      	mov	r3, r0
 800708c:	2b00      	cmp	r3, #0
 800708e:	d002      	beq.n	8007096 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8007090:	4b16      	ldr	r3, [pc, #88]	; (80070ec <xTaskResumeAll+0x130>)
 8007092:	2201      	movs	r2, #1
 8007094:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	3b01      	subs	r3, #1
 800709a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d1f1      	bne.n	8007086 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80070a2:	4b13      	ldr	r3, [pc, #76]	; (80070f0 <xTaskResumeAll+0x134>)
 80070a4:	2200      	movs	r2, #0
 80070a6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80070a8:	4b10      	ldr	r3, [pc, #64]	; (80070ec <xTaskResumeAll+0x130>)
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d009      	beq.n	80070c4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80070b0:	2301      	movs	r3, #1
 80070b2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80070b4:	4b0f      	ldr	r3, [pc, #60]	; (80070f4 <xTaskResumeAll+0x138>)
 80070b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80070ba:	601a      	str	r2, [r3, #0]
 80070bc:	f3bf 8f4f 	dsb	sy
 80070c0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80070c4:	f001 f8e6 	bl	8008294 <vPortExitCritical>

	return xAlreadyYielded;
 80070c8:	68bb      	ldr	r3, [r7, #8]
}
 80070ca:	4618      	mov	r0, r3
 80070cc:	3710      	adds	r7, #16
 80070ce:	46bd      	mov	sp, r7
 80070d0:	bd80      	pop	{r7, pc}
 80070d2:	bf00      	nop
 80070d4:	24000fe0 	.word	0x24000fe0
 80070d8:	24000fb8 	.word	0x24000fb8
 80070dc:	24000f78 	.word	0x24000f78
 80070e0:	24000fc0 	.word	0x24000fc0
 80070e4:	24000ae8 	.word	0x24000ae8
 80070e8:	24000ae4 	.word	0x24000ae4
 80070ec:	24000fcc 	.word	0x24000fcc
 80070f0:	24000fc8 	.word	0x24000fc8
 80070f4:	e000ed04 	.word	0xe000ed04

080070f8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80070f8:	b480      	push	{r7}
 80070fa:	b083      	sub	sp, #12
 80070fc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80070fe:	4b05      	ldr	r3, [pc, #20]	; (8007114 <xTaskGetTickCount+0x1c>)
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007104:	687b      	ldr	r3, [r7, #4]
}
 8007106:	4618      	mov	r0, r3
 8007108:	370c      	adds	r7, #12
 800710a:	46bd      	mov	sp, r7
 800710c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007110:	4770      	bx	lr
 8007112:	bf00      	nop
 8007114:	24000fbc 	.word	0x24000fbc

08007118 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007118:	b580      	push	{r7, lr}
 800711a:	b086      	sub	sp, #24
 800711c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800711e:	2300      	movs	r3, #0
 8007120:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007122:	4b4f      	ldr	r3, [pc, #316]	; (8007260 <xTaskIncrementTick+0x148>)
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	2b00      	cmp	r3, #0
 8007128:	f040 808f 	bne.w	800724a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800712c:	4b4d      	ldr	r3, [pc, #308]	; (8007264 <xTaskIncrementTick+0x14c>)
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	3301      	adds	r3, #1
 8007132:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007134:	4a4b      	ldr	r2, [pc, #300]	; (8007264 <xTaskIncrementTick+0x14c>)
 8007136:	693b      	ldr	r3, [r7, #16]
 8007138:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800713a:	693b      	ldr	r3, [r7, #16]
 800713c:	2b00      	cmp	r3, #0
 800713e:	d120      	bne.n	8007182 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007140:	4b49      	ldr	r3, [pc, #292]	; (8007268 <xTaskIncrementTick+0x150>)
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	2b00      	cmp	r3, #0
 8007148:	d00a      	beq.n	8007160 <xTaskIncrementTick+0x48>
	__asm volatile
 800714a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800714e:	f383 8811 	msr	BASEPRI, r3
 8007152:	f3bf 8f6f 	isb	sy
 8007156:	f3bf 8f4f 	dsb	sy
 800715a:	603b      	str	r3, [r7, #0]
}
 800715c:	bf00      	nop
 800715e:	e7fe      	b.n	800715e <xTaskIncrementTick+0x46>
 8007160:	4b41      	ldr	r3, [pc, #260]	; (8007268 <xTaskIncrementTick+0x150>)
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	60fb      	str	r3, [r7, #12]
 8007166:	4b41      	ldr	r3, [pc, #260]	; (800726c <xTaskIncrementTick+0x154>)
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	4a3f      	ldr	r2, [pc, #252]	; (8007268 <xTaskIncrementTick+0x150>)
 800716c:	6013      	str	r3, [r2, #0]
 800716e:	4a3f      	ldr	r2, [pc, #252]	; (800726c <xTaskIncrementTick+0x154>)
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	6013      	str	r3, [r2, #0]
 8007174:	4b3e      	ldr	r3, [pc, #248]	; (8007270 <xTaskIncrementTick+0x158>)
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	3301      	adds	r3, #1
 800717a:	4a3d      	ldr	r2, [pc, #244]	; (8007270 <xTaskIncrementTick+0x158>)
 800717c:	6013      	str	r3, [r2, #0]
 800717e:	f000 fadb 	bl	8007738 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007182:	4b3c      	ldr	r3, [pc, #240]	; (8007274 <xTaskIncrementTick+0x15c>)
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	693a      	ldr	r2, [r7, #16]
 8007188:	429a      	cmp	r2, r3
 800718a:	d349      	bcc.n	8007220 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800718c:	4b36      	ldr	r3, [pc, #216]	; (8007268 <xTaskIncrementTick+0x150>)
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	2b00      	cmp	r3, #0
 8007194:	d104      	bne.n	80071a0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007196:	4b37      	ldr	r3, [pc, #220]	; (8007274 <xTaskIncrementTick+0x15c>)
 8007198:	f04f 32ff 	mov.w	r2, #4294967295
 800719c:	601a      	str	r2, [r3, #0]
					break;
 800719e:	e03f      	b.n	8007220 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80071a0:	4b31      	ldr	r3, [pc, #196]	; (8007268 <xTaskIncrementTick+0x150>)
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	68db      	ldr	r3, [r3, #12]
 80071a6:	68db      	ldr	r3, [r3, #12]
 80071a8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80071aa:	68bb      	ldr	r3, [r7, #8]
 80071ac:	685b      	ldr	r3, [r3, #4]
 80071ae:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80071b0:	693a      	ldr	r2, [r7, #16]
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	429a      	cmp	r2, r3
 80071b6:	d203      	bcs.n	80071c0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80071b8:	4a2e      	ldr	r2, [pc, #184]	; (8007274 <xTaskIncrementTick+0x15c>)
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80071be:	e02f      	b.n	8007220 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80071c0:	68bb      	ldr	r3, [r7, #8]
 80071c2:	3304      	adds	r3, #4
 80071c4:	4618      	mov	r0, r3
 80071c6:	f7fe ff79 	bl	80060bc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80071ca:	68bb      	ldr	r3, [r7, #8]
 80071cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d004      	beq.n	80071dc <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80071d2:	68bb      	ldr	r3, [r7, #8]
 80071d4:	3318      	adds	r3, #24
 80071d6:	4618      	mov	r0, r3
 80071d8:	f7fe ff70 	bl	80060bc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80071dc:	68bb      	ldr	r3, [r7, #8]
 80071de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071e0:	4b25      	ldr	r3, [pc, #148]	; (8007278 <xTaskIncrementTick+0x160>)
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	429a      	cmp	r2, r3
 80071e6:	d903      	bls.n	80071f0 <xTaskIncrementTick+0xd8>
 80071e8:	68bb      	ldr	r3, [r7, #8]
 80071ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071ec:	4a22      	ldr	r2, [pc, #136]	; (8007278 <xTaskIncrementTick+0x160>)
 80071ee:	6013      	str	r3, [r2, #0]
 80071f0:	68bb      	ldr	r3, [r7, #8]
 80071f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071f4:	4613      	mov	r3, r2
 80071f6:	009b      	lsls	r3, r3, #2
 80071f8:	4413      	add	r3, r2
 80071fa:	009b      	lsls	r3, r3, #2
 80071fc:	4a1f      	ldr	r2, [pc, #124]	; (800727c <xTaskIncrementTick+0x164>)
 80071fe:	441a      	add	r2, r3
 8007200:	68bb      	ldr	r3, [r7, #8]
 8007202:	3304      	adds	r3, #4
 8007204:	4619      	mov	r1, r3
 8007206:	4610      	mov	r0, r2
 8007208:	f7fe fefb 	bl	8006002 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800720c:	68bb      	ldr	r3, [r7, #8]
 800720e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007210:	4b1b      	ldr	r3, [pc, #108]	; (8007280 <xTaskIncrementTick+0x168>)
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007216:	429a      	cmp	r2, r3
 8007218:	d3b8      	bcc.n	800718c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800721a:	2301      	movs	r3, #1
 800721c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800721e:	e7b5      	b.n	800718c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007220:	4b17      	ldr	r3, [pc, #92]	; (8007280 <xTaskIncrementTick+0x168>)
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007226:	4915      	ldr	r1, [pc, #84]	; (800727c <xTaskIncrementTick+0x164>)
 8007228:	4613      	mov	r3, r2
 800722a:	009b      	lsls	r3, r3, #2
 800722c:	4413      	add	r3, r2
 800722e:	009b      	lsls	r3, r3, #2
 8007230:	440b      	add	r3, r1
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	2b01      	cmp	r3, #1
 8007236:	d901      	bls.n	800723c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8007238:	2301      	movs	r3, #1
 800723a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800723c:	4b11      	ldr	r3, [pc, #68]	; (8007284 <xTaskIncrementTick+0x16c>)
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	2b00      	cmp	r3, #0
 8007242:	d007      	beq.n	8007254 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8007244:	2301      	movs	r3, #1
 8007246:	617b      	str	r3, [r7, #20]
 8007248:	e004      	b.n	8007254 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800724a:	4b0f      	ldr	r3, [pc, #60]	; (8007288 <xTaskIncrementTick+0x170>)
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	3301      	adds	r3, #1
 8007250:	4a0d      	ldr	r2, [pc, #52]	; (8007288 <xTaskIncrementTick+0x170>)
 8007252:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007254:	697b      	ldr	r3, [r7, #20]
}
 8007256:	4618      	mov	r0, r3
 8007258:	3718      	adds	r7, #24
 800725a:	46bd      	mov	sp, r7
 800725c:	bd80      	pop	{r7, pc}
 800725e:	bf00      	nop
 8007260:	24000fe0 	.word	0x24000fe0
 8007264:	24000fbc 	.word	0x24000fbc
 8007268:	24000f70 	.word	0x24000f70
 800726c:	24000f74 	.word	0x24000f74
 8007270:	24000fd0 	.word	0x24000fd0
 8007274:	24000fd8 	.word	0x24000fd8
 8007278:	24000fc0 	.word	0x24000fc0
 800727c:	24000ae8 	.word	0x24000ae8
 8007280:	24000ae4 	.word	0x24000ae4
 8007284:	24000fcc 	.word	0x24000fcc
 8007288:	24000fc8 	.word	0x24000fc8

0800728c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800728c:	b480      	push	{r7}
 800728e:	b085      	sub	sp, #20
 8007290:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007292:	4b2a      	ldr	r3, [pc, #168]	; (800733c <vTaskSwitchContext+0xb0>)
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	2b00      	cmp	r3, #0
 8007298:	d003      	beq.n	80072a2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800729a:	4b29      	ldr	r3, [pc, #164]	; (8007340 <vTaskSwitchContext+0xb4>)
 800729c:	2201      	movs	r2, #1
 800729e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80072a0:	e046      	b.n	8007330 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 80072a2:	4b27      	ldr	r3, [pc, #156]	; (8007340 <vTaskSwitchContext+0xb4>)
 80072a4:	2200      	movs	r2, #0
 80072a6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80072a8:	4b26      	ldr	r3, [pc, #152]	; (8007344 <vTaskSwitchContext+0xb8>)
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	60fb      	str	r3, [r7, #12]
 80072ae:	e010      	b.n	80072d2 <vTaskSwitchContext+0x46>
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d10a      	bne.n	80072cc <vTaskSwitchContext+0x40>
	__asm volatile
 80072b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072ba:	f383 8811 	msr	BASEPRI, r3
 80072be:	f3bf 8f6f 	isb	sy
 80072c2:	f3bf 8f4f 	dsb	sy
 80072c6:	607b      	str	r3, [r7, #4]
}
 80072c8:	bf00      	nop
 80072ca:	e7fe      	b.n	80072ca <vTaskSwitchContext+0x3e>
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	3b01      	subs	r3, #1
 80072d0:	60fb      	str	r3, [r7, #12]
 80072d2:	491d      	ldr	r1, [pc, #116]	; (8007348 <vTaskSwitchContext+0xbc>)
 80072d4:	68fa      	ldr	r2, [r7, #12]
 80072d6:	4613      	mov	r3, r2
 80072d8:	009b      	lsls	r3, r3, #2
 80072da:	4413      	add	r3, r2
 80072dc:	009b      	lsls	r3, r3, #2
 80072de:	440b      	add	r3, r1
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d0e4      	beq.n	80072b0 <vTaskSwitchContext+0x24>
 80072e6:	68fa      	ldr	r2, [r7, #12]
 80072e8:	4613      	mov	r3, r2
 80072ea:	009b      	lsls	r3, r3, #2
 80072ec:	4413      	add	r3, r2
 80072ee:	009b      	lsls	r3, r3, #2
 80072f0:	4a15      	ldr	r2, [pc, #84]	; (8007348 <vTaskSwitchContext+0xbc>)
 80072f2:	4413      	add	r3, r2
 80072f4:	60bb      	str	r3, [r7, #8]
 80072f6:	68bb      	ldr	r3, [r7, #8]
 80072f8:	685b      	ldr	r3, [r3, #4]
 80072fa:	685a      	ldr	r2, [r3, #4]
 80072fc:	68bb      	ldr	r3, [r7, #8]
 80072fe:	605a      	str	r2, [r3, #4]
 8007300:	68bb      	ldr	r3, [r7, #8]
 8007302:	685a      	ldr	r2, [r3, #4]
 8007304:	68bb      	ldr	r3, [r7, #8]
 8007306:	3308      	adds	r3, #8
 8007308:	429a      	cmp	r2, r3
 800730a:	d104      	bne.n	8007316 <vTaskSwitchContext+0x8a>
 800730c:	68bb      	ldr	r3, [r7, #8]
 800730e:	685b      	ldr	r3, [r3, #4]
 8007310:	685a      	ldr	r2, [r3, #4]
 8007312:	68bb      	ldr	r3, [r7, #8]
 8007314:	605a      	str	r2, [r3, #4]
 8007316:	68bb      	ldr	r3, [r7, #8]
 8007318:	685b      	ldr	r3, [r3, #4]
 800731a:	68db      	ldr	r3, [r3, #12]
 800731c:	4a0b      	ldr	r2, [pc, #44]	; (800734c <vTaskSwitchContext+0xc0>)
 800731e:	6013      	str	r3, [r2, #0]
 8007320:	4a08      	ldr	r2, [pc, #32]	; (8007344 <vTaskSwitchContext+0xb8>)
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007326:	4b09      	ldr	r3, [pc, #36]	; (800734c <vTaskSwitchContext+0xc0>)
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	3354      	adds	r3, #84	; 0x54
 800732c:	4a08      	ldr	r2, [pc, #32]	; (8007350 <vTaskSwitchContext+0xc4>)
 800732e:	6013      	str	r3, [r2, #0]
}
 8007330:	bf00      	nop
 8007332:	3714      	adds	r7, #20
 8007334:	46bd      	mov	sp, r7
 8007336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800733a:	4770      	bx	lr
 800733c:	24000fe0 	.word	0x24000fe0
 8007340:	24000fcc 	.word	0x24000fcc
 8007344:	24000fc0 	.word	0x24000fc0
 8007348:	24000ae8 	.word	0x24000ae8
 800734c:	24000ae4 	.word	0x24000ae4
 8007350:	24000014 	.word	0x24000014

08007354 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007354:	b580      	push	{r7, lr}
 8007356:	b084      	sub	sp, #16
 8007358:	af00      	add	r7, sp, #0
 800735a:	6078      	str	r0, [r7, #4]
 800735c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	2b00      	cmp	r3, #0
 8007362:	d10a      	bne.n	800737a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8007364:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007368:	f383 8811 	msr	BASEPRI, r3
 800736c:	f3bf 8f6f 	isb	sy
 8007370:	f3bf 8f4f 	dsb	sy
 8007374:	60fb      	str	r3, [r7, #12]
}
 8007376:	bf00      	nop
 8007378:	e7fe      	b.n	8007378 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800737a:	4b07      	ldr	r3, [pc, #28]	; (8007398 <vTaskPlaceOnEventList+0x44>)
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	3318      	adds	r3, #24
 8007380:	4619      	mov	r1, r3
 8007382:	6878      	ldr	r0, [r7, #4]
 8007384:	f7fe fe61 	bl	800604a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007388:	2101      	movs	r1, #1
 800738a:	6838      	ldr	r0, [r7, #0]
 800738c:	f000 fa80 	bl	8007890 <prvAddCurrentTaskToDelayedList>
}
 8007390:	bf00      	nop
 8007392:	3710      	adds	r7, #16
 8007394:	46bd      	mov	sp, r7
 8007396:	bd80      	pop	{r7, pc}
 8007398:	24000ae4 	.word	0x24000ae4

0800739c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800739c:	b580      	push	{r7, lr}
 800739e:	b086      	sub	sp, #24
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	60f8      	str	r0, [r7, #12]
 80073a4:	60b9      	str	r1, [r7, #8]
 80073a6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d10a      	bne.n	80073c4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80073ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073b2:	f383 8811 	msr	BASEPRI, r3
 80073b6:	f3bf 8f6f 	isb	sy
 80073ba:	f3bf 8f4f 	dsb	sy
 80073be:	617b      	str	r3, [r7, #20]
}
 80073c0:	bf00      	nop
 80073c2:	e7fe      	b.n	80073c2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80073c4:	4b0a      	ldr	r3, [pc, #40]	; (80073f0 <vTaskPlaceOnEventListRestricted+0x54>)
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	3318      	adds	r3, #24
 80073ca:	4619      	mov	r1, r3
 80073cc:	68f8      	ldr	r0, [r7, #12]
 80073ce:	f7fe fe18 	bl	8006002 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d002      	beq.n	80073de <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80073d8:	f04f 33ff 	mov.w	r3, #4294967295
 80073dc:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80073de:	6879      	ldr	r1, [r7, #4]
 80073e0:	68b8      	ldr	r0, [r7, #8]
 80073e2:	f000 fa55 	bl	8007890 <prvAddCurrentTaskToDelayedList>
	}
 80073e6:	bf00      	nop
 80073e8:	3718      	adds	r7, #24
 80073ea:	46bd      	mov	sp, r7
 80073ec:	bd80      	pop	{r7, pc}
 80073ee:	bf00      	nop
 80073f0:	24000ae4 	.word	0x24000ae4

080073f4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80073f4:	b580      	push	{r7, lr}
 80073f6:	b086      	sub	sp, #24
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	68db      	ldr	r3, [r3, #12]
 8007400:	68db      	ldr	r3, [r3, #12]
 8007402:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007404:	693b      	ldr	r3, [r7, #16]
 8007406:	2b00      	cmp	r3, #0
 8007408:	d10a      	bne.n	8007420 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800740a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800740e:	f383 8811 	msr	BASEPRI, r3
 8007412:	f3bf 8f6f 	isb	sy
 8007416:	f3bf 8f4f 	dsb	sy
 800741a:	60fb      	str	r3, [r7, #12]
}
 800741c:	bf00      	nop
 800741e:	e7fe      	b.n	800741e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007420:	693b      	ldr	r3, [r7, #16]
 8007422:	3318      	adds	r3, #24
 8007424:	4618      	mov	r0, r3
 8007426:	f7fe fe49 	bl	80060bc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800742a:	4b1e      	ldr	r3, [pc, #120]	; (80074a4 <xTaskRemoveFromEventList+0xb0>)
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	2b00      	cmp	r3, #0
 8007430:	d11d      	bne.n	800746e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007432:	693b      	ldr	r3, [r7, #16]
 8007434:	3304      	adds	r3, #4
 8007436:	4618      	mov	r0, r3
 8007438:	f7fe fe40 	bl	80060bc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800743c:	693b      	ldr	r3, [r7, #16]
 800743e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007440:	4b19      	ldr	r3, [pc, #100]	; (80074a8 <xTaskRemoveFromEventList+0xb4>)
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	429a      	cmp	r2, r3
 8007446:	d903      	bls.n	8007450 <xTaskRemoveFromEventList+0x5c>
 8007448:	693b      	ldr	r3, [r7, #16]
 800744a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800744c:	4a16      	ldr	r2, [pc, #88]	; (80074a8 <xTaskRemoveFromEventList+0xb4>)
 800744e:	6013      	str	r3, [r2, #0]
 8007450:	693b      	ldr	r3, [r7, #16]
 8007452:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007454:	4613      	mov	r3, r2
 8007456:	009b      	lsls	r3, r3, #2
 8007458:	4413      	add	r3, r2
 800745a:	009b      	lsls	r3, r3, #2
 800745c:	4a13      	ldr	r2, [pc, #76]	; (80074ac <xTaskRemoveFromEventList+0xb8>)
 800745e:	441a      	add	r2, r3
 8007460:	693b      	ldr	r3, [r7, #16]
 8007462:	3304      	adds	r3, #4
 8007464:	4619      	mov	r1, r3
 8007466:	4610      	mov	r0, r2
 8007468:	f7fe fdcb 	bl	8006002 <vListInsertEnd>
 800746c:	e005      	b.n	800747a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800746e:	693b      	ldr	r3, [r7, #16]
 8007470:	3318      	adds	r3, #24
 8007472:	4619      	mov	r1, r3
 8007474:	480e      	ldr	r0, [pc, #56]	; (80074b0 <xTaskRemoveFromEventList+0xbc>)
 8007476:	f7fe fdc4 	bl	8006002 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800747a:	693b      	ldr	r3, [r7, #16]
 800747c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800747e:	4b0d      	ldr	r3, [pc, #52]	; (80074b4 <xTaskRemoveFromEventList+0xc0>)
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007484:	429a      	cmp	r2, r3
 8007486:	d905      	bls.n	8007494 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007488:	2301      	movs	r3, #1
 800748a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800748c:	4b0a      	ldr	r3, [pc, #40]	; (80074b8 <xTaskRemoveFromEventList+0xc4>)
 800748e:	2201      	movs	r2, #1
 8007490:	601a      	str	r2, [r3, #0]
 8007492:	e001      	b.n	8007498 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8007494:	2300      	movs	r3, #0
 8007496:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007498:	697b      	ldr	r3, [r7, #20]
}
 800749a:	4618      	mov	r0, r3
 800749c:	3718      	adds	r7, #24
 800749e:	46bd      	mov	sp, r7
 80074a0:	bd80      	pop	{r7, pc}
 80074a2:	bf00      	nop
 80074a4:	24000fe0 	.word	0x24000fe0
 80074a8:	24000fc0 	.word	0x24000fc0
 80074ac:	24000ae8 	.word	0x24000ae8
 80074b0:	24000f78 	.word	0x24000f78
 80074b4:	24000ae4 	.word	0x24000ae4
 80074b8:	24000fcc 	.word	0x24000fcc

080074bc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80074bc:	b480      	push	{r7}
 80074be:	b083      	sub	sp, #12
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80074c4:	4b06      	ldr	r3, [pc, #24]	; (80074e0 <vTaskInternalSetTimeOutState+0x24>)
 80074c6:	681a      	ldr	r2, [r3, #0]
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80074cc:	4b05      	ldr	r3, [pc, #20]	; (80074e4 <vTaskInternalSetTimeOutState+0x28>)
 80074ce:	681a      	ldr	r2, [r3, #0]
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	605a      	str	r2, [r3, #4]
}
 80074d4:	bf00      	nop
 80074d6:	370c      	adds	r7, #12
 80074d8:	46bd      	mov	sp, r7
 80074da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074de:	4770      	bx	lr
 80074e0:	24000fd0 	.word	0x24000fd0
 80074e4:	24000fbc 	.word	0x24000fbc

080074e8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80074e8:	b580      	push	{r7, lr}
 80074ea:	b088      	sub	sp, #32
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	6078      	str	r0, [r7, #4]
 80074f0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d10a      	bne.n	800750e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80074f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074fc:	f383 8811 	msr	BASEPRI, r3
 8007500:	f3bf 8f6f 	isb	sy
 8007504:	f3bf 8f4f 	dsb	sy
 8007508:	613b      	str	r3, [r7, #16]
}
 800750a:	bf00      	nop
 800750c:	e7fe      	b.n	800750c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800750e:	683b      	ldr	r3, [r7, #0]
 8007510:	2b00      	cmp	r3, #0
 8007512:	d10a      	bne.n	800752a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8007514:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007518:	f383 8811 	msr	BASEPRI, r3
 800751c:	f3bf 8f6f 	isb	sy
 8007520:	f3bf 8f4f 	dsb	sy
 8007524:	60fb      	str	r3, [r7, #12]
}
 8007526:	bf00      	nop
 8007528:	e7fe      	b.n	8007528 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800752a:	f000 fe83 	bl	8008234 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800752e:	4b1d      	ldr	r3, [pc, #116]	; (80075a4 <xTaskCheckForTimeOut+0xbc>)
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	685b      	ldr	r3, [r3, #4]
 8007538:	69ba      	ldr	r2, [r7, #24]
 800753a:	1ad3      	subs	r3, r2, r3
 800753c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800753e:	683b      	ldr	r3, [r7, #0]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007546:	d102      	bne.n	800754e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007548:	2300      	movs	r3, #0
 800754a:	61fb      	str	r3, [r7, #28]
 800754c:	e023      	b.n	8007596 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681a      	ldr	r2, [r3, #0]
 8007552:	4b15      	ldr	r3, [pc, #84]	; (80075a8 <xTaskCheckForTimeOut+0xc0>)
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	429a      	cmp	r2, r3
 8007558:	d007      	beq.n	800756a <xTaskCheckForTimeOut+0x82>
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	685b      	ldr	r3, [r3, #4]
 800755e:	69ba      	ldr	r2, [r7, #24]
 8007560:	429a      	cmp	r2, r3
 8007562:	d302      	bcc.n	800756a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007564:	2301      	movs	r3, #1
 8007566:	61fb      	str	r3, [r7, #28]
 8007568:	e015      	b.n	8007596 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800756a:	683b      	ldr	r3, [r7, #0]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	697a      	ldr	r2, [r7, #20]
 8007570:	429a      	cmp	r2, r3
 8007572:	d20b      	bcs.n	800758c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007574:	683b      	ldr	r3, [r7, #0]
 8007576:	681a      	ldr	r2, [r3, #0]
 8007578:	697b      	ldr	r3, [r7, #20]
 800757a:	1ad2      	subs	r2, r2, r3
 800757c:	683b      	ldr	r3, [r7, #0]
 800757e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007580:	6878      	ldr	r0, [r7, #4]
 8007582:	f7ff ff9b 	bl	80074bc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007586:	2300      	movs	r3, #0
 8007588:	61fb      	str	r3, [r7, #28]
 800758a:	e004      	b.n	8007596 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800758c:	683b      	ldr	r3, [r7, #0]
 800758e:	2200      	movs	r2, #0
 8007590:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007592:	2301      	movs	r3, #1
 8007594:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007596:	f000 fe7d 	bl	8008294 <vPortExitCritical>

	return xReturn;
 800759a:	69fb      	ldr	r3, [r7, #28]
}
 800759c:	4618      	mov	r0, r3
 800759e:	3720      	adds	r7, #32
 80075a0:	46bd      	mov	sp, r7
 80075a2:	bd80      	pop	{r7, pc}
 80075a4:	24000fbc 	.word	0x24000fbc
 80075a8:	24000fd0 	.word	0x24000fd0

080075ac <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80075ac:	b480      	push	{r7}
 80075ae:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80075b0:	4b03      	ldr	r3, [pc, #12]	; (80075c0 <vTaskMissedYield+0x14>)
 80075b2:	2201      	movs	r2, #1
 80075b4:	601a      	str	r2, [r3, #0]
}
 80075b6:	bf00      	nop
 80075b8:	46bd      	mov	sp, r7
 80075ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075be:	4770      	bx	lr
 80075c0:	24000fcc 	.word	0x24000fcc

080075c4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80075c4:	b580      	push	{r7, lr}
 80075c6:	b082      	sub	sp, #8
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80075cc:	f000 f852 	bl	8007674 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80075d0:	4b06      	ldr	r3, [pc, #24]	; (80075ec <prvIdleTask+0x28>)
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	2b01      	cmp	r3, #1
 80075d6:	d9f9      	bls.n	80075cc <prvIdleTask+0x8>
			{
				taskYIELD();
 80075d8:	4b05      	ldr	r3, [pc, #20]	; (80075f0 <prvIdleTask+0x2c>)
 80075da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80075de:	601a      	str	r2, [r3, #0]
 80075e0:	f3bf 8f4f 	dsb	sy
 80075e4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80075e8:	e7f0      	b.n	80075cc <prvIdleTask+0x8>
 80075ea:	bf00      	nop
 80075ec:	24000ae8 	.word	0x24000ae8
 80075f0:	e000ed04 	.word	0xe000ed04

080075f4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80075f4:	b580      	push	{r7, lr}
 80075f6:	b082      	sub	sp, #8
 80075f8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80075fa:	2300      	movs	r3, #0
 80075fc:	607b      	str	r3, [r7, #4]
 80075fe:	e00c      	b.n	800761a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007600:	687a      	ldr	r2, [r7, #4]
 8007602:	4613      	mov	r3, r2
 8007604:	009b      	lsls	r3, r3, #2
 8007606:	4413      	add	r3, r2
 8007608:	009b      	lsls	r3, r3, #2
 800760a:	4a12      	ldr	r2, [pc, #72]	; (8007654 <prvInitialiseTaskLists+0x60>)
 800760c:	4413      	add	r3, r2
 800760e:	4618      	mov	r0, r3
 8007610:	f7fe fcca 	bl	8005fa8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	3301      	adds	r3, #1
 8007618:	607b      	str	r3, [r7, #4]
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	2b37      	cmp	r3, #55	; 0x37
 800761e:	d9ef      	bls.n	8007600 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007620:	480d      	ldr	r0, [pc, #52]	; (8007658 <prvInitialiseTaskLists+0x64>)
 8007622:	f7fe fcc1 	bl	8005fa8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007626:	480d      	ldr	r0, [pc, #52]	; (800765c <prvInitialiseTaskLists+0x68>)
 8007628:	f7fe fcbe 	bl	8005fa8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800762c:	480c      	ldr	r0, [pc, #48]	; (8007660 <prvInitialiseTaskLists+0x6c>)
 800762e:	f7fe fcbb 	bl	8005fa8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007632:	480c      	ldr	r0, [pc, #48]	; (8007664 <prvInitialiseTaskLists+0x70>)
 8007634:	f7fe fcb8 	bl	8005fa8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007638:	480b      	ldr	r0, [pc, #44]	; (8007668 <prvInitialiseTaskLists+0x74>)
 800763a:	f7fe fcb5 	bl	8005fa8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800763e:	4b0b      	ldr	r3, [pc, #44]	; (800766c <prvInitialiseTaskLists+0x78>)
 8007640:	4a05      	ldr	r2, [pc, #20]	; (8007658 <prvInitialiseTaskLists+0x64>)
 8007642:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007644:	4b0a      	ldr	r3, [pc, #40]	; (8007670 <prvInitialiseTaskLists+0x7c>)
 8007646:	4a05      	ldr	r2, [pc, #20]	; (800765c <prvInitialiseTaskLists+0x68>)
 8007648:	601a      	str	r2, [r3, #0]
}
 800764a:	bf00      	nop
 800764c:	3708      	adds	r7, #8
 800764e:	46bd      	mov	sp, r7
 8007650:	bd80      	pop	{r7, pc}
 8007652:	bf00      	nop
 8007654:	24000ae8 	.word	0x24000ae8
 8007658:	24000f48 	.word	0x24000f48
 800765c:	24000f5c 	.word	0x24000f5c
 8007660:	24000f78 	.word	0x24000f78
 8007664:	24000f8c 	.word	0x24000f8c
 8007668:	24000fa4 	.word	0x24000fa4
 800766c:	24000f70 	.word	0x24000f70
 8007670:	24000f74 	.word	0x24000f74

08007674 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007674:	b580      	push	{r7, lr}
 8007676:	b082      	sub	sp, #8
 8007678:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800767a:	e019      	b.n	80076b0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800767c:	f000 fdda 	bl	8008234 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007680:	4b10      	ldr	r3, [pc, #64]	; (80076c4 <prvCheckTasksWaitingTermination+0x50>)
 8007682:	68db      	ldr	r3, [r3, #12]
 8007684:	68db      	ldr	r3, [r3, #12]
 8007686:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	3304      	adds	r3, #4
 800768c:	4618      	mov	r0, r3
 800768e:	f7fe fd15 	bl	80060bc <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007692:	4b0d      	ldr	r3, [pc, #52]	; (80076c8 <prvCheckTasksWaitingTermination+0x54>)
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	3b01      	subs	r3, #1
 8007698:	4a0b      	ldr	r2, [pc, #44]	; (80076c8 <prvCheckTasksWaitingTermination+0x54>)
 800769a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800769c:	4b0b      	ldr	r3, [pc, #44]	; (80076cc <prvCheckTasksWaitingTermination+0x58>)
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	3b01      	subs	r3, #1
 80076a2:	4a0a      	ldr	r2, [pc, #40]	; (80076cc <prvCheckTasksWaitingTermination+0x58>)
 80076a4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80076a6:	f000 fdf5 	bl	8008294 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80076aa:	6878      	ldr	r0, [r7, #4]
 80076ac:	f000 f810 	bl	80076d0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80076b0:	4b06      	ldr	r3, [pc, #24]	; (80076cc <prvCheckTasksWaitingTermination+0x58>)
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d1e1      	bne.n	800767c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80076b8:	bf00      	nop
 80076ba:	bf00      	nop
 80076bc:	3708      	adds	r7, #8
 80076be:	46bd      	mov	sp, r7
 80076c0:	bd80      	pop	{r7, pc}
 80076c2:	bf00      	nop
 80076c4:	24000f8c 	.word	0x24000f8c
 80076c8:	24000fb8 	.word	0x24000fb8
 80076cc:	24000fa0 	.word	0x24000fa0

080076d0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80076d0:	b580      	push	{r7, lr}
 80076d2:	b084      	sub	sp, #16
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	3354      	adds	r3, #84	; 0x54
 80076dc:	4618      	mov	r0, r3
 80076de:	f001 f8ff 	bl	80088e0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d108      	bne.n	80076fe <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076f0:	4618      	mov	r0, r3
 80076f2:	f000 ff8d 	bl	8008610 <vPortFree>
				vPortFree( pxTCB );
 80076f6:	6878      	ldr	r0, [r7, #4]
 80076f8:	f000 ff8a 	bl	8008610 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80076fc:	e018      	b.n	8007730 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8007704:	2b01      	cmp	r3, #1
 8007706:	d103      	bne.n	8007710 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8007708:	6878      	ldr	r0, [r7, #4]
 800770a:	f000 ff81 	bl	8008610 <vPortFree>
	}
 800770e:	e00f      	b.n	8007730 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8007716:	2b02      	cmp	r3, #2
 8007718:	d00a      	beq.n	8007730 <prvDeleteTCB+0x60>
	__asm volatile
 800771a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800771e:	f383 8811 	msr	BASEPRI, r3
 8007722:	f3bf 8f6f 	isb	sy
 8007726:	f3bf 8f4f 	dsb	sy
 800772a:	60fb      	str	r3, [r7, #12]
}
 800772c:	bf00      	nop
 800772e:	e7fe      	b.n	800772e <prvDeleteTCB+0x5e>
	}
 8007730:	bf00      	nop
 8007732:	3710      	adds	r7, #16
 8007734:	46bd      	mov	sp, r7
 8007736:	bd80      	pop	{r7, pc}

08007738 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007738:	b480      	push	{r7}
 800773a:	b083      	sub	sp, #12
 800773c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800773e:	4b0c      	ldr	r3, [pc, #48]	; (8007770 <prvResetNextTaskUnblockTime+0x38>)
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	2b00      	cmp	r3, #0
 8007746:	d104      	bne.n	8007752 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007748:	4b0a      	ldr	r3, [pc, #40]	; (8007774 <prvResetNextTaskUnblockTime+0x3c>)
 800774a:	f04f 32ff 	mov.w	r2, #4294967295
 800774e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007750:	e008      	b.n	8007764 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007752:	4b07      	ldr	r3, [pc, #28]	; (8007770 <prvResetNextTaskUnblockTime+0x38>)
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	68db      	ldr	r3, [r3, #12]
 8007758:	68db      	ldr	r3, [r3, #12]
 800775a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	685b      	ldr	r3, [r3, #4]
 8007760:	4a04      	ldr	r2, [pc, #16]	; (8007774 <prvResetNextTaskUnblockTime+0x3c>)
 8007762:	6013      	str	r3, [r2, #0]
}
 8007764:	bf00      	nop
 8007766:	370c      	adds	r7, #12
 8007768:	46bd      	mov	sp, r7
 800776a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800776e:	4770      	bx	lr
 8007770:	24000f70 	.word	0x24000f70
 8007774:	24000fd8 	.word	0x24000fd8

08007778 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007778:	b480      	push	{r7}
 800777a:	b083      	sub	sp, #12
 800777c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800777e:	4b0b      	ldr	r3, [pc, #44]	; (80077ac <xTaskGetSchedulerState+0x34>)
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	2b00      	cmp	r3, #0
 8007784:	d102      	bne.n	800778c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007786:	2301      	movs	r3, #1
 8007788:	607b      	str	r3, [r7, #4]
 800778a:	e008      	b.n	800779e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800778c:	4b08      	ldr	r3, [pc, #32]	; (80077b0 <xTaskGetSchedulerState+0x38>)
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	2b00      	cmp	r3, #0
 8007792:	d102      	bne.n	800779a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007794:	2302      	movs	r3, #2
 8007796:	607b      	str	r3, [r7, #4]
 8007798:	e001      	b.n	800779e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800779a:	2300      	movs	r3, #0
 800779c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800779e:	687b      	ldr	r3, [r7, #4]
	}
 80077a0:	4618      	mov	r0, r3
 80077a2:	370c      	adds	r7, #12
 80077a4:	46bd      	mov	sp, r7
 80077a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077aa:	4770      	bx	lr
 80077ac:	24000fc4 	.word	0x24000fc4
 80077b0:	24000fe0 	.word	0x24000fe0

080077b4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80077b4:	b580      	push	{r7, lr}
 80077b6:	b086      	sub	sp, #24
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80077c0:	2300      	movs	r3, #0
 80077c2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d056      	beq.n	8007878 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80077ca:	4b2e      	ldr	r3, [pc, #184]	; (8007884 <xTaskPriorityDisinherit+0xd0>)
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	693a      	ldr	r2, [r7, #16]
 80077d0:	429a      	cmp	r2, r3
 80077d2:	d00a      	beq.n	80077ea <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80077d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077d8:	f383 8811 	msr	BASEPRI, r3
 80077dc:	f3bf 8f6f 	isb	sy
 80077e0:	f3bf 8f4f 	dsb	sy
 80077e4:	60fb      	str	r3, [r7, #12]
}
 80077e6:	bf00      	nop
 80077e8:	e7fe      	b.n	80077e8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80077ea:	693b      	ldr	r3, [r7, #16]
 80077ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d10a      	bne.n	8007808 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80077f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077f6:	f383 8811 	msr	BASEPRI, r3
 80077fa:	f3bf 8f6f 	isb	sy
 80077fe:	f3bf 8f4f 	dsb	sy
 8007802:	60bb      	str	r3, [r7, #8]
}
 8007804:	bf00      	nop
 8007806:	e7fe      	b.n	8007806 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8007808:	693b      	ldr	r3, [r7, #16]
 800780a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800780c:	1e5a      	subs	r2, r3, #1
 800780e:	693b      	ldr	r3, [r7, #16]
 8007810:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007812:	693b      	ldr	r3, [r7, #16]
 8007814:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007816:	693b      	ldr	r3, [r7, #16]
 8007818:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800781a:	429a      	cmp	r2, r3
 800781c:	d02c      	beq.n	8007878 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800781e:	693b      	ldr	r3, [r7, #16]
 8007820:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007822:	2b00      	cmp	r3, #0
 8007824:	d128      	bne.n	8007878 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007826:	693b      	ldr	r3, [r7, #16]
 8007828:	3304      	adds	r3, #4
 800782a:	4618      	mov	r0, r3
 800782c:	f7fe fc46 	bl	80060bc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007830:	693b      	ldr	r3, [r7, #16]
 8007832:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007834:	693b      	ldr	r3, [r7, #16]
 8007836:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007838:	693b      	ldr	r3, [r7, #16]
 800783a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800783c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007840:	693b      	ldr	r3, [r7, #16]
 8007842:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007844:	693b      	ldr	r3, [r7, #16]
 8007846:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007848:	4b0f      	ldr	r3, [pc, #60]	; (8007888 <xTaskPriorityDisinherit+0xd4>)
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	429a      	cmp	r2, r3
 800784e:	d903      	bls.n	8007858 <xTaskPriorityDisinherit+0xa4>
 8007850:	693b      	ldr	r3, [r7, #16]
 8007852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007854:	4a0c      	ldr	r2, [pc, #48]	; (8007888 <xTaskPriorityDisinherit+0xd4>)
 8007856:	6013      	str	r3, [r2, #0]
 8007858:	693b      	ldr	r3, [r7, #16]
 800785a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800785c:	4613      	mov	r3, r2
 800785e:	009b      	lsls	r3, r3, #2
 8007860:	4413      	add	r3, r2
 8007862:	009b      	lsls	r3, r3, #2
 8007864:	4a09      	ldr	r2, [pc, #36]	; (800788c <xTaskPriorityDisinherit+0xd8>)
 8007866:	441a      	add	r2, r3
 8007868:	693b      	ldr	r3, [r7, #16]
 800786a:	3304      	adds	r3, #4
 800786c:	4619      	mov	r1, r3
 800786e:	4610      	mov	r0, r2
 8007870:	f7fe fbc7 	bl	8006002 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007874:	2301      	movs	r3, #1
 8007876:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007878:	697b      	ldr	r3, [r7, #20]
	}
 800787a:	4618      	mov	r0, r3
 800787c:	3718      	adds	r7, #24
 800787e:	46bd      	mov	sp, r7
 8007880:	bd80      	pop	{r7, pc}
 8007882:	bf00      	nop
 8007884:	24000ae4 	.word	0x24000ae4
 8007888:	24000fc0 	.word	0x24000fc0
 800788c:	24000ae8 	.word	0x24000ae8

08007890 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007890:	b580      	push	{r7, lr}
 8007892:	b084      	sub	sp, #16
 8007894:	af00      	add	r7, sp, #0
 8007896:	6078      	str	r0, [r7, #4]
 8007898:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800789a:	4b21      	ldr	r3, [pc, #132]	; (8007920 <prvAddCurrentTaskToDelayedList+0x90>)
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80078a0:	4b20      	ldr	r3, [pc, #128]	; (8007924 <prvAddCurrentTaskToDelayedList+0x94>)
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	3304      	adds	r3, #4
 80078a6:	4618      	mov	r0, r3
 80078a8:	f7fe fc08 	bl	80060bc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078b2:	d10a      	bne.n	80078ca <prvAddCurrentTaskToDelayedList+0x3a>
 80078b4:	683b      	ldr	r3, [r7, #0]
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d007      	beq.n	80078ca <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80078ba:	4b1a      	ldr	r3, [pc, #104]	; (8007924 <prvAddCurrentTaskToDelayedList+0x94>)
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	3304      	adds	r3, #4
 80078c0:	4619      	mov	r1, r3
 80078c2:	4819      	ldr	r0, [pc, #100]	; (8007928 <prvAddCurrentTaskToDelayedList+0x98>)
 80078c4:	f7fe fb9d 	bl	8006002 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80078c8:	e026      	b.n	8007918 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80078ca:	68fa      	ldr	r2, [r7, #12]
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	4413      	add	r3, r2
 80078d0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80078d2:	4b14      	ldr	r3, [pc, #80]	; (8007924 <prvAddCurrentTaskToDelayedList+0x94>)
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	68ba      	ldr	r2, [r7, #8]
 80078d8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80078da:	68ba      	ldr	r2, [r7, #8]
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	429a      	cmp	r2, r3
 80078e0:	d209      	bcs.n	80078f6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80078e2:	4b12      	ldr	r3, [pc, #72]	; (800792c <prvAddCurrentTaskToDelayedList+0x9c>)
 80078e4:	681a      	ldr	r2, [r3, #0]
 80078e6:	4b0f      	ldr	r3, [pc, #60]	; (8007924 <prvAddCurrentTaskToDelayedList+0x94>)
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	3304      	adds	r3, #4
 80078ec:	4619      	mov	r1, r3
 80078ee:	4610      	mov	r0, r2
 80078f0:	f7fe fbab 	bl	800604a <vListInsert>
}
 80078f4:	e010      	b.n	8007918 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80078f6:	4b0e      	ldr	r3, [pc, #56]	; (8007930 <prvAddCurrentTaskToDelayedList+0xa0>)
 80078f8:	681a      	ldr	r2, [r3, #0]
 80078fa:	4b0a      	ldr	r3, [pc, #40]	; (8007924 <prvAddCurrentTaskToDelayedList+0x94>)
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	3304      	adds	r3, #4
 8007900:	4619      	mov	r1, r3
 8007902:	4610      	mov	r0, r2
 8007904:	f7fe fba1 	bl	800604a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007908:	4b0a      	ldr	r3, [pc, #40]	; (8007934 <prvAddCurrentTaskToDelayedList+0xa4>)
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	68ba      	ldr	r2, [r7, #8]
 800790e:	429a      	cmp	r2, r3
 8007910:	d202      	bcs.n	8007918 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007912:	4a08      	ldr	r2, [pc, #32]	; (8007934 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007914:	68bb      	ldr	r3, [r7, #8]
 8007916:	6013      	str	r3, [r2, #0]
}
 8007918:	bf00      	nop
 800791a:	3710      	adds	r7, #16
 800791c:	46bd      	mov	sp, r7
 800791e:	bd80      	pop	{r7, pc}
 8007920:	24000fbc 	.word	0x24000fbc
 8007924:	24000ae4 	.word	0x24000ae4
 8007928:	24000fa4 	.word	0x24000fa4
 800792c:	24000f74 	.word	0x24000f74
 8007930:	24000f70 	.word	0x24000f70
 8007934:	24000fd8 	.word	0x24000fd8

08007938 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007938:	b580      	push	{r7, lr}
 800793a:	b08a      	sub	sp, #40	; 0x28
 800793c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800793e:	2300      	movs	r3, #0
 8007940:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007942:	f000 fb07 	bl	8007f54 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007946:	4b1c      	ldr	r3, [pc, #112]	; (80079b8 <xTimerCreateTimerTask+0x80>)
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	2b00      	cmp	r3, #0
 800794c:	d021      	beq.n	8007992 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800794e:	2300      	movs	r3, #0
 8007950:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007952:	2300      	movs	r3, #0
 8007954:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007956:	1d3a      	adds	r2, r7, #4
 8007958:	f107 0108 	add.w	r1, r7, #8
 800795c:	f107 030c 	add.w	r3, r7, #12
 8007960:	4618      	mov	r0, r3
 8007962:	f7fe fb07 	bl	8005f74 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007966:	6879      	ldr	r1, [r7, #4]
 8007968:	68bb      	ldr	r3, [r7, #8]
 800796a:	68fa      	ldr	r2, [r7, #12]
 800796c:	9202      	str	r2, [sp, #8]
 800796e:	9301      	str	r3, [sp, #4]
 8007970:	2302      	movs	r3, #2
 8007972:	9300      	str	r3, [sp, #0]
 8007974:	2300      	movs	r3, #0
 8007976:	460a      	mov	r2, r1
 8007978:	4910      	ldr	r1, [pc, #64]	; (80079bc <xTimerCreateTimerTask+0x84>)
 800797a:	4811      	ldr	r0, [pc, #68]	; (80079c0 <xTimerCreateTimerTask+0x88>)
 800797c:	f7ff f8b4 	bl	8006ae8 <xTaskCreateStatic>
 8007980:	4603      	mov	r3, r0
 8007982:	4a10      	ldr	r2, [pc, #64]	; (80079c4 <xTimerCreateTimerTask+0x8c>)
 8007984:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007986:	4b0f      	ldr	r3, [pc, #60]	; (80079c4 <xTimerCreateTimerTask+0x8c>)
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	2b00      	cmp	r3, #0
 800798c:	d001      	beq.n	8007992 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800798e:	2301      	movs	r3, #1
 8007990:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007992:	697b      	ldr	r3, [r7, #20]
 8007994:	2b00      	cmp	r3, #0
 8007996:	d10a      	bne.n	80079ae <xTimerCreateTimerTask+0x76>
	__asm volatile
 8007998:	f04f 0350 	mov.w	r3, #80	; 0x50
 800799c:	f383 8811 	msr	BASEPRI, r3
 80079a0:	f3bf 8f6f 	isb	sy
 80079a4:	f3bf 8f4f 	dsb	sy
 80079a8:	613b      	str	r3, [r7, #16]
}
 80079aa:	bf00      	nop
 80079ac:	e7fe      	b.n	80079ac <xTimerCreateTimerTask+0x74>
	return xReturn;
 80079ae:	697b      	ldr	r3, [r7, #20]
}
 80079b0:	4618      	mov	r0, r3
 80079b2:	3718      	adds	r7, #24
 80079b4:	46bd      	mov	sp, r7
 80079b6:	bd80      	pop	{r7, pc}
 80079b8:	24001014 	.word	0x24001014
 80079bc:	08008a74 	.word	0x08008a74
 80079c0:	08007afd 	.word	0x08007afd
 80079c4:	24001018 	.word	0x24001018

080079c8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80079c8:	b580      	push	{r7, lr}
 80079ca:	b08a      	sub	sp, #40	; 0x28
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	60f8      	str	r0, [r7, #12]
 80079d0:	60b9      	str	r1, [r7, #8]
 80079d2:	607a      	str	r2, [r7, #4]
 80079d4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80079d6:	2300      	movs	r3, #0
 80079d8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d10a      	bne.n	80079f6 <xTimerGenericCommand+0x2e>
	__asm volatile
 80079e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079e4:	f383 8811 	msr	BASEPRI, r3
 80079e8:	f3bf 8f6f 	isb	sy
 80079ec:	f3bf 8f4f 	dsb	sy
 80079f0:	623b      	str	r3, [r7, #32]
}
 80079f2:	bf00      	nop
 80079f4:	e7fe      	b.n	80079f4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80079f6:	4b1a      	ldr	r3, [pc, #104]	; (8007a60 <xTimerGenericCommand+0x98>)
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d02a      	beq.n	8007a54 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80079fe:	68bb      	ldr	r3, [r7, #8]
 8007a00:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007a0a:	68bb      	ldr	r3, [r7, #8]
 8007a0c:	2b05      	cmp	r3, #5
 8007a0e:	dc18      	bgt.n	8007a42 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007a10:	f7ff feb2 	bl	8007778 <xTaskGetSchedulerState>
 8007a14:	4603      	mov	r3, r0
 8007a16:	2b02      	cmp	r3, #2
 8007a18:	d109      	bne.n	8007a2e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007a1a:	4b11      	ldr	r3, [pc, #68]	; (8007a60 <xTimerGenericCommand+0x98>)
 8007a1c:	6818      	ldr	r0, [r3, #0]
 8007a1e:	f107 0110 	add.w	r1, r7, #16
 8007a22:	2300      	movs	r3, #0
 8007a24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a26:	f7fe fc77 	bl	8006318 <xQueueGenericSend>
 8007a2a:	6278      	str	r0, [r7, #36]	; 0x24
 8007a2c:	e012      	b.n	8007a54 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007a2e:	4b0c      	ldr	r3, [pc, #48]	; (8007a60 <xTimerGenericCommand+0x98>)
 8007a30:	6818      	ldr	r0, [r3, #0]
 8007a32:	f107 0110 	add.w	r1, r7, #16
 8007a36:	2300      	movs	r3, #0
 8007a38:	2200      	movs	r2, #0
 8007a3a:	f7fe fc6d 	bl	8006318 <xQueueGenericSend>
 8007a3e:	6278      	str	r0, [r7, #36]	; 0x24
 8007a40:	e008      	b.n	8007a54 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007a42:	4b07      	ldr	r3, [pc, #28]	; (8007a60 <xTimerGenericCommand+0x98>)
 8007a44:	6818      	ldr	r0, [r3, #0]
 8007a46:	f107 0110 	add.w	r1, r7, #16
 8007a4a:	2300      	movs	r3, #0
 8007a4c:	683a      	ldr	r2, [r7, #0]
 8007a4e:	f7fe fd61 	bl	8006514 <xQueueGenericSendFromISR>
 8007a52:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007a56:	4618      	mov	r0, r3
 8007a58:	3728      	adds	r7, #40	; 0x28
 8007a5a:	46bd      	mov	sp, r7
 8007a5c:	bd80      	pop	{r7, pc}
 8007a5e:	bf00      	nop
 8007a60:	24001014 	.word	0x24001014

08007a64 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007a64:	b580      	push	{r7, lr}
 8007a66:	b088      	sub	sp, #32
 8007a68:	af02      	add	r7, sp, #8
 8007a6a:	6078      	str	r0, [r7, #4]
 8007a6c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007a6e:	4b22      	ldr	r3, [pc, #136]	; (8007af8 <prvProcessExpiredTimer+0x94>)
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	68db      	ldr	r3, [r3, #12]
 8007a74:	68db      	ldr	r3, [r3, #12]
 8007a76:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007a78:	697b      	ldr	r3, [r7, #20]
 8007a7a:	3304      	adds	r3, #4
 8007a7c:	4618      	mov	r0, r3
 8007a7e:	f7fe fb1d 	bl	80060bc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007a82:	697b      	ldr	r3, [r7, #20]
 8007a84:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007a88:	f003 0304 	and.w	r3, r3, #4
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d022      	beq.n	8007ad6 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007a90:	697b      	ldr	r3, [r7, #20]
 8007a92:	699a      	ldr	r2, [r3, #24]
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	18d1      	adds	r1, r2, r3
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	683a      	ldr	r2, [r7, #0]
 8007a9c:	6978      	ldr	r0, [r7, #20]
 8007a9e:	f000 f8d1 	bl	8007c44 <prvInsertTimerInActiveList>
 8007aa2:	4603      	mov	r3, r0
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d01f      	beq.n	8007ae8 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007aa8:	2300      	movs	r3, #0
 8007aaa:	9300      	str	r3, [sp, #0]
 8007aac:	2300      	movs	r3, #0
 8007aae:	687a      	ldr	r2, [r7, #4]
 8007ab0:	2100      	movs	r1, #0
 8007ab2:	6978      	ldr	r0, [r7, #20]
 8007ab4:	f7ff ff88 	bl	80079c8 <xTimerGenericCommand>
 8007ab8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007aba:	693b      	ldr	r3, [r7, #16]
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d113      	bne.n	8007ae8 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8007ac0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ac4:	f383 8811 	msr	BASEPRI, r3
 8007ac8:	f3bf 8f6f 	isb	sy
 8007acc:	f3bf 8f4f 	dsb	sy
 8007ad0:	60fb      	str	r3, [r7, #12]
}
 8007ad2:	bf00      	nop
 8007ad4:	e7fe      	b.n	8007ad4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007ad6:	697b      	ldr	r3, [r7, #20]
 8007ad8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007adc:	f023 0301 	bic.w	r3, r3, #1
 8007ae0:	b2da      	uxtb	r2, r3
 8007ae2:	697b      	ldr	r3, [r7, #20]
 8007ae4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007ae8:	697b      	ldr	r3, [r7, #20]
 8007aea:	6a1b      	ldr	r3, [r3, #32]
 8007aec:	6978      	ldr	r0, [r7, #20]
 8007aee:	4798      	blx	r3
}
 8007af0:	bf00      	nop
 8007af2:	3718      	adds	r7, #24
 8007af4:	46bd      	mov	sp, r7
 8007af6:	bd80      	pop	{r7, pc}
 8007af8:	2400100c 	.word	0x2400100c

08007afc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007afc:	b580      	push	{r7, lr}
 8007afe:	b084      	sub	sp, #16
 8007b00:	af00      	add	r7, sp, #0
 8007b02:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007b04:	f107 0308 	add.w	r3, r7, #8
 8007b08:	4618      	mov	r0, r3
 8007b0a:	f000 f857 	bl	8007bbc <prvGetNextExpireTime>
 8007b0e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007b10:	68bb      	ldr	r3, [r7, #8]
 8007b12:	4619      	mov	r1, r3
 8007b14:	68f8      	ldr	r0, [r7, #12]
 8007b16:	f000 f803 	bl	8007b20 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007b1a:	f000 f8d5 	bl	8007cc8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007b1e:	e7f1      	b.n	8007b04 <prvTimerTask+0x8>

08007b20 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007b20:	b580      	push	{r7, lr}
 8007b22:	b084      	sub	sp, #16
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	6078      	str	r0, [r7, #4]
 8007b28:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007b2a:	f7ff fa39 	bl	8006fa0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007b2e:	f107 0308 	add.w	r3, r7, #8
 8007b32:	4618      	mov	r0, r3
 8007b34:	f000 f866 	bl	8007c04 <prvSampleTimeNow>
 8007b38:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007b3a:	68bb      	ldr	r3, [r7, #8]
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d130      	bne.n	8007ba2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007b40:	683b      	ldr	r3, [r7, #0]
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d10a      	bne.n	8007b5c <prvProcessTimerOrBlockTask+0x3c>
 8007b46:	687a      	ldr	r2, [r7, #4]
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	429a      	cmp	r2, r3
 8007b4c:	d806      	bhi.n	8007b5c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007b4e:	f7ff fa35 	bl	8006fbc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007b52:	68f9      	ldr	r1, [r7, #12]
 8007b54:	6878      	ldr	r0, [r7, #4]
 8007b56:	f7ff ff85 	bl	8007a64 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007b5a:	e024      	b.n	8007ba6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007b5c:	683b      	ldr	r3, [r7, #0]
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d008      	beq.n	8007b74 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007b62:	4b13      	ldr	r3, [pc, #76]	; (8007bb0 <prvProcessTimerOrBlockTask+0x90>)
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d101      	bne.n	8007b70 <prvProcessTimerOrBlockTask+0x50>
 8007b6c:	2301      	movs	r3, #1
 8007b6e:	e000      	b.n	8007b72 <prvProcessTimerOrBlockTask+0x52>
 8007b70:	2300      	movs	r3, #0
 8007b72:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007b74:	4b0f      	ldr	r3, [pc, #60]	; (8007bb4 <prvProcessTimerOrBlockTask+0x94>)
 8007b76:	6818      	ldr	r0, [r3, #0]
 8007b78:	687a      	ldr	r2, [r7, #4]
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	1ad3      	subs	r3, r2, r3
 8007b7e:	683a      	ldr	r2, [r7, #0]
 8007b80:	4619      	mov	r1, r3
 8007b82:	f7fe ff7d 	bl	8006a80 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007b86:	f7ff fa19 	bl	8006fbc <xTaskResumeAll>
 8007b8a:	4603      	mov	r3, r0
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d10a      	bne.n	8007ba6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007b90:	4b09      	ldr	r3, [pc, #36]	; (8007bb8 <prvProcessTimerOrBlockTask+0x98>)
 8007b92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007b96:	601a      	str	r2, [r3, #0]
 8007b98:	f3bf 8f4f 	dsb	sy
 8007b9c:	f3bf 8f6f 	isb	sy
}
 8007ba0:	e001      	b.n	8007ba6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007ba2:	f7ff fa0b 	bl	8006fbc <xTaskResumeAll>
}
 8007ba6:	bf00      	nop
 8007ba8:	3710      	adds	r7, #16
 8007baa:	46bd      	mov	sp, r7
 8007bac:	bd80      	pop	{r7, pc}
 8007bae:	bf00      	nop
 8007bb0:	24001010 	.word	0x24001010
 8007bb4:	24001014 	.word	0x24001014
 8007bb8:	e000ed04 	.word	0xe000ed04

08007bbc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007bbc:	b480      	push	{r7}
 8007bbe:	b085      	sub	sp, #20
 8007bc0:	af00      	add	r7, sp, #0
 8007bc2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007bc4:	4b0e      	ldr	r3, [pc, #56]	; (8007c00 <prvGetNextExpireTime+0x44>)
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d101      	bne.n	8007bd2 <prvGetNextExpireTime+0x16>
 8007bce:	2201      	movs	r2, #1
 8007bd0:	e000      	b.n	8007bd4 <prvGetNextExpireTime+0x18>
 8007bd2:	2200      	movs	r2, #0
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d105      	bne.n	8007bec <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007be0:	4b07      	ldr	r3, [pc, #28]	; (8007c00 <prvGetNextExpireTime+0x44>)
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	68db      	ldr	r3, [r3, #12]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	60fb      	str	r3, [r7, #12]
 8007bea:	e001      	b.n	8007bf0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007bec:	2300      	movs	r3, #0
 8007bee:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007bf0:	68fb      	ldr	r3, [r7, #12]
}
 8007bf2:	4618      	mov	r0, r3
 8007bf4:	3714      	adds	r7, #20
 8007bf6:	46bd      	mov	sp, r7
 8007bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bfc:	4770      	bx	lr
 8007bfe:	bf00      	nop
 8007c00:	2400100c 	.word	0x2400100c

08007c04 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007c04:	b580      	push	{r7, lr}
 8007c06:	b084      	sub	sp, #16
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007c0c:	f7ff fa74 	bl	80070f8 <xTaskGetTickCount>
 8007c10:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007c12:	4b0b      	ldr	r3, [pc, #44]	; (8007c40 <prvSampleTimeNow+0x3c>)
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	68fa      	ldr	r2, [r7, #12]
 8007c18:	429a      	cmp	r2, r3
 8007c1a:	d205      	bcs.n	8007c28 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007c1c:	f000 f936 	bl	8007e8c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	2201      	movs	r2, #1
 8007c24:	601a      	str	r2, [r3, #0]
 8007c26:	e002      	b.n	8007c2e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	2200      	movs	r2, #0
 8007c2c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007c2e:	4a04      	ldr	r2, [pc, #16]	; (8007c40 <prvSampleTimeNow+0x3c>)
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007c34:	68fb      	ldr	r3, [r7, #12]
}
 8007c36:	4618      	mov	r0, r3
 8007c38:	3710      	adds	r7, #16
 8007c3a:	46bd      	mov	sp, r7
 8007c3c:	bd80      	pop	{r7, pc}
 8007c3e:	bf00      	nop
 8007c40:	2400101c 	.word	0x2400101c

08007c44 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007c44:	b580      	push	{r7, lr}
 8007c46:	b086      	sub	sp, #24
 8007c48:	af00      	add	r7, sp, #0
 8007c4a:	60f8      	str	r0, [r7, #12]
 8007c4c:	60b9      	str	r1, [r7, #8]
 8007c4e:	607a      	str	r2, [r7, #4]
 8007c50:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007c52:	2300      	movs	r3, #0
 8007c54:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	68ba      	ldr	r2, [r7, #8]
 8007c5a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	68fa      	ldr	r2, [r7, #12]
 8007c60:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007c62:	68ba      	ldr	r2, [r7, #8]
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	429a      	cmp	r2, r3
 8007c68:	d812      	bhi.n	8007c90 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007c6a:	687a      	ldr	r2, [r7, #4]
 8007c6c:	683b      	ldr	r3, [r7, #0]
 8007c6e:	1ad2      	subs	r2, r2, r3
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	699b      	ldr	r3, [r3, #24]
 8007c74:	429a      	cmp	r2, r3
 8007c76:	d302      	bcc.n	8007c7e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007c78:	2301      	movs	r3, #1
 8007c7a:	617b      	str	r3, [r7, #20]
 8007c7c:	e01b      	b.n	8007cb6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007c7e:	4b10      	ldr	r3, [pc, #64]	; (8007cc0 <prvInsertTimerInActiveList+0x7c>)
 8007c80:	681a      	ldr	r2, [r3, #0]
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	3304      	adds	r3, #4
 8007c86:	4619      	mov	r1, r3
 8007c88:	4610      	mov	r0, r2
 8007c8a:	f7fe f9de 	bl	800604a <vListInsert>
 8007c8e:	e012      	b.n	8007cb6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007c90:	687a      	ldr	r2, [r7, #4]
 8007c92:	683b      	ldr	r3, [r7, #0]
 8007c94:	429a      	cmp	r2, r3
 8007c96:	d206      	bcs.n	8007ca6 <prvInsertTimerInActiveList+0x62>
 8007c98:	68ba      	ldr	r2, [r7, #8]
 8007c9a:	683b      	ldr	r3, [r7, #0]
 8007c9c:	429a      	cmp	r2, r3
 8007c9e:	d302      	bcc.n	8007ca6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007ca0:	2301      	movs	r3, #1
 8007ca2:	617b      	str	r3, [r7, #20]
 8007ca4:	e007      	b.n	8007cb6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007ca6:	4b07      	ldr	r3, [pc, #28]	; (8007cc4 <prvInsertTimerInActiveList+0x80>)
 8007ca8:	681a      	ldr	r2, [r3, #0]
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	3304      	adds	r3, #4
 8007cae:	4619      	mov	r1, r3
 8007cb0:	4610      	mov	r0, r2
 8007cb2:	f7fe f9ca 	bl	800604a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007cb6:	697b      	ldr	r3, [r7, #20]
}
 8007cb8:	4618      	mov	r0, r3
 8007cba:	3718      	adds	r7, #24
 8007cbc:	46bd      	mov	sp, r7
 8007cbe:	bd80      	pop	{r7, pc}
 8007cc0:	24001010 	.word	0x24001010
 8007cc4:	2400100c 	.word	0x2400100c

08007cc8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007cc8:	b580      	push	{r7, lr}
 8007cca:	b08e      	sub	sp, #56	; 0x38
 8007ccc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007cce:	e0ca      	b.n	8007e66 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	da18      	bge.n	8007d08 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007cd6:	1d3b      	adds	r3, r7, #4
 8007cd8:	3304      	adds	r3, #4
 8007cda:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007cdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d10a      	bne.n	8007cf8 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8007ce2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ce6:	f383 8811 	msr	BASEPRI, r3
 8007cea:	f3bf 8f6f 	isb	sy
 8007cee:	f3bf 8f4f 	dsb	sy
 8007cf2:	61fb      	str	r3, [r7, #28]
}
 8007cf4:	bf00      	nop
 8007cf6:	e7fe      	b.n	8007cf6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007cf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007cfe:	6850      	ldr	r0, [r2, #4]
 8007d00:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007d02:	6892      	ldr	r2, [r2, #8]
 8007d04:	4611      	mov	r1, r2
 8007d06:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	f2c0 80aa 	blt.w	8007e64 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007d14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d16:	695b      	ldr	r3, [r3, #20]
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d004      	beq.n	8007d26 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007d1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d1e:	3304      	adds	r3, #4
 8007d20:	4618      	mov	r0, r3
 8007d22:	f7fe f9cb 	bl	80060bc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007d26:	463b      	mov	r3, r7
 8007d28:	4618      	mov	r0, r3
 8007d2a:	f7ff ff6b 	bl	8007c04 <prvSampleTimeNow>
 8007d2e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	2b09      	cmp	r3, #9
 8007d34:	f200 8097 	bhi.w	8007e66 <prvProcessReceivedCommands+0x19e>
 8007d38:	a201      	add	r2, pc, #4	; (adr r2, 8007d40 <prvProcessReceivedCommands+0x78>)
 8007d3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d3e:	bf00      	nop
 8007d40:	08007d69 	.word	0x08007d69
 8007d44:	08007d69 	.word	0x08007d69
 8007d48:	08007d69 	.word	0x08007d69
 8007d4c:	08007ddd 	.word	0x08007ddd
 8007d50:	08007df1 	.word	0x08007df1
 8007d54:	08007e3b 	.word	0x08007e3b
 8007d58:	08007d69 	.word	0x08007d69
 8007d5c:	08007d69 	.word	0x08007d69
 8007d60:	08007ddd 	.word	0x08007ddd
 8007d64:	08007df1 	.word	0x08007df1
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007d68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d6a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007d6e:	f043 0301 	orr.w	r3, r3, #1
 8007d72:	b2da      	uxtb	r2, r3
 8007d74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d76:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007d7a:	68ba      	ldr	r2, [r7, #8]
 8007d7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d7e:	699b      	ldr	r3, [r3, #24]
 8007d80:	18d1      	adds	r1, r2, r3
 8007d82:	68bb      	ldr	r3, [r7, #8]
 8007d84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d86:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007d88:	f7ff ff5c 	bl	8007c44 <prvInsertTimerInActiveList>
 8007d8c:	4603      	mov	r3, r0
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d069      	beq.n	8007e66 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007d92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d94:	6a1b      	ldr	r3, [r3, #32]
 8007d96:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007d98:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007d9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d9c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007da0:	f003 0304 	and.w	r3, r3, #4
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d05e      	beq.n	8007e66 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007da8:	68ba      	ldr	r2, [r7, #8]
 8007daa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dac:	699b      	ldr	r3, [r3, #24]
 8007dae:	441a      	add	r2, r3
 8007db0:	2300      	movs	r3, #0
 8007db2:	9300      	str	r3, [sp, #0]
 8007db4:	2300      	movs	r3, #0
 8007db6:	2100      	movs	r1, #0
 8007db8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007dba:	f7ff fe05 	bl	80079c8 <xTimerGenericCommand>
 8007dbe:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007dc0:	6a3b      	ldr	r3, [r7, #32]
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d14f      	bne.n	8007e66 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8007dc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dca:	f383 8811 	msr	BASEPRI, r3
 8007dce:	f3bf 8f6f 	isb	sy
 8007dd2:	f3bf 8f4f 	dsb	sy
 8007dd6:	61bb      	str	r3, [r7, #24]
}
 8007dd8:	bf00      	nop
 8007dda:	e7fe      	b.n	8007dda <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007ddc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dde:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007de2:	f023 0301 	bic.w	r3, r3, #1
 8007de6:	b2da      	uxtb	r2, r3
 8007de8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8007dee:	e03a      	b.n	8007e66 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007df0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007df2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007df6:	f043 0301 	orr.w	r3, r3, #1
 8007dfa:	b2da      	uxtb	r2, r3
 8007dfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dfe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007e02:	68ba      	ldr	r2, [r7, #8]
 8007e04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e06:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007e08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e0a:	699b      	ldr	r3, [r3, #24]
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d10a      	bne.n	8007e26 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8007e10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e14:	f383 8811 	msr	BASEPRI, r3
 8007e18:	f3bf 8f6f 	isb	sy
 8007e1c:	f3bf 8f4f 	dsb	sy
 8007e20:	617b      	str	r3, [r7, #20]
}
 8007e22:	bf00      	nop
 8007e24:	e7fe      	b.n	8007e24 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007e26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e28:	699a      	ldr	r2, [r3, #24]
 8007e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e2c:	18d1      	adds	r1, r2, r3
 8007e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e32:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007e34:	f7ff ff06 	bl	8007c44 <prvInsertTimerInActiveList>
					break;
 8007e38:	e015      	b.n	8007e66 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007e3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e3c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007e40:	f003 0302 	and.w	r3, r3, #2
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d103      	bne.n	8007e50 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8007e48:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007e4a:	f000 fbe1 	bl	8008610 <vPortFree>
 8007e4e:	e00a      	b.n	8007e66 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007e50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e52:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007e56:	f023 0301 	bic.w	r3, r3, #1
 8007e5a:	b2da      	uxtb	r2, r3
 8007e5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e5e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007e62:	e000      	b.n	8007e66 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8007e64:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007e66:	4b08      	ldr	r3, [pc, #32]	; (8007e88 <prvProcessReceivedCommands+0x1c0>)
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	1d39      	adds	r1, r7, #4
 8007e6c:	2200      	movs	r2, #0
 8007e6e:	4618      	mov	r0, r3
 8007e70:	f7fe fbec 	bl	800664c <xQueueReceive>
 8007e74:	4603      	mov	r3, r0
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	f47f af2a 	bne.w	8007cd0 <prvProcessReceivedCommands+0x8>
	}
}
 8007e7c:	bf00      	nop
 8007e7e:	bf00      	nop
 8007e80:	3730      	adds	r7, #48	; 0x30
 8007e82:	46bd      	mov	sp, r7
 8007e84:	bd80      	pop	{r7, pc}
 8007e86:	bf00      	nop
 8007e88:	24001014 	.word	0x24001014

08007e8c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007e8c:	b580      	push	{r7, lr}
 8007e8e:	b088      	sub	sp, #32
 8007e90:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007e92:	e048      	b.n	8007f26 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007e94:	4b2d      	ldr	r3, [pc, #180]	; (8007f4c <prvSwitchTimerLists+0xc0>)
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	68db      	ldr	r3, [r3, #12]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007e9e:	4b2b      	ldr	r3, [pc, #172]	; (8007f4c <prvSwitchTimerLists+0xc0>)
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	68db      	ldr	r3, [r3, #12]
 8007ea4:	68db      	ldr	r3, [r3, #12]
 8007ea6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	3304      	adds	r3, #4
 8007eac:	4618      	mov	r0, r3
 8007eae:	f7fe f905 	bl	80060bc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	6a1b      	ldr	r3, [r3, #32]
 8007eb6:	68f8      	ldr	r0, [r7, #12]
 8007eb8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007ec0:	f003 0304 	and.w	r3, r3, #4
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d02e      	beq.n	8007f26 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	699b      	ldr	r3, [r3, #24]
 8007ecc:	693a      	ldr	r2, [r7, #16]
 8007ece:	4413      	add	r3, r2
 8007ed0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007ed2:	68ba      	ldr	r2, [r7, #8]
 8007ed4:	693b      	ldr	r3, [r7, #16]
 8007ed6:	429a      	cmp	r2, r3
 8007ed8:	d90e      	bls.n	8007ef8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	68ba      	ldr	r2, [r7, #8]
 8007ede:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	68fa      	ldr	r2, [r7, #12]
 8007ee4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007ee6:	4b19      	ldr	r3, [pc, #100]	; (8007f4c <prvSwitchTimerLists+0xc0>)
 8007ee8:	681a      	ldr	r2, [r3, #0]
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	3304      	adds	r3, #4
 8007eee:	4619      	mov	r1, r3
 8007ef0:	4610      	mov	r0, r2
 8007ef2:	f7fe f8aa 	bl	800604a <vListInsert>
 8007ef6:	e016      	b.n	8007f26 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007ef8:	2300      	movs	r3, #0
 8007efa:	9300      	str	r3, [sp, #0]
 8007efc:	2300      	movs	r3, #0
 8007efe:	693a      	ldr	r2, [r7, #16]
 8007f00:	2100      	movs	r1, #0
 8007f02:	68f8      	ldr	r0, [r7, #12]
 8007f04:	f7ff fd60 	bl	80079c8 <xTimerGenericCommand>
 8007f08:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d10a      	bne.n	8007f26 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8007f10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f14:	f383 8811 	msr	BASEPRI, r3
 8007f18:	f3bf 8f6f 	isb	sy
 8007f1c:	f3bf 8f4f 	dsb	sy
 8007f20:	603b      	str	r3, [r7, #0]
}
 8007f22:	bf00      	nop
 8007f24:	e7fe      	b.n	8007f24 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007f26:	4b09      	ldr	r3, [pc, #36]	; (8007f4c <prvSwitchTimerLists+0xc0>)
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d1b1      	bne.n	8007e94 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007f30:	4b06      	ldr	r3, [pc, #24]	; (8007f4c <prvSwitchTimerLists+0xc0>)
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007f36:	4b06      	ldr	r3, [pc, #24]	; (8007f50 <prvSwitchTimerLists+0xc4>)
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	4a04      	ldr	r2, [pc, #16]	; (8007f4c <prvSwitchTimerLists+0xc0>)
 8007f3c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007f3e:	4a04      	ldr	r2, [pc, #16]	; (8007f50 <prvSwitchTimerLists+0xc4>)
 8007f40:	697b      	ldr	r3, [r7, #20]
 8007f42:	6013      	str	r3, [r2, #0]
}
 8007f44:	bf00      	nop
 8007f46:	3718      	adds	r7, #24
 8007f48:	46bd      	mov	sp, r7
 8007f4a:	bd80      	pop	{r7, pc}
 8007f4c:	2400100c 	.word	0x2400100c
 8007f50:	24001010 	.word	0x24001010

08007f54 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007f54:	b580      	push	{r7, lr}
 8007f56:	b082      	sub	sp, #8
 8007f58:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007f5a:	f000 f96b 	bl	8008234 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007f5e:	4b15      	ldr	r3, [pc, #84]	; (8007fb4 <prvCheckForValidListAndQueue+0x60>)
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d120      	bne.n	8007fa8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007f66:	4814      	ldr	r0, [pc, #80]	; (8007fb8 <prvCheckForValidListAndQueue+0x64>)
 8007f68:	f7fe f81e 	bl	8005fa8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007f6c:	4813      	ldr	r0, [pc, #76]	; (8007fbc <prvCheckForValidListAndQueue+0x68>)
 8007f6e:	f7fe f81b 	bl	8005fa8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007f72:	4b13      	ldr	r3, [pc, #76]	; (8007fc0 <prvCheckForValidListAndQueue+0x6c>)
 8007f74:	4a10      	ldr	r2, [pc, #64]	; (8007fb8 <prvCheckForValidListAndQueue+0x64>)
 8007f76:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007f78:	4b12      	ldr	r3, [pc, #72]	; (8007fc4 <prvCheckForValidListAndQueue+0x70>)
 8007f7a:	4a10      	ldr	r2, [pc, #64]	; (8007fbc <prvCheckForValidListAndQueue+0x68>)
 8007f7c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007f7e:	2300      	movs	r3, #0
 8007f80:	9300      	str	r3, [sp, #0]
 8007f82:	4b11      	ldr	r3, [pc, #68]	; (8007fc8 <prvCheckForValidListAndQueue+0x74>)
 8007f84:	4a11      	ldr	r2, [pc, #68]	; (8007fcc <prvCheckForValidListAndQueue+0x78>)
 8007f86:	2110      	movs	r1, #16
 8007f88:	200a      	movs	r0, #10
 8007f8a:	f7fe f929 	bl	80061e0 <xQueueGenericCreateStatic>
 8007f8e:	4603      	mov	r3, r0
 8007f90:	4a08      	ldr	r2, [pc, #32]	; (8007fb4 <prvCheckForValidListAndQueue+0x60>)
 8007f92:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007f94:	4b07      	ldr	r3, [pc, #28]	; (8007fb4 <prvCheckForValidListAndQueue+0x60>)
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d005      	beq.n	8007fa8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007f9c:	4b05      	ldr	r3, [pc, #20]	; (8007fb4 <prvCheckForValidListAndQueue+0x60>)
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	490b      	ldr	r1, [pc, #44]	; (8007fd0 <prvCheckForValidListAndQueue+0x7c>)
 8007fa2:	4618      	mov	r0, r3
 8007fa4:	f7fe fd42 	bl	8006a2c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007fa8:	f000 f974 	bl	8008294 <vPortExitCritical>
}
 8007fac:	bf00      	nop
 8007fae:	46bd      	mov	sp, r7
 8007fb0:	bd80      	pop	{r7, pc}
 8007fb2:	bf00      	nop
 8007fb4:	24001014 	.word	0x24001014
 8007fb8:	24000fe4 	.word	0x24000fe4
 8007fbc:	24000ff8 	.word	0x24000ff8
 8007fc0:	2400100c 	.word	0x2400100c
 8007fc4:	24001010 	.word	0x24001010
 8007fc8:	240010c0 	.word	0x240010c0
 8007fcc:	24001020 	.word	0x24001020
 8007fd0:	08008a7c 	.word	0x08008a7c

08007fd4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007fd4:	b480      	push	{r7}
 8007fd6:	b085      	sub	sp, #20
 8007fd8:	af00      	add	r7, sp, #0
 8007fda:	60f8      	str	r0, [r7, #12]
 8007fdc:	60b9      	str	r1, [r7, #8]
 8007fde:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	3b04      	subs	r3, #4
 8007fe4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007fec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	3b04      	subs	r3, #4
 8007ff2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007ff4:	68bb      	ldr	r3, [r7, #8]
 8007ff6:	f023 0201 	bic.w	r2, r3, #1
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	3b04      	subs	r3, #4
 8008002:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008004:	4a0c      	ldr	r2, [pc, #48]	; (8008038 <pxPortInitialiseStack+0x64>)
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	3b14      	subs	r3, #20
 800800e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008010:	687a      	ldr	r2, [r7, #4]
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	3b04      	subs	r3, #4
 800801a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	f06f 0202 	mvn.w	r2, #2
 8008022:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	3b20      	subs	r3, #32
 8008028:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800802a:	68fb      	ldr	r3, [r7, #12]
}
 800802c:	4618      	mov	r0, r3
 800802e:	3714      	adds	r7, #20
 8008030:	46bd      	mov	sp, r7
 8008032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008036:	4770      	bx	lr
 8008038:	0800803d 	.word	0x0800803d

0800803c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800803c:	b480      	push	{r7}
 800803e:	b085      	sub	sp, #20
 8008040:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008042:	2300      	movs	r3, #0
 8008044:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008046:	4b12      	ldr	r3, [pc, #72]	; (8008090 <prvTaskExitError+0x54>)
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800804e:	d00a      	beq.n	8008066 <prvTaskExitError+0x2a>
	__asm volatile
 8008050:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008054:	f383 8811 	msr	BASEPRI, r3
 8008058:	f3bf 8f6f 	isb	sy
 800805c:	f3bf 8f4f 	dsb	sy
 8008060:	60fb      	str	r3, [r7, #12]
}
 8008062:	bf00      	nop
 8008064:	e7fe      	b.n	8008064 <prvTaskExitError+0x28>
	__asm volatile
 8008066:	f04f 0350 	mov.w	r3, #80	; 0x50
 800806a:	f383 8811 	msr	BASEPRI, r3
 800806e:	f3bf 8f6f 	isb	sy
 8008072:	f3bf 8f4f 	dsb	sy
 8008076:	60bb      	str	r3, [r7, #8]
}
 8008078:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800807a:	bf00      	nop
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	2b00      	cmp	r3, #0
 8008080:	d0fc      	beq.n	800807c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008082:	bf00      	nop
 8008084:	bf00      	nop
 8008086:	3714      	adds	r7, #20
 8008088:	46bd      	mov	sp, r7
 800808a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800808e:	4770      	bx	lr
 8008090:	24000010 	.word	0x24000010
	...

080080a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80080a0:	4b07      	ldr	r3, [pc, #28]	; (80080c0 <pxCurrentTCBConst2>)
 80080a2:	6819      	ldr	r1, [r3, #0]
 80080a4:	6808      	ldr	r0, [r1, #0]
 80080a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080aa:	f380 8809 	msr	PSP, r0
 80080ae:	f3bf 8f6f 	isb	sy
 80080b2:	f04f 0000 	mov.w	r0, #0
 80080b6:	f380 8811 	msr	BASEPRI, r0
 80080ba:	4770      	bx	lr
 80080bc:	f3af 8000 	nop.w

080080c0 <pxCurrentTCBConst2>:
 80080c0:	24000ae4 	.word	0x24000ae4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80080c4:	bf00      	nop
 80080c6:	bf00      	nop

080080c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80080c8:	4808      	ldr	r0, [pc, #32]	; (80080ec <prvPortStartFirstTask+0x24>)
 80080ca:	6800      	ldr	r0, [r0, #0]
 80080cc:	6800      	ldr	r0, [r0, #0]
 80080ce:	f380 8808 	msr	MSP, r0
 80080d2:	f04f 0000 	mov.w	r0, #0
 80080d6:	f380 8814 	msr	CONTROL, r0
 80080da:	b662      	cpsie	i
 80080dc:	b661      	cpsie	f
 80080de:	f3bf 8f4f 	dsb	sy
 80080e2:	f3bf 8f6f 	isb	sy
 80080e6:	df00      	svc	0
 80080e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80080ea:	bf00      	nop
 80080ec:	e000ed08 	.word	0xe000ed08

080080f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80080f0:	b580      	push	{r7, lr}
 80080f2:	b086      	sub	sp, #24
 80080f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80080f6:	4b46      	ldr	r3, [pc, #280]	; (8008210 <xPortStartScheduler+0x120>)
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	4a46      	ldr	r2, [pc, #280]	; (8008214 <xPortStartScheduler+0x124>)
 80080fc:	4293      	cmp	r3, r2
 80080fe:	d10a      	bne.n	8008116 <xPortStartScheduler+0x26>
	__asm volatile
 8008100:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008104:	f383 8811 	msr	BASEPRI, r3
 8008108:	f3bf 8f6f 	isb	sy
 800810c:	f3bf 8f4f 	dsb	sy
 8008110:	613b      	str	r3, [r7, #16]
}
 8008112:	bf00      	nop
 8008114:	e7fe      	b.n	8008114 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008116:	4b3e      	ldr	r3, [pc, #248]	; (8008210 <xPortStartScheduler+0x120>)
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	4a3f      	ldr	r2, [pc, #252]	; (8008218 <xPortStartScheduler+0x128>)
 800811c:	4293      	cmp	r3, r2
 800811e:	d10a      	bne.n	8008136 <xPortStartScheduler+0x46>
	__asm volatile
 8008120:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008124:	f383 8811 	msr	BASEPRI, r3
 8008128:	f3bf 8f6f 	isb	sy
 800812c:	f3bf 8f4f 	dsb	sy
 8008130:	60fb      	str	r3, [r7, #12]
}
 8008132:	bf00      	nop
 8008134:	e7fe      	b.n	8008134 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008136:	4b39      	ldr	r3, [pc, #228]	; (800821c <xPortStartScheduler+0x12c>)
 8008138:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800813a:	697b      	ldr	r3, [r7, #20]
 800813c:	781b      	ldrb	r3, [r3, #0]
 800813e:	b2db      	uxtb	r3, r3
 8008140:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008142:	697b      	ldr	r3, [r7, #20]
 8008144:	22ff      	movs	r2, #255	; 0xff
 8008146:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008148:	697b      	ldr	r3, [r7, #20]
 800814a:	781b      	ldrb	r3, [r3, #0]
 800814c:	b2db      	uxtb	r3, r3
 800814e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008150:	78fb      	ldrb	r3, [r7, #3]
 8008152:	b2db      	uxtb	r3, r3
 8008154:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008158:	b2da      	uxtb	r2, r3
 800815a:	4b31      	ldr	r3, [pc, #196]	; (8008220 <xPortStartScheduler+0x130>)
 800815c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800815e:	4b31      	ldr	r3, [pc, #196]	; (8008224 <xPortStartScheduler+0x134>)
 8008160:	2207      	movs	r2, #7
 8008162:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008164:	e009      	b.n	800817a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8008166:	4b2f      	ldr	r3, [pc, #188]	; (8008224 <xPortStartScheduler+0x134>)
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	3b01      	subs	r3, #1
 800816c:	4a2d      	ldr	r2, [pc, #180]	; (8008224 <xPortStartScheduler+0x134>)
 800816e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008170:	78fb      	ldrb	r3, [r7, #3]
 8008172:	b2db      	uxtb	r3, r3
 8008174:	005b      	lsls	r3, r3, #1
 8008176:	b2db      	uxtb	r3, r3
 8008178:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800817a:	78fb      	ldrb	r3, [r7, #3]
 800817c:	b2db      	uxtb	r3, r3
 800817e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008182:	2b80      	cmp	r3, #128	; 0x80
 8008184:	d0ef      	beq.n	8008166 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008186:	4b27      	ldr	r3, [pc, #156]	; (8008224 <xPortStartScheduler+0x134>)
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	f1c3 0307 	rsb	r3, r3, #7
 800818e:	2b04      	cmp	r3, #4
 8008190:	d00a      	beq.n	80081a8 <xPortStartScheduler+0xb8>
	__asm volatile
 8008192:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008196:	f383 8811 	msr	BASEPRI, r3
 800819a:	f3bf 8f6f 	isb	sy
 800819e:	f3bf 8f4f 	dsb	sy
 80081a2:	60bb      	str	r3, [r7, #8]
}
 80081a4:	bf00      	nop
 80081a6:	e7fe      	b.n	80081a6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80081a8:	4b1e      	ldr	r3, [pc, #120]	; (8008224 <xPortStartScheduler+0x134>)
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	021b      	lsls	r3, r3, #8
 80081ae:	4a1d      	ldr	r2, [pc, #116]	; (8008224 <xPortStartScheduler+0x134>)
 80081b0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80081b2:	4b1c      	ldr	r3, [pc, #112]	; (8008224 <xPortStartScheduler+0x134>)
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80081ba:	4a1a      	ldr	r2, [pc, #104]	; (8008224 <xPortStartScheduler+0x134>)
 80081bc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	b2da      	uxtb	r2, r3
 80081c2:	697b      	ldr	r3, [r7, #20]
 80081c4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80081c6:	4b18      	ldr	r3, [pc, #96]	; (8008228 <xPortStartScheduler+0x138>)
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	4a17      	ldr	r2, [pc, #92]	; (8008228 <xPortStartScheduler+0x138>)
 80081cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80081d0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80081d2:	4b15      	ldr	r3, [pc, #84]	; (8008228 <xPortStartScheduler+0x138>)
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	4a14      	ldr	r2, [pc, #80]	; (8008228 <xPortStartScheduler+0x138>)
 80081d8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80081dc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80081de:	f000 f8dd 	bl	800839c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80081e2:	4b12      	ldr	r3, [pc, #72]	; (800822c <xPortStartScheduler+0x13c>)
 80081e4:	2200      	movs	r2, #0
 80081e6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80081e8:	f000 f8fc 	bl	80083e4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80081ec:	4b10      	ldr	r3, [pc, #64]	; (8008230 <xPortStartScheduler+0x140>)
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	4a0f      	ldr	r2, [pc, #60]	; (8008230 <xPortStartScheduler+0x140>)
 80081f2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80081f6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80081f8:	f7ff ff66 	bl	80080c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80081fc:	f7ff f846 	bl	800728c <vTaskSwitchContext>
	prvTaskExitError();
 8008200:	f7ff ff1c 	bl	800803c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008204:	2300      	movs	r3, #0
}
 8008206:	4618      	mov	r0, r3
 8008208:	3718      	adds	r7, #24
 800820a:	46bd      	mov	sp, r7
 800820c:	bd80      	pop	{r7, pc}
 800820e:	bf00      	nop
 8008210:	e000ed00 	.word	0xe000ed00
 8008214:	410fc271 	.word	0x410fc271
 8008218:	410fc270 	.word	0x410fc270
 800821c:	e000e400 	.word	0xe000e400
 8008220:	24001110 	.word	0x24001110
 8008224:	24001114 	.word	0x24001114
 8008228:	e000ed20 	.word	0xe000ed20
 800822c:	24000010 	.word	0x24000010
 8008230:	e000ef34 	.word	0xe000ef34

08008234 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008234:	b480      	push	{r7}
 8008236:	b083      	sub	sp, #12
 8008238:	af00      	add	r7, sp, #0
	__asm volatile
 800823a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800823e:	f383 8811 	msr	BASEPRI, r3
 8008242:	f3bf 8f6f 	isb	sy
 8008246:	f3bf 8f4f 	dsb	sy
 800824a:	607b      	str	r3, [r7, #4]
}
 800824c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800824e:	4b0f      	ldr	r3, [pc, #60]	; (800828c <vPortEnterCritical+0x58>)
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	3301      	adds	r3, #1
 8008254:	4a0d      	ldr	r2, [pc, #52]	; (800828c <vPortEnterCritical+0x58>)
 8008256:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008258:	4b0c      	ldr	r3, [pc, #48]	; (800828c <vPortEnterCritical+0x58>)
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	2b01      	cmp	r3, #1
 800825e:	d10f      	bne.n	8008280 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008260:	4b0b      	ldr	r3, [pc, #44]	; (8008290 <vPortEnterCritical+0x5c>)
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	b2db      	uxtb	r3, r3
 8008266:	2b00      	cmp	r3, #0
 8008268:	d00a      	beq.n	8008280 <vPortEnterCritical+0x4c>
	__asm volatile
 800826a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800826e:	f383 8811 	msr	BASEPRI, r3
 8008272:	f3bf 8f6f 	isb	sy
 8008276:	f3bf 8f4f 	dsb	sy
 800827a:	603b      	str	r3, [r7, #0]
}
 800827c:	bf00      	nop
 800827e:	e7fe      	b.n	800827e <vPortEnterCritical+0x4a>
	}
}
 8008280:	bf00      	nop
 8008282:	370c      	adds	r7, #12
 8008284:	46bd      	mov	sp, r7
 8008286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800828a:	4770      	bx	lr
 800828c:	24000010 	.word	0x24000010
 8008290:	e000ed04 	.word	0xe000ed04

08008294 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008294:	b480      	push	{r7}
 8008296:	b083      	sub	sp, #12
 8008298:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800829a:	4b12      	ldr	r3, [pc, #72]	; (80082e4 <vPortExitCritical+0x50>)
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d10a      	bne.n	80082b8 <vPortExitCritical+0x24>
	__asm volatile
 80082a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082a6:	f383 8811 	msr	BASEPRI, r3
 80082aa:	f3bf 8f6f 	isb	sy
 80082ae:	f3bf 8f4f 	dsb	sy
 80082b2:	607b      	str	r3, [r7, #4]
}
 80082b4:	bf00      	nop
 80082b6:	e7fe      	b.n	80082b6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80082b8:	4b0a      	ldr	r3, [pc, #40]	; (80082e4 <vPortExitCritical+0x50>)
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	3b01      	subs	r3, #1
 80082be:	4a09      	ldr	r2, [pc, #36]	; (80082e4 <vPortExitCritical+0x50>)
 80082c0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80082c2:	4b08      	ldr	r3, [pc, #32]	; (80082e4 <vPortExitCritical+0x50>)
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d105      	bne.n	80082d6 <vPortExitCritical+0x42>
 80082ca:	2300      	movs	r3, #0
 80082cc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80082ce:	683b      	ldr	r3, [r7, #0]
 80082d0:	f383 8811 	msr	BASEPRI, r3
}
 80082d4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80082d6:	bf00      	nop
 80082d8:	370c      	adds	r7, #12
 80082da:	46bd      	mov	sp, r7
 80082dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e0:	4770      	bx	lr
 80082e2:	bf00      	nop
 80082e4:	24000010 	.word	0x24000010
	...

080082f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80082f0:	f3ef 8009 	mrs	r0, PSP
 80082f4:	f3bf 8f6f 	isb	sy
 80082f8:	4b15      	ldr	r3, [pc, #84]	; (8008350 <pxCurrentTCBConst>)
 80082fa:	681a      	ldr	r2, [r3, #0]
 80082fc:	f01e 0f10 	tst.w	lr, #16
 8008300:	bf08      	it	eq
 8008302:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008306:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800830a:	6010      	str	r0, [r2, #0]
 800830c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008310:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008314:	f380 8811 	msr	BASEPRI, r0
 8008318:	f3bf 8f4f 	dsb	sy
 800831c:	f3bf 8f6f 	isb	sy
 8008320:	f7fe ffb4 	bl	800728c <vTaskSwitchContext>
 8008324:	f04f 0000 	mov.w	r0, #0
 8008328:	f380 8811 	msr	BASEPRI, r0
 800832c:	bc09      	pop	{r0, r3}
 800832e:	6819      	ldr	r1, [r3, #0]
 8008330:	6808      	ldr	r0, [r1, #0]
 8008332:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008336:	f01e 0f10 	tst.w	lr, #16
 800833a:	bf08      	it	eq
 800833c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008340:	f380 8809 	msr	PSP, r0
 8008344:	f3bf 8f6f 	isb	sy
 8008348:	4770      	bx	lr
 800834a:	bf00      	nop
 800834c:	f3af 8000 	nop.w

08008350 <pxCurrentTCBConst>:
 8008350:	24000ae4 	.word	0x24000ae4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008354:	bf00      	nop
 8008356:	bf00      	nop

08008358 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008358:	b580      	push	{r7, lr}
 800835a:	b082      	sub	sp, #8
 800835c:	af00      	add	r7, sp, #0
	__asm volatile
 800835e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008362:	f383 8811 	msr	BASEPRI, r3
 8008366:	f3bf 8f6f 	isb	sy
 800836a:	f3bf 8f4f 	dsb	sy
 800836e:	607b      	str	r3, [r7, #4]
}
 8008370:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008372:	f7fe fed1 	bl	8007118 <xTaskIncrementTick>
 8008376:	4603      	mov	r3, r0
 8008378:	2b00      	cmp	r3, #0
 800837a:	d003      	beq.n	8008384 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800837c:	4b06      	ldr	r3, [pc, #24]	; (8008398 <xPortSysTickHandler+0x40>)
 800837e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008382:	601a      	str	r2, [r3, #0]
 8008384:	2300      	movs	r3, #0
 8008386:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008388:	683b      	ldr	r3, [r7, #0]
 800838a:	f383 8811 	msr	BASEPRI, r3
}
 800838e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008390:	bf00      	nop
 8008392:	3708      	adds	r7, #8
 8008394:	46bd      	mov	sp, r7
 8008396:	bd80      	pop	{r7, pc}
 8008398:	e000ed04 	.word	0xe000ed04

0800839c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800839c:	b480      	push	{r7}
 800839e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80083a0:	4b0b      	ldr	r3, [pc, #44]	; (80083d0 <vPortSetupTimerInterrupt+0x34>)
 80083a2:	2200      	movs	r2, #0
 80083a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80083a6:	4b0b      	ldr	r3, [pc, #44]	; (80083d4 <vPortSetupTimerInterrupt+0x38>)
 80083a8:	2200      	movs	r2, #0
 80083aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80083ac:	4b0a      	ldr	r3, [pc, #40]	; (80083d8 <vPortSetupTimerInterrupt+0x3c>)
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	4a0a      	ldr	r2, [pc, #40]	; (80083dc <vPortSetupTimerInterrupt+0x40>)
 80083b2:	fba2 2303 	umull	r2, r3, r2, r3
 80083b6:	099b      	lsrs	r3, r3, #6
 80083b8:	4a09      	ldr	r2, [pc, #36]	; (80083e0 <vPortSetupTimerInterrupt+0x44>)
 80083ba:	3b01      	subs	r3, #1
 80083bc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80083be:	4b04      	ldr	r3, [pc, #16]	; (80083d0 <vPortSetupTimerInterrupt+0x34>)
 80083c0:	2207      	movs	r2, #7
 80083c2:	601a      	str	r2, [r3, #0]
}
 80083c4:	bf00      	nop
 80083c6:	46bd      	mov	sp, r7
 80083c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083cc:	4770      	bx	lr
 80083ce:	bf00      	nop
 80083d0:	e000e010 	.word	0xe000e010
 80083d4:	e000e018 	.word	0xe000e018
 80083d8:	24000000 	.word	0x24000000
 80083dc:	10624dd3 	.word	0x10624dd3
 80083e0:	e000e014 	.word	0xe000e014

080083e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80083e4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80083f4 <vPortEnableVFP+0x10>
 80083e8:	6801      	ldr	r1, [r0, #0]
 80083ea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80083ee:	6001      	str	r1, [r0, #0]
 80083f0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80083f2:	bf00      	nop
 80083f4:	e000ed88 	.word	0xe000ed88

080083f8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80083f8:	b480      	push	{r7}
 80083fa:	b085      	sub	sp, #20
 80083fc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80083fe:	f3ef 8305 	mrs	r3, IPSR
 8008402:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	2b0f      	cmp	r3, #15
 8008408:	d914      	bls.n	8008434 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800840a:	4a17      	ldr	r2, [pc, #92]	; (8008468 <vPortValidateInterruptPriority+0x70>)
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	4413      	add	r3, r2
 8008410:	781b      	ldrb	r3, [r3, #0]
 8008412:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008414:	4b15      	ldr	r3, [pc, #84]	; (800846c <vPortValidateInterruptPriority+0x74>)
 8008416:	781b      	ldrb	r3, [r3, #0]
 8008418:	7afa      	ldrb	r2, [r7, #11]
 800841a:	429a      	cmp	r2, r3
 800841c:	d20a      	bcs.n	8008434 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800841e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008422:	f383 8811 	msr	BASEPRI, r3
 8008426:	f3bf 8f6f 	isb	sy
 800842a:	f3bf 8f4f 	dsb	sy
 800842e:	607b      	str	r3, [r7, #4]
}
 8008430:	bf00      	nop
 8008432:	e7fe      	b.n	8008432 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008434:	4b0e      	ldr	r3, [pc, #56]	; (8008470 <vPortValidateInterruptPriority+0x78>)
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800843c:	4b0d      	ldr	r3, [pc, #52]	; (8008474 <vPortValidateInterruptPriority+0x7c>)
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	429a      	cmp	r2, r3
 8008442:	d90a      	bls.n	800845a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8008444:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008448:	f383 8811 	msr	BASEPRI, r3
 800844c:	f3bf 8f6f 	isb	sy
 8008450:	f3bf 8f4f 	dsb	sy
 8008454:	603b      	str	r3, [r7, #0]
}
 8008456:	bf00      	nop
 8008458:	e7fe      	b.n	8008458 <vPortValidateInterruptPriority+0x60>
	}
 800845a:	bf00      	nop
 800845c:	3714      	adds	r7, #20
 800845e:	46bd      	mov	sp, r7
 8008460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008464:	4770      	bx	lr
 8008466:	bf00      	nop
 8008468:	e000e3f0 	.word	0xe000e3f0
 800846c:	24001110 	.word	0x24001110
 8008470:	e000ed0c 	.word	0xe000ed0c
 8008474:	24001114 	.word	0x24001114

08008478 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008478:	b580      	push	{r7, lr}
 800847a:	b08a      	sub	sp, #40	; 0x28
 800847c:	af00      	add	r7, sp, #0
 800847e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008480:	2300      	movs	r3, #0
 8008482:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008484:	f7fe fd8c 	bl	8006fa0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008488:	4b5b      	ldr	r3, [pc, #364]	; (80085f8 <pvPortMalloc+0x180>)
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	2b00      	cmp	r3, #0
 800848e:	d101      	bne.n	8008494 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008490:	f000 f920 	bl	80086d4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008494:	4b59      	ldr	r3, [pc, #356]	; (80085fc <pvPortMalloc+0x184>)
 8008496:	681a      	ldr	r2, [r3, #0]
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	4013      	ands	r3, r2
 800849c:	2b00      	cmp	r3, #0
 800849e:	f040 8093 	bne.w	80085c8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d01d      	beq.n	80084e4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80084a8:	2208      	movs	r2, #8
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	4413      	add	r3, r2
 80084ae:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	f003 0307 	and.w	r3, r3, #7
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d014      	beq.n	80084e4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	f023 0307 	bic.w	r3, r3, #7
 80084c0:	3308      	adds	r3, #8
 80084c2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	f003 0307 	and.w	r3, r3, #7
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d00a      	beq.n	80084e4 <pvPortMalloc+0x6c>
	__asm volatile
 80084ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084d2:	f383 8811 	msr	BASEPRI, r3
 80084d6:	f3bf 8f6f 	isb	sy
 80084da:	f3bf 8f4f 	dsb	sy
 80084de:	617b      	str	r3, [r7, #20]
}
 80084e0:	bf00      	nop
 80084e2:	e7fe      	b.n	80084e2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d06e      	beq.n	80085c8 <pvPortMalloc+0x150>
 80084ea:	4b45      	ldr	r3, [pc, #276]	; (8008600 <pvPortMalloc+0x188>)
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	687a      	ldr	r2, [r7, #4]
 80084f0:	429a      	cmp	r2, r3
 80084f2:	d869      	bhi.n	80085c8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80084f4:	4b43      	ldr	r3, [pc, #268]	; (8008604 <pvPortMalloc+0x18c>)
 80084f6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80084f8:	4b42      	ldr	r3, [pc, #264]	; (8008604 <pvPortMalloc+0x18c>)
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80084fe:	e004      	b.n	800850a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008502:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800850a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800850c:	685b      	ldr	r3, [r3, #4]
 800850e:	687a      	ldr	r2, [r7, #4]
 8008510:	429a      	cmp	r2, r3
 8008512:	d903      	bls.n	800851c <pvPortMalloc+0xa4>
 8008514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	2b00      	cmp	r3, #0
 800851a:	d1f1      	bne.n	8008500 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800851c:	4b36      	ldr	r3, [pc, #216]	; (80085f8 <pvPortMalloc+0x180>)
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008522:	429a      	cmp	r2, r3
 8008524:	d050      	beq.n	80085c8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008526:	6a3b      	ldr	r3, [r7, #32]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	2208      	movs	r2, #8
 800852c:	4413      	add	r3, r2
 800852e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008532:	681a      	ldr	r2, [r3, #0]
 8008534:	6a3b      	ldr	r3, [r7, #32]
 8008536:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800853a:	685a      	ldr	r2, [r3, #4]
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	1ad2      	subs	r2, r2, r3
 8008540:	2308      	movs	r3, #8
 8008542:	005b      	lsls	r3, r3, #1
 8008544:	429a      	cmp	r2, r3
 8008546:	d91f      	bls.n	8008588 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008548:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	4413      	add	r3, r2
 800854e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008550:	69bb      	ldr	r3, [r7, #24]
 8008552:	f003 0307 	and.w	r3, r3, #7
 8008556:	2b00      	cmp	r3, #0
 8008558:	d00a      	beq.n	8008570 <pvPortMalloc+0xf8>
	__asm volatile
 800855a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800855e:	f383 8811 	msr	BASEPRI, r3
 8008562:	f3bf 8f6f 	isb	sy
 8008566:	f3bf 8f4f 	dsb	sy
 800856a:	613b      	str	r3, [r7, #16]
}
 800856c:	bf00      	nop
 800856e:	e7fe      	b.n	800856e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008572:	685a      	ldr	r2, [r3, #4]
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	1ad2      	subs	r2, r2, r3
 8008578:	69bb      	ldr	r3, [r7, #24]
 800857a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800857c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800857e:	687a      	ldr	r2, [r7, #4]
 8008580:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008582:	69b8      	ldr	r0, [r7, #24]
 8008584:	f000 f908 	bl	8008798 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008588:	4b1d      	ldr	r3, [pc, #116]	; (8008600 <pvPortMalloc+0x188>)
 800858a:	681a      	ldr	r2, [r3, #0]
 800858c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800858e:	685b      	ldr	r3, [r3, #4]
 8008590:	1ad3      	subs	r3, r2, r3
 8008592:	4a1b      	ldr	r2, [pc, #108]	; (8008600 <pvPortMalloc+0x188>)
 8008594:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008596:	4b1a      	ldr	r3, [pc, #104]	; (8008600 <pvPortMalloc+0x188>)
 8008598:	681a      	ldr	r2, [r3, #0]
 800859a:	4b1b      	ldr	r3, [pc, #108]	; (8008608 <pvPortMalloc+0x190>)
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	429a      	cmp	r2, r3
 80085a0:	d203      	bcs.n	80085aa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80085a2:	4b17      	ldr	r3, [pc, #92]	; (8008600 <pvPortMalloc+0x188>)
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	4a18      	ldr	r2, [pc, #96]	; (8008608 <pvPortMalloc+0x190>)
 80085a8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80085aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085ac:	685a      	ldr	r2, [r3, #4]
 80085ae:	4b13      	ldr	r3, [pc, #76]	; (80085fc <pvPortMalloc+0x184>)
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	431a      	orrs	r2, r3
 80085b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085b6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80085b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085ba:	2200      	movs	r2, #0
 80085bc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80085be:	4b13      	ldr	r3, [pc, #76]	; (800860c <pvPortMalloc+0x194>)
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	3301      	adds	r3, #1
 80085c4:	4a11      	ldr	r2, [pc, #68]	; (800860c <pvPortMalloc+0x194>)
 80085c6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80085c8:	f7fe fcf8 	bl	8006fbc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80085cc:	69fb      	ldr	r3, [r7, #28]
 80085ce:	f003 0307 	and.w	r3, r3, #7
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d00a      	beq.n	80085ec <pvPortMalloc+0x174>
	__asm volatile
 80085d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085da:	f383 8811 	msr	BASEPRI, r3
 80085de:	f3bf 8f6f 	isb	sy
 80085e2:	f3bf 8f4f 	dsb	sy
 80085e6:	60fb      	str	r3, [r7, #12]
}
 80085e8:	bf00      	nop
 80085ea:	e7fe      	b.n	80085ea <pvPortMalloc+0x172>
	return pvReturn;
 80085ec:	69fb      	ldr	r3, [r7, #28]
}
 80085ee:	4618      	mov	r0, r3
 80085f0:	3728      	adds	r7, #40	; 0x28
 80085f2:	46bd      	mov	sp, r7
 80085f4:	bd80      	pop	{r7, pc}
 80085f6:	bf00      	nop
 80085f8:	24004d20 	.word	0x24004d20
 80085fc:	24004d34 	.word	0x24004d34
 8008600:	24004d24 	.word	0x24004d24
 8008604:	24004d18 	.word	0x24004d18
 8008608:	24004d28 	.word	0x24004d28
 800860c:	24004d2c 	.word	0x24004d2c

08008610 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008610:	b580      	push	{r7, lr}
 8008612:	b086      	sub	sp, #24
 8008614:	af00      	add	r7, sp, #0
 8008616:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	2b00      	cmp	r3, #0
 8008620:	d04d      	beq.n	80086be <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008622:	2308      	movs	r3, #8
 8008624:	425b      	negs	r3, r3
 8008626:	697a      	ldr	r2, [r7, #20]
 8008628:	4413      	add	r3, r2
 800862a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800862c:	697b      	ldr	r3, [r7, #20]
 800862e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008630:	693b      	ldr	r3, [r7, #16]
 8008632:	685a      	ldr	r2, [r3, #4]
 8008634:	4b24      	ldr	r3, [pc, #144]	; (80086c8 <vPortFree+0xb8>)
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	4013      	ands	r3, r2
 800863a:	2b00      	cmp	r3, #0
 800863c:	d10a      	bne.n	8008654 <vPortFree+0x44>
	__asm volatile
 800863e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008642:	f383 8811 	msr	BASEPRI, r3
 8008646:	f3bf 8f6f 	isb	sy
 800864a:	f3bf 8f4f 	dsb	sy
 800864e:	60fb      	str	r3, [r7, #12]
}
 8008650:	bf00      	nop
 8008652:	e7fe      	b.n	8008652 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008654:	693b      	ldr	r3, [r7, #16]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	2b00      	cmp	r3, #0
 800865a:	d00a      	beq.n	8008672 <vPortFree+0x62>
	__asm volatile
 800865c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008660:	f383 8811 	msr	BASEPRI, r3
 8008664:	f3bf 8f6f 	isb	sy
 8008668:	f3bf 8f4f 	dsb	sy
 800866c:	60bb      	str	r3, [r7, #8]
}
 800866e:	bf00      	nop
 8008670:	e7fe      	b.n	8008670 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008672:	693b      	ldr	r3, [r7, #16]
 8008674:	685a      	ldr	r2, [r3, #4]
 8008676:	4b14      	ldr	r3, [pc, #80]	; (80086c8 <vPortFree+0xb8>)
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	4013      	ands	r3, r2
 800867c:	2b00      	cmp	r3, #0
 800867e:	d01e      	beq.n	80086be <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008680:	693b      	ldr	r3, [r7, #16]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	2b00      	cmp	r3, #0
 8008686:	d11a      	bne.n	80086be <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008688:	693b      	ldr	r3, [r7, #16]
 800868a:	685a      	ldr	r2, [r3, #4]
 800868c:	4b0e      	ldr	r3, [pc, #56]	; (80086c8 <vPortFree+0xb8>)
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	43db      	mvns	r3, r3
 8008692:	401a      	ands	r2, r3
 8008694:	693b      	ldr	r3, [r7, #16]
 8008696:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008698:	f7fe fc82 	bl	8006fa0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800869c:	693b      	ldr	r3, [r7, #16]
 800869e:	685a      	ldr	r2, [r3, #4]
 80086a0:	4b0a      	ldr	r3, [pc, #40]	; (80086cc <vPortFree+0xbc>)
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	4413      	add	r3, r2
 80086a6:	4a09      	ldr	r2, [pc, #36]	; (80086cc <vPortFree+0xbc>)
 80086a8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80086aa:	6938      	ldr	r0, [r7, #16]
 80086ac:	f000 f874 	bl	8008798 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80086b0:	4b07      	ldr	r3, [pc, #28]	; (80086d0 <vPortFree+0xc0>)
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	3301      	adds	r3, #1
 80086b6:	4a06      	ldr	r2, [pc, #24]	; (80086d0 <vPortFree+0xc0>)
 80086b8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80086ba:	f7fe fc7f 	bl	8006fbc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80086be:	bf00      	nop
 80086c0:	3718      	adds	r7, #24
 80086c2:	46bd      	mov	sp, r7
 80086c4:	bd80      	pop	{r7, pc}
 80086c6:	bf00      	nop
 80086c8:	24004d34 	.word	0x24004d34
 80086cc:	24004d24 	.word	0x24004d24
 80086d0:	24004d30 	.word	0x24004d30

080086d4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80086d4:	b480      	push	{r7}
 80086d6:	b085      	sub	sp, #20
 80086d8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80086da:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80086de:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80086e0:	4b27      	ldr	r3, [pc, #156]	; (8008780 <prvHeapInit+0xac>)
 80086e2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	f003 0307 	and.w	r3, r3, #7
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d00c      	beq.n	8008708 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	3307      	adds	r3, #7
 80086f2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	f023 0307 	bic.w	r3, r3, #7
 80086fa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80086fc:	68ba      	ldr	r2, [r7, #8]
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	1ad3      	subs	r3, r2, r3
 8008702:	4a1f      	ldr	r2, [pc, #124]	; (8008780 <prvHeapInit+0xac>)
 8008704:	4413      	add	r3, r2
 8008706:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800870c:	4a1d      	ldr	r2, [pc, #116]	; (8008784 <prvHeapInit+0xb0>)
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008712:	4b1c      	ldr	r3, [pc, #112]	; (8008784 <prvHeapInit+0xb0>)
 8008714:	2200      	movs	r2, #0
 8008716:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	68ba      	ldr	r2, [r7, #8]
 800871c:	4413      	add	r3, r2
 800871e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008720:	2208      	movs	r2, #8
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	1a9b      	subs	r3, r3, r2
 8008726:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	f023 0307 	bic.w	r3, r3, #7
 800872e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	4a15      	ldr	r2, [pc, #84]	; (8008788 <prvHeapInit+0xb4>)
 8008734:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008736:	4b14      	ldr	r3, [pc, #80]	; (8008788 <prvHeapInit+0xb4>)
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	2200      	movs	r2, #0
 800873c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800873e:	4b12      	ldr	r3, [pc, #72]	; (8008788 <prvHeapInit+0xb4>)
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	2200      	movs	r2, #0
 8008744:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800874a:	683b      	ldr	r3, [r7, #0]
 800874c:	68fa      	ldr	r2, [r7, #12]
 800874e:	1ad2      	subs	r2, r2, r3
 8008750:	683b      	ldr	r3, [r7, #0]
 8008752:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008754:	4b0c      	ldr	r3, [pc, #48]	; (8008788 <prvHeapInit+0xb4>)
 8008756:	681a      	ldr	r2, [r3, #0]
 8008758:	683b      	ldr	r3, [r7, #0]
 800875a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800875c:	683b      	ldr	r3, [r7, #0]
 800875e:	685b      	ldr	r3, [r3, #4]
 8008760:	4a0a      	ldr	r2, [pc, #40]	; (800878c <prvHeapInit+0xb8>)
 8008762:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008764:	683b      	ldr	r3, [r7, #0]
 8008766:	685b      	ldr	r3, [r3, #4]
 8008768:	4a09      	ldr	r2, [pc, #36]	; (8008790 <prvHeapInit+0xbc>)
 800876a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800876c:	4b09      	ldr	r3, [pc, #36]	; (8008794 <prvHeapInit+0xc0>)
 800876e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008772:	601a      	str	r2, [r3, #0]
}
 8008774:	bf00      	nop
 8008776:	3714      	adds	r7, #20
 8008778:	46bd      	mov	sp, r7
 800877a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800877e:	4770      	bx	lr
 8008780:	24001118 	.word	0x24001118
 8008784:	24004d18 	.word	0x24004d18
 8008788:	24004d20 	.word	0x24004d20
 800878c:	24004d28 	.word	0x24004d28
 8008790:	24004d24 	.word	0x24004d24
 8008794:	24004d34 	.word	0x24004d34

08008798 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008798:	b480      	push	{r7}
 800879a:	b085      	sub	sp, #20
 800879c:	af00      	add	r7, sp, #0
 800879e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80087a0:	4b28      	ldr	r3, [pc, #160]	; (8008844 <prvInsertBlockIntoFreeList+0xac>)
 80087a2:	60fb      	str	r3, [r7, #12]
 80087a4:	e002      	b.n	80087ac <prvInsertBlockIntoFreeList+0x14>
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	60fb      	str	r3, [r7, #12]
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	687a      	ldr	r2, [r7, #4]
 80087b2:	429a      	cmp	r2, r3
 80087b4:	d8f7      	bhi.n	80087a6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	685b      	ldr	r3, [r3, #4]
 80087be:	68ba      	ldr	r2, [r7, #8]
 80087c0:	4413      	add	r3, r2
 80087c2:	687a      	ldr	r2, [r7, #4]
 80087c4:	429a      	cmp	r2, r3
 80087c6:	d108      	bne.n	80087da <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	685a      	ldr	r2, [r3, #4]
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	685b      	ldr	r3, [r3, #4]
 80087d0:	441a      	add	r2, r3
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	685b      	ldr	r3, [r3, #4]
 80087e2:	68ba      	ldr	r2, [r7, #8]
 80087e4:	441a      	add	r2, r3
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	429a      	cmp	r2, r3
 80087ec:	d118      	bne.n	8008820 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	681a      	ldr	r2, [r3, #0]
 80087f2:	4b15      	ldr	r3, [pc, #84]	; (8008848 <prvInsertBlockIntoFreeList+0xb0>)
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	429a      	cmp	r2, r3
 80087f8:	d00d      	beq.n	8008816 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	685a      	ldr	r2, [r3, #4]
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	685b      	ldr	r3, [r3, #4]
 8008804:	441a      	add	r2, r3
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	681a      	ldr	r2, [r3, #0]
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	601a      	str	r2, [r3, #0]
 8008814:	e008      	b.n	8008828 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008816:	4b0c      	ldr	r3, [pc, #48]	; (8008848 <prvInsertBlockIntoFreeList+0xb0>)
 8008818:	681a      	ldr	r2, [r3, #0]
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	601a      	str	r2, [r3, #0]
 800881e:	e003      	b.n	8008828 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	681a      	ldr	r2, [r3, #0]
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008828:	68fa      	ldr	r2, [r7, #12]
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	429a      	cmp	r2, r3
 800882e:	d002      	beq.n	8008836 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	687a      	ldr	r2, [r7, #4]
 8008834:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008836:	bf00      	nop
 8008838:	3714      	adds	r7, #20
 800883a:	46bd      	mov	sp, r7
 800883c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008840:	4770      	bx	lr
 8008842:	bf00      	nop
 8008844:	24004d18 	.word	0x24004d18
 8008848:	24004d20 	.word	0x24004d20

0800884c <__libc_init_array>:
 800884c:	b570      	push	{r4, r5, r6, lr}
 800884e:	4d0d      	ldr	r5, [pc, #52]	; (8008884 <__libc_init_array+0x38>)
 8008850:	4c0d      	ldr	r4, [pc, #52]	; (8008888 <__libc_init_array+0x3c>)
 8008852:	1b64      	subs	r4, r4, r5
 8008854:	10a4      	asrs	r4, r4, #2
 8008856:	2600      	movs	r6, #0
 8008858:	42a6      	cmp	r6, r4
 800885a:	d109      	bne.n	8008870 <__libc_init_array+0x24>
 800885c:	4d0b      	ldr	r5, [pc, #44]	; (800888c <__libc_init_array+0x40>)
 800885e:	4c0c      	ldr	r4, [pc, #48]	; (8008890 <__libc_init_array+0x44>)
 8008860:	f000 f8f2 	bl	8008a48 <_init>
 8008864:	1b64      	subs	r4, r4, r5
 8008866:	10a4      	asrs	r4, r4, #2
 8008868:	2600      	movs	r6, #0
 800886a:	42a6      	cmp	r6, r4
 800886c:	d105      	bne.n	800887a <__libc_init_array+0x2e>
 800886e:	bd70      	pop	{r4, r5, r6, pc}
 8008870:	f855 3b04 	ldr.w	r3, [r5], #4
 8008874:	4798      	blx	r3
 8008876:	3601      	adds	r6, #1
 8008878:	e7ee      	b.n	8008858 <__libc_init_array+0xc>
 800887a:	f855 3b04 	ldr.w	r3, [r5], #4
 800887e:	4798      	blx	r3
 8008880:	3601      	adds	r6, #1
 8008882:	e7f2      	b.n	800886a <__libc_init_array+0x1e>
 8008884:	08008b48 	.word	0x08008b48
 8008888:	08008b48 	.word	0x08008b48
 800888c:	08008b48 	.word	0x08008b48
 8008890:	08008b4c 	.word	0x08008b4c

08008894 <__retarget_lock_acquire_recursive>:
 8008894:	4770      	bx	lr

08008896 <__retarget_lock_release_recursive>:
 8008896:	4770      	bx	lr

08008898 <memcpy>:
 8008898:	440a      	add	r2, r1
 800889a:	4291      	cmp	r1, r2
 800889c:	f100 33ff 	add.w	r3, r0, #4294967295
 80088a0:	d100      	bne.n	80088a4 <memcpy+0xc>
 80088a2:	4770      	bx	lr
 80088a4:	b510      	push	{r4, lr}
 80088a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80088aa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80088ae:	4291      	cmp	r1, r2
 80088b0:	d1f9      	bne.n	80088a6 <memcpy+0xe>
 80088b2:	bd10      	pop	{r4, pc}

080088b4 <memset>:
 80088b4:	4402      	add	r2, r0
 80088b6:	4603      	mov	r3, r0
 80088b8:	4293      	cmp	r3, r2
 80088ba:	d100      	bne.n	80088be <memset+0xa>
 80088bc:	4770      	bx	lr
 80088be:	f803 1b01 	strb.w	r1, [r3], #1
 80088c2:	e7f9      	b.n	80088b8 <memset+0x4>

080088c4 <cleanup_glue>:
 80088c4:	b538      	push	{r3, r4, r5, lr}
 80088c6:	460c      	mov	r4, r1
 80088c8:	6809      	ldr	r1, [r1, #0]
 80088ca:	4605      	mov	r5, r0
 80088cc:	b109      	cbz	r1, 80088d2 <cleanup_glue+0xe>
 80088ce:	f7ff fff9 	bl	80088c4 <cleanup_glue>
 80088d2:	4621      	mov	r1, r4
 80088d4:	4628      	mov	r0, r5
 80088d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80088da:	f000 b869 	b.w	80089b0 <_free_r>
	...

080088e0 <_reclaim_reent>:
 80088e0:	4b2c      	ldr	r3, [pc, #176]	; (8008994 <_reclaim_reent+0xb4>)
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	4283      	cmp	r3, r0
 80088e6:	b570      	push	{r4, r5, r6, lr}
 80088e8:	4604      	mov	r4, r0
 80088ea:	d051      	beq.n	8008990 <_reclaim_reent+0xb0>
 80088ec:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80088ee:	b143      	cbz	r3, 8008902 <_reclaim_reent+0x22>
 80088f0:	68db      	ldr	r3, [r3, #12]
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d14a      	bne.n	800898c <_reclaim_reent+0xac>
 80088f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80088f8:	6819      	ldr	r1, [r3, #0]
 80088fa:	b111      	cbz	r1, 8008902 <_reclaim_reent+0x22>
 80088fc:	4620      	mov	r0, r4
 80088fe:	f000 f857 	bl	80089b0 <_free_r>
 8008902:	6961      	ldr	r1, [r4, #20]
 8008904:	b111      	cbz	r1, 800890c <_reclaim_reent+0x2c>
 8008906:	4620      	mov	r0, r4
 8008908:	f000 f852 	bl	80089b0 <_free_r>
 800890c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800890e:	b111      	cbz	r1, 8008916 <_reclaim_reent+0x36>
 8008910:	4620      	mov	r0, r4
 8008912:	f000 f84d 	bl	80089b0 <_free_r>
 8008916:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8008918:	b111      	cbz	r1, 8008920 <_reclaim_reent+0x40>
 800891a:	4620      	mov	r0, r4
 800891c:	f000 f848 	bl	80089b0 <_free_r>
 8008920:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8008922:	b111      	cbz	r1, 800892a <_reclaim_reent+0x4a>
 8008924:	4620      	mov	r0, r4
 8008926:	f000 f843 	bl	80089b0 <_free_r>
 800892a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800892c:	b111      	cbz	r1, 8008934 <_reclaim_reent+0x54>
 800892e:	4620      	mov	r0, r4
 8008930:	f000 f83e 	bl	80089b0 <_free_r>
 8008934:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8008936:	b111      	cbz	r1, 800893e <_reclaim_reent+0x5e>
 8008938:	4620      	mov	r0, r4
 800893a:	f000 f839 	bl	80089b0 <_free_r>
 800893e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8008940:	b111      	cbz	r1, 8008948 <_reclaim_reent+0x68>
 8008942:	4620      	mov	r0, r4
 8008944:	f000 f834 	bl	80089b0 <_free_r>
 8008948:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800894a:	b111      	cbz	r1, 8008952 <_reclaim_reent+0x72>
 800894c:	4620      	mov	r0, r4
 800894e:	f000 f82f 	bl	80089b0 <_free_r>
 8008952:	69a3      	ldr	r3, [r4, #24]
 8008954:	b1e3      	cbz	r3, 8008990 <_reclaim_reent+0xb0>
 8008956:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008958:	4620      	mov	r0, r4
 800895a:	4798      	blx	r3
 800895c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800895e:	b1b9      	cbz	r1, 8008990 <_reclaim_reent+0xb0>
 8008960:	4620      	mov	r0, r4
 8008962:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008966:	f7ff bfad 	b.w	80088c4 <cleanup_glue>
 800896a:	5949      	ldr	r1, [r1, r5]
 800896c:	b941      	cbnz	r1, 8008980 <_reclaim_reent+0xa0>
 800896e:	3504      	adds	r5, #4
 8008970:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008972:	2d80      	cmp	r5, #128	; 0x80
 8008974:	68d9      	ldr	r1, [r3, #12]
 8008976:	d1f8      	bne.n	800896a <_reclaim_reent+0x8a>
 8008978:	4620      	mov	r0, r4
 800897a:	f000 f819 	bl	80089b0 <_free_r>
 800897e:	e7ba      	b.n	80088f6 <_reclaim_reent+0x16>
 8008980:	680e      	ldr	r6, [r1, #0]
 8008982:	4620      	mov	r0, r4
 8008984:	f000 f814 	bl	80089b0 <_free_r>
 8008988:	4631      	mov	r1, r6
 800898a:	e7ef      	b.n	800896c <_reclaim_reent+0x8c>
 800898c:	2500      	movs	r5, #0
 800898e:	e7ef      	b.n	8008970 <_reclaim_reent+0x90>
 8008990:	bd70      	pop	{r4, r5, r6, pc}
 8008992:	bf00      	nop
 8008994:	24000014 	.word	0x24000014

08008998 <__malloc_lock>:
 8008998:	4801      	ldr	r0, [pc, #4]	; (80089a0 <__malloc_lock+0x8>)
 800899a:	f7ff bf7b 	b.w	8008894 <__retarget_lock_acquire_recursive>
 800899e:	bf00      	nop
 80089a0:	24004d38 	.word	0x24004d38

080089a4 <__malloc_unlock>:
 80089a4:	4801      	ldr	r0, [pc, #4]	; (80089ac <__malloc_unlock+0x8>)
 80089a6:	f7ff bf76 	b.w	8008896 <__retarget_lock_release_recursive>
 80089aa:	bf00      	nop
 80089ac:	24004d38 	.word	0x24004d38

080089b0 <_free_r>:
 80089b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80089b2:	2900      	cmp	r1, #0
 80089b4:	d044      	beq.n	8008a40 <_free_r+0x90>
 80089b6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80089ba:	9001      	str	r0, [sp, #4]
 80089bc:	2b00      	cmp	r3, #0
 80089be:	f1a1 0404 	sub.w	r4, r1, #4
 80089c2:	bfb8      	it	lt
 80089c4:	18e4      	addlt	r4, r4, r3
 80089c6:	f7ff ffe7 	bl	8008998 <__malloc_lock>
 80089ca:	4a1e      	ldr	r2, [pc, #120]	; (8008a44 <_free_r+0x94>)
 80089cc:	9801      	ldr	r0, [sp, #4]
 80089ce:	6813      	ldr	r3, [r2, #0]
 80089d0:	b933      	cbnz	r3, 80089e0 <_free_r+0x30>
 80089d2:	6063      	str	r3, [r4, #4]
 80089d4:	6014      	str	r4, [r2, #0]
 80089d6:	b003      	add	sp, #12
 80089d8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80089dc:	f7ff bfe2 	b.w	80089a4 <__malloc_unlock>
 80089e0:	42a3      	cmp	r3, r4
 80089e2:	d908      	bls.n	80089f6 <_free_r+0x46>
 80089e4:	6825      	ldr	r5, [r4, #0]
 80089e6:	1961      	adds	r1, r4, r5
 80089e8:	428b      	cmp	r3, r1
 80089ea:	bf01      	itttt	eq
 80089ec:	6819      	ldreq	r1, [r3, #0]
 80089ee:	685b      	ldreq	r3, [r3, #4]
 80089f0:	1949      	addeq	r1, r1, r5
 80089f2:	6021      	streq	r1, [r4, #0]
 80089f4:	e7ed      	b.n	80089d2 <_free_r+0x22>
 80089f6:	461a      	mov	r2, r3
 80089f8:	685b      	ldr	r3, [r3, #4]
 80089fa:	b10b      	cbz	r3, 8008a00 <_free_r+0x50>
 80089fc:	42a3      	cmp	r3, r4
 80089fe:	d9fa      	bls.n	80089f6 <_free_r+0x46>
 8008a00:	6811      	ldr	r1, [r2, #0]
 8008a02:	1855      	adds	r5, r2, r1
 8008a04:	42a5      	cmp	r5, r4
 8008a06:	d10b      	bne.n	8008a20 <_free_r+0x70>
 8008a08:	6824      	ldr	r4, [r4, #0]
 8008a0a:	4421      	add	r1, r4
 8008a0c:	1854      	adds	r4, r2, r1
 8008a0e:	42a3      	cmp	r3, r4
 8008a10:	6011      	str	r1, [r2, #0]
 8008a12:	d1e0      	bne.n	80089d6 <_free_r+0x26>
 8008a14:	681c      	ldr	r4, [r3, #0]
 8008a16:	685b      	ldr	r3, [r3, #4]
 8008a18:	6053      	str	r3, [r2, #4]
 8008a1a:	4421      	add	r1, r4
 8008a1c:	6011      	str	r1, [r2, #0]
 8008a1e:	e7da      	b.n	80089d6 <_free_r+0x26>
 8008a20:	d902      	bls.n	8008a28 <_free_r+0x78>
 8008a22:	230c      	movs	r3, #12
 8008a24:	6003      	str	r3, [r0, #0]
 8008a26:	e7d6      	b.n	80089d6 <_free_r+0x26>
 8008a28:	6825      	ldr	r5, [r4, #0]
 8008a2a:	1961      	adds	r1, r4, r5
 8008a2c:	428b      	cmp	r3, r1
 8008a2e:	bf04      	itt	eq
 8008a30:	6819      	ldreq	r1, [r3, #0]
 8008a32:	685b      	ldreq	r3, [r3, #4]
 8008a34:	6063      	str	r3, [r4, #4]
 8008a36:	bf04      	itt	eq
 8008a38:	1949      	addeq	r1, r1, r5
 8008a3a:	6021      	streq	r1, [r4, #0]
 8008a3c:	6054      	str	r4, [r2, #4]
 8008a3e:	e7ca      	b.n	80089d6 <_free_r+0x26>
 8008a40:	b003      	add	sp, #12
 8008a42:	bd30      	pop	{r4, r5, pc}
 8008a44:	24004d3c 	.word	0x24004d3c

08008a48 <_init>:
 8008a48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a4a:	bf00      	nop
 8008a4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a4e:	bc08      	pop	{r3}
 8008a50:	469e      	mov	lr, r3
 8008a52:	4770      	bx	lr

08008a54 <_fini>:
 8008a54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a56:	bf00      	nop
 8008a58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a5a:	bc08      	pop	{r3}
 8008a5c:	469e      	mov	lr, r3
 8008a5e:	4770      	bx	lr
